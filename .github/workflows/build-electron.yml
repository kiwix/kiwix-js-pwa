# Workflow to build Electron and (if not a packaged app) NWJS packages

name: Build Electron and NWJS packages

on:
  schedule:
  # Nightly run at 03:39 UTC
    - cron: '39 03 * * *'
  workflow_dispatch:
    inputs:
      version:
        description: Specific version to build like v9.9.9 (if empty, builds version in package.json)
        required: false
        default: ''
      target:
        description: Do you wish to build release or nightly?
        required: false
        default: 'nightly'
env:
  INPUT_VERSION: ${{ github.event.inputs.version }}
  INPUT_TARGET: ${{ github.event.inputs.target }}
  CRON_LAUNCHED: ${{ github.event.schedule }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CSC_LINK: ${{ secrets.CSC_LINK }}
  CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
  SSH_KEY: ${{ secrets.SSH_KEY }}
      
jobs:

  Release_Linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
    - name: Install dependencies
      run: npm install
    - name: Rewrite app version number and file name
      run: |
        chmod +x ./scripts/rewrite_app_version_number.sh
        ./scripts/rewrite_app_version_number.sh
        # Replace -app in archive name for Electron apps
        sed -i -E 's/(mdwiki[^-]+)-app_/\1_/g' ./www/js/init.js
    - name: Download archive if needed
      run: |
        # Get archive name
        packagedFile="$(grep -m1 'params\[.packagedFile' www/js/init.js | sed -E 's/^[^"]+"([^"]+\.zim)".+/\1/')"
        # If file doesn't exist in FS
        if [ ! -f "archives/$packagedFile" ]; then
          # Generalize the name and download it
          packagedFileGeneric=$(sed -E 's/_[0-9-]+(\.zim)/\1/' <<<"$packagedFile")
          echo -e "\nDownloading https://download.kiwix.org/zim/$packagedFileGeneric"
          wget -nv "https://download.kiwix.org/zim/$packagedFileGeneric" -O "archives/$packagedFile"
        fi
        ls archives
        if [ -f "archives/$packagedFile" ]; then
          echo -e "\nFile $packagedFile now available in 'archives'.\n"
        else
          echo -e "\nError! We could not obtain the requested archive $packagedFile!\n"
          exit 1
        fi
    - name: Publish
      run: |
        npm run publish
        echo "$SSH_KEY" > ./scripts/ssh_key
        chmod 600 ./scripts/ssh_key
        chmod +x ./scripts/publish_linux_packages_to_kiwix.sh
        ./scripts/publish_linux_packages_to_kiwix.sh

  Release_Windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3      
    - uses: actions/setup-node@v3
    - name: Install dependencies
      run: npm install
    - name: Rewrite app version number and file name
      run: |
        $INPUT_VERSION = $Env:INPUT_VERSION
        $INPUT_TARGET = $Env:INPUT_TARGET
        $CRON_LAUNCHED = $Env:CRON_LAUNCHED
        ./scripts/Rewrite-AppVersion.ps1
        # Replace -app in archive name for Electron apps
        (Get-Content ./www/js/init.js) -replace '(mdwiki[^-]+)-app_', '$1_' | Set-Content -encoding 'utf8BOM' ./www/js/init.js
    - name: Download archive if needed
      run: |
        $packagedFile = (Select-String 'packagedFile' "www\js\init.js" -List) -ireplace '^[^"]+"([^"]+\.zim)".+', '$1'
        if ($packagedFile -and ! (Test-Path "archives\$packagedFile" -PathType Leaf)) {
          # File not in archives, so generalize the name and download it
          $packagedFileGeneric = $packagedFile -replace '_[0-9-]+(\.zim)', '$1'
          Write-Host "`nDownloading https://download.kiwix.org/zim/$packagedFileGeneric"
          Invoke-WebRequest "https://download.kiwix.org/zim/$packagedFileGeneric" -OutFile "archives\$packagedFile"
        }
        ls archives
        if ($packagedFile -and (Test-Path "archives\$packagedFile" -PathType Leaf)) {
          Write-Host "`nFile $packagedFile now available in 'archives'.`n" -ForegroundColor Green
        } else {
          Write-Host "`nError! We could not obtain the requested archive $packagedFile!`n" -ForegroundColor Red
          exit 1
        }
    - name: run electron builder
      run: | 
        $GITHUB_TOKEN = $Env:GITHUB_TOKEN
        $INPUT_VERSION = $Env:INPUT_VERSION
        $INPUT_TARGET = $Env:INPUT_TARGET
        $CRON_LAUNCHED = $Env:CRON_LAUNCHED
        ./scripts/Rewrite-DraftReleaseTag.ps1
        npm run publish
        ./scripts/Rewrite-DraftReleaseTag.ps1
    - name: build portable Electron app
      run: |
        if (-not ($Env:CRON_LAUNCHED -or ($Env:INPUT_TARGET -eq 'nightly'))) {
          $GITHUB_TOKEN = $Env:GITHUB_TOKEN
          $INPUT_VERSION_E = $Env:INPUT_VERSION -replace '^(v[0-9.]+).*', '$1E'
          if ($Env:INPUT_VERSION -match '-Wiki[\w]+') {
            $INPUT_VERSION_E += $matches[0]
          }
          ./scripts/Create-DraftRelease -buildonly -tag_name $INPUT_VERSION_E -portableonly -wingetprompt N
        }
    - name: publish packages
      run: |
        $SSH_KEY = $Env:SSH_KEY
        echo "$SSH_KEY" > .\scripts\ssh_key
        $GITHUB_TOKEN = $Env:GITHUB_TOKEN
        $INPUT_VERSION = $Env:INPUT_VERSION
        $INPUT_TARGET = $Env:INPUT_TARGET
        $CRON_LAUNCHED = $Env:CRON_LAUNCHED
        ./scripts/Publish-ElectronPackages.ps1 -portableonly

  Release_NWJS:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3       
    - uses: actions/setup-node@v3
    - name: Select NWJS app
      run: |
        del package.json
        ren package.json.nwjs package.json
    - name: Install dependencies
      run: npm install
    - name: Rewrite app version number
      run: |
        $INPUT_VERSION = $Env:INPUT_VERSION
        $INPUT_TARGET = $Env:INPUT_TARGET
        $CRON_LAUNCHED = $Env:CRON_LAUNCHED
        ./scripts/Rewrite-AppVersion.ps1
    - name: Download archive if needed
      run: |
        $packagedFile = (Select-String 'packagedFile' "www\js\init.js" -List) -ireplace '^[^"]+"([^"]+\.zim)".+', '$1'
        if ($packagedFile -and ! (Test-Path "archives\$packagedFile" -PathType Leaf)) {
          # File not in archives, so generalize the name and download it
          $packagedFileGeneric = $packagedFile -replace '_[0-9-]+(\.zim)', '$1'
          Write-Host "`nDownloading https://download.kiwix.org/zim/$packagedFileGeneric"
          Invoke-WebRequest "https://download.kiwix.org/zim/$packagedFileGeneric" -OutFile "archives\$packagedFile"
        }
        ls archives
        if ($packagedFile -and (Test-Path "archives\$packagedFile" -PathType Leaf)) {
          Write-Host "`nFile $packagedFile now available in 'archives'.`n" -ForegroundColor Green
        } else {
          Write-Host "`nError! We could not obtain the requested archive $packagedFile!`n" -ForegroundColor Red
          exit 1
        }
    - name: Build NWJS app
      run: ./scripts/Build-NWJS.ps1 -only32bit
    - name: Publish
      run: |
        $SSH_KEY = $Env:SSH_KEY
        echo "$SSH_KEY" > .\scripts\ssh_key
        $GITHUB_TOKEN = $Env:GITHUB_TOKEN
        $INPUT_VERSION = $Env:INPUT_VERSION
        $INPUT_TARGET = $Env:INPUT_TARGET
        $CRON_LAUNCHED = $Env:CRON_LAUNCHED
        ./scripts/Publish-ElectronPackages.ps1