var Module; if (!Module) Module = (typeof Module !== "undefined" ? Module : null) || {}; var moduleOverrides = {}; for (var key in Module) { if (Module.hasOwnProperty(key)) { moduleOverrides[key] = Module[key] } } var ENVIRONMENT_IS_NODE = typeof process === "object" && typeof require === "function"; var ENVIRONMENT_IS_WEB = typeof window === "object"; var ENVIRONMENT_IS_WORKER = typeof importScripts === "function"; var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER; if (ENVIRONMENT_IS_NODE) { if (!Module["print"]) Module["print"] = function print(x) { process["stdout"].write(x + "\n") }; if (!Module["printErr"]) Module["printErr"] = function printErr(x) { process["stderr"].write(x + "\n") }; var nodeFS = require("fs"); var nodePath = require("path"); Module["read"] = function read(filename, binary) { filename = nodePath["normalize"](filename); var ret = nodeFS["readFileSync"](filename); if (!ret && filename != nodePath["resolve"](filename)) { filename = path.join(__dirname, "..", "src", filename); ret = nodeFS["readFileSync"](filename) } if (ret && !binary) ret = ret.toString(); return ret }; Module["readBinary"] = function readBinary(filename) { return Module["read"](filename, true) }; Module["load"] = function load(f) { globalEval(read(f)) }; Module["thisProgram"] = process["argv"][1].replace(/\\/g, "/"); Module["arguments"] = process["argv"].slice(2); if (typeof module !== "undefined") { module["exports"] = Module } process["on"]("uncaughtException", (function (ex) { if (!(ex instanceof ExitStatus)) { throw ex } })) } else if (ENVIRONMENT_IS_SHELL) { if (!Module["print"]) Module["print"] = print; if (typeof printErr != "undefined") Module["printErr"] = printErr; if (typeof read != "undefined") { Module["read"] = read } else { Module["read"] = function read() { throw "no read() available (jsc?)" } } Module["readBinary"] = function readBinary(f) { if (typeof readbuffer === "function") { return new Uint8Array(readbuffer(f)) } var data = read(f, "binary"); assert(typeof data === "object"); return data }; if (typeof scriptArgs != "undefined") { Module["arguments"] = scriptArgs } else if (typeof arguments != "undefined") { Module["arguments"] = arguments } this["Module"] = Module } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) { Module["read"] = function read(url) { var xhr = new XMLHttpRequest; xhr.open("GET", url, false); xhr.send(null); return xhr.responseText }; if (typeof arguments != "undefined") { Module["arguments"] = arguments } if (typeof console !== "undefined") { if (!Module["print"]) Module["print"] = function print(x) { console.log(x) }; if (!Module["printErr"]) Module["printErr"] = function printErr(x) { console.log(x) } } else { var TRY_USE_DUMP = false; if (!Module["print"]) Module["print"] = TRY_USE_DUMP && typeof dump !== "undefined" ? (function (x) { dump(x) }) : (function (x) { }) } if (ENVIRONMENT_IS_WEB) { window["Module"] = Module } else { Module["load"] = importScripts } } else { throw "Unknown runtime environment. Where are we?" } function globalEval(x) { eval.call(null, x) } if (!Module["load"] && Module["read"]) { Module["load"] = function load(f) { globalEval(Module["read"](f)) } } if (!Module["print"]) { Module["print"] = (function () { }) } if (!Module["printErr"]) { Module["printErr"] = Module["print"] } if (!Module["arguments"]) { Module["arguments"] = [] } if (!Module["thisProgram"]) { Module["thisProgram"] = "./this.program" } Module.print = Module["print"]; Module.printErr = Module["printErr"]; Module["preRun"] = []; Module["postRun"] = []; for (var key in moduleOverrides) { if (moduleOverrides.hasOwnProperty(key)) { Module[key] = moduleOverrides[key] } } var Runtime = { setTempRet0: (function (value) { tempRet0 = value }), getTempRet0: (function () { return tempRet0 }), stackSave: (function () { return STACKTOP }), stackRestore: (function (stackTop) { STACKTOP = stackTop }), getNativeTypeSize: (function (type) { switch (type) { case "i1": case "i8": return 1; case "i16": return 2; case "i32": return 4; case "i64": return 8; case "float": return 4; case "double": return 8; default: { if (type[type.length - 1] === "*") { return Runtime.QUANTUM_SIZE } else if (type[0] === "i") { var bits = parseInt(type.substr(1)); assert(bits % 8 === 0); return bits / 8 } else { return 0 } } } }), getNativeFieldSize: (function (type) { return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE) }), STACK_ALIGN: 16, getAlignSize: (function (type, size, vararg) { if (!vararg && (type == "i64" || type == "double")) return 8; if (!type) return Math.min(size, 8); return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE) }), dynCall: (function (sig, ptr, args) { if (args && args.length) { if (!args.splice) args = Array.prototype.slice.call(args); args.splice(0, 0, ptr); return Module["dynCall_" + sig].apply(null, args) } else { return Module["dynCall_" + sig].call(null, ptr) } }), functionPointers: [], addFunction: (function (func) { for (var i = 0; i < Runtime.functionPointers.length; i++){ if (!Runtime.functionPointers[i]) { Runtime.functionPointers[i] = func; return 2 * (1 + i) } } throw "Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS." }), removeFunction: (function (index) { Runtime.functionPointers[(index - 2) / 2] = null }), getAsmConst: (function (code, numArgs) { if (!Runtime.asmConstCache) Runtime.asmConstCache = {}; var func = Runtime.asmConstCache[code]; if (func) return func; var args = []; for (var i = 0; i < numArgs; i++){ args.push(String.fromCharCode(36) + i) } var source = Pointer_stringify(code); if (source[0] === '"') { if (source.indexOf('"', 1) === source.length - 1) { source = source.substr(1, source.length - 2) } else { abort("invalid EM_ASM input |" + source + "|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)") } } try { var evalled = eval("(function(Module, FS) { return function(" + args.join(",") + "){ " + source + " } })")(Module, typeof FS !== "undefined" ? FS : null) } catch (e) { Module.printErr("error in executing inline EM_ASM code: " + e + " on: \n\n" + source + "\n\nwith args |" + args + "| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)"); throw e } return Runtime.asmConstCache[code] = evalled }), warnOnce: (function (text) { if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {}; if (!Runtime.warnOnce.shown[text]) { Runtime.warnOnce.shown[text] = 1; Module.printErr(text) } }), funcWrappers: {}, getFuncWrapper: (function (func, sig) { assert(sig); if (!Runtime.funcWrappers[sig]) { Runtime.funcWrappers[sig] = {} } var sigCache = Runtime.funcWrappers[sig]; if (!sigCache[func]) { sigCache[func] = function dynCall_wrapper() { return Runtime.dynCall(sig, func, arguments) } } return sigCache[func] }), UTF8Processor: (function () { var buffer = []; var needed = 0; this.processCChar = (function (code) { code = code & 255; if (buffer.length == 0) { if ((code & 128) == 0) { return String.fromCharCode(code) } buffer.push(code); if ((code & 224) == 192) { needed = 1 } else if ((code & 240) == 224) { needed = 2 } else { needed = 3 } return "" } if (needed) { buffer.push(code); needed--; if (needed > 0) return "" } var c1 = buffer[0]; var c2 = buffer[1]; var c3 = buffer[2]; var c4 = buffer[3]; var ret; if (buffer.length == 2) { ret = String.fromCharCode((c1 & 31) << 6 | c2 & 63) } else if (buffer.length == 3) { ret = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63) } else { var codePoint = (c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63; ret = String.fromCharCode(((codePoint - 65536) / 1024 | 0) + 55296, (codePoint - 65536) % 1024 + 56320) } buffer.length = 0; return ret }); this.processJSString = function processJSString(string) { string = unescape(encodeURIComponent(string)); var ret = []; for (var i = 0; i < string.length; i++){ ret.push(string.charCodeAt(i)) } return ret } }), getCompilerSetting: (function (name) { throw "You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work" }), stackAlloc: (function (size) { var ret = STACKTOP; STACKTOP = STACKTOP + size | 0; STACKTOP = STACKTOP + 15 & -16; return ret }), staticAlloc: (function (size) { var ret = STATICTOP; STATICTOP = STATICTOP + size | 0; STATICTOP = STATICTOP + 15 & -16; return ret }), dynamicAlloc: (function (size) { var ret = DYNAMICTOP; DYNAMICTOP = DYNAMICTOP + size | 0; DYNAMICTOP = DYNAMICTOP + 15 & -16; if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory(); return ret }), alignMemory: (function (size, quantum) { var ret = size = Math.ceil(size / (quantum ? quantum : 16)) * (quantum ? quantum : 16); return ret }), makeBigInt: (function (low, high, unsigned) { var ret = unsigned ? +(low >>> 0) + +(high >>> 0) * +4294967296 : +(low >>> 0) + +(high | 0) * +4294967296; return ret }), GLOBAL_BASE: 8, QUANTUM_SIZE: 4, __dummy__: 0 }; Module["Runtime"] = Runtime; var __THREW__ = 0; var ABORT = false; var EXITSTATUS = 0; var undef = 0; var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat; var tempI64, tempI64b; var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9; function assert(condition, text) { if (!condition) { abort("Assertion failed: " + text) } } var globalScope = this; function getCFunc(ident) { var func = Module["_" + ident]; if (!func) { try { func = eval("_" + ident) } catch (e) { } } assert(func, "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)"); return func } var cwrap, ccall; ((function () { var stack = 0; var JSfuncs = { "stackSave": (function () { stack = Runtime.stackSave() }), "stackRestore": (function () { Runtime.stackRestore(stack) }), "arrayToC": (function (arr) { var ret = Runtime.stackAlloc(arr.length); writeArrayToMemory(arr, ret); return ret }), "stringToC": (function (str) { var ret = 0; if (str !== null && str !== undefined && str !== 0) { ret = Runtime.stackAlloc((str.length << 2) + 1); writeStringToMemory(str, ret) } return ret }) }; var toC = { "string": JSfuncs["stringToC"], "array": JSfuncs["arrayToC"] }; ccall = function ccallFunc(ident, returnType, argTypes, args) { var func = getCFunc(ident); var cArgs = []; if (args) { for (var i = 0; i < args.length; i++){ var converter = toC[argTypes[i]]; if (converter) { if (stack === 0) stack = Runtime.stackSave(); cArgs[i] = converter(args[i]) } else { cArgs[i] = args[i] } } } var ret = func.apply(null, cArgs); if (returnType === "string") ret = Pointer_stringify(ret); if (stack !== 0) JSfuncs["stackRestore"](); return ret }; var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/; function parseJSFunc(jsfunc) { var parsed = jsfunc.toString().match(sourceRegex).slice(1); return { arguments: parsed[0], body: parsed[1], returnValue: parsed[2] } } var JSsource = {}; for (var fun in JSfuncs) { if (JSfuncs.hasOwnProperty(fun)) { JSsource[fun] = parseJSFunc(JSfuncs[fun]) } } cwrap = function cwrap(ident, returnType, argTypes) { argTypes = argTypes || []; var cfunc = getCFunc(ident); var numericArgs = argTypes.every((function (type) { return type === "number" })); var numericRet = returnType !== "string"; if (numericRet && numericArgs) { return cfunc } var argNames = argTypes.map((function (x, i) { return "$" + i })); var funcstr = "(function(" + argNames.join(",") + ") {"; var nargs = argTypes.length; if (!numericArgs) { funcstr += JSsource["stackSave"].body + ";"; for (var i = 0; i < nargs; i++){ var arg = argNames[i], type = argTypes[i]; if (type === "number") continue; var convertCode = JSsource[type + "ToC"]; funcstr += "var " + convertCode.arguments + " = " + arg + ";"; funcstr += convertCode.body + ";"; funcstr += arg + "=" + convertCode.returnValue + ";" } } var cfuncname = parseJSFunc((function () { return cfunc })).returnValue; funcstr += "var ret = " + cfuncname + "(" + argNames.join(",") + ");"; if (!numericRet) { var strgfy = parseJSFunc((function () { return Pointer_stringify })).returnValue; funcstr += "ret = " + strgfy + "(ret);" } if (!numericArgs) { funcstr += JSsource["stackRestore"].body + ";" } funcstr += "return ret})"; return eval(funcstr) } }))(); Module["cwrap"] = cwrap; Module["ccall"] = ccall; function setValue(ptr, value, type, noSafe) { type = type || "i8"; if (type.charAt(type.length - 1) === "*") type = "i32"; switch (type) { case "i1": HEAP8[ptr >> 0] = value; break; case "i8": HEAP8[ptr >> 0] = value; break; case "i16": HEAP16[ptr >> 1] = value; break; case "i32": HEAP32[ptr >> 2] = value; break; case "i64": tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0)], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1]; break; case "float": HEAPF32[ptr >> 2] = value; break; case "double": HEAPF64[ptr >> 3] = value; break; default: abort("invalid type for setValue: " + type) } } Module["setValue"] = setValue; function getValue(ptr, type, noSafe) { type = type || "i8"; if (type.charAt(type.length - 1) === "*") type = "i32"; switch (type) { case "i1": return HEAP8[ptr >> 0]; case "i8": return HEAP8[ptr >> 0]; case "i16": return HEAP16[ptr >> 1]; case "i32": return HEAP32[ptr >> 2]; case "i64": return HEAP32[ptr >> 2]; case "float": return HEAPF32[ptr >> 2]; case "double": return HEAPF64[ptr >> 3]; default: abort("invalid type for setValue: " + type) }return null } Module["getValue"] = getValue; var ALLOC_NORMAL = 0; var ALLOC_STACK = 1; var ALLOC_STATIC = 2; var ALLOC_DYNAMIC = 3; var ALLOC_NONE = 4; Module["ALLOC_NORMAL"] = ALLOC_NORMAL; Module["ALLOC_STACK"] = ALLOC_STACK; Module["ALLOC_STATIC"] = ALLOC_STATIC; Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC; Module["ALLOC_NONE"] = ALLOC_NONE; function allocate(slab, types, allocator, ptr) { var zeroinit, size; if (typeof slab === "number") { zeroinit = true; size = slab } else { zeroinit = false; size = slab.length } var singleType = typeof types === "string" ? types : null; var ret; if (allocator == ALLOC_NONE) { ret = ptr } else { ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length)) } if (zeroinit) { var ptr = ret, stop; assert((ret & 3) == 0); stop = ret + (size & ~3); for (; ptr < stop; ptr += 4){ HEAP32[ptr >> 2] = 0 } stop = ret + size; while (ptr < stop) { HEAP8[ptr++ >> 0] = 0 } return ret } if (singleType === "i8") { if (slab.subarray || slab.slice) { HEAPU8.set(slab, ret) } else { HEAPU8.set(new Uint8Array(slab), ret) } return ret } var i = 0, type, typeSize, previousType; while (i < size) { var curr = slab[i]; if (typeof curr === "function") { curr = Runtime.getFunctionIndex(curr) } type = singleType || types[i]; if (type === 0) { i++; continue } if (type == "i64") type = "i32"; setValue(ret + i, curr, type); if (previousType !== type) { typeSize = Runtime.getNativeTypeSize(type); previousType = type } i += typeSize } return ret } Module["allocate"] = allocate; function Pointer_stringify(ptr, length) { var hasUtf = false; var t; var i = 0; while (1) { t = HEAPU8[ptr + i >> 0]; if (t >= 128) hasUtf = true; else if (t == 0 && !length) break; i++; if (length && i == length) break } if (!length) length = i; var ret = ""; if (!hasUtf) { var MAX_CHUNK = 1024; var curr; while (length > 0) { curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK))); ret = ret ? ret + curr : curr; ptr += MAX_CHUNK; length -= MAX_CHUNK } return ret } var utf8 = new Runtime.UTF8Processor; for (i = 0; i < length; i++){ t = HEAPU8[ptr + i >> 0]; ret += utf8.processCChar(t) } return ret } Module["Pointer_stringify"] = Pointer_stringify; function UTF16ToString(ptr) { var i = 0; var str = ""; while (1) { var codeUnit = HEAP16[ptr + i * 2 >> 1]; if (codeUnit == 0) return str; ++i; str += String.fromCharCode(codeUnit) } } Module["UTF16ToString"] = UTF16ToString; function stringToUTF16(str, outPtr) { for (var i = 0; i < str.length; ++i){ var codeUnit = str.charCodeAt(i); HEAP16[outPtr + i * 2 >> 1] = codeUnit } HEAP16[outPtr + str.length * 2 >> 1] = 0 } Module["stringToUTF16"] = stringToUTF16; function UTF32ToString(ptr) { var i = 0; var str = ""; while (1) { var utf32 = HEAP32[ptr + i * 4 >> 2]; if (utf32 == 0) return str; ++i; if (utf32 >= 65536) { var ch = utf32 - 65536; str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023) } else { str += String.fromCharCode(utf32) } } } Module["UTF32ToString"] = UTF32ToString; function stringToUTF32(str, outPtr) { var iChar = 0; for (var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit){ var codeUnit = str.charCodeAt(iCodeUnit); if (codeUnit >= 55296 && codeUnit <= 57343) { var trailSurrogate = str.charCodeAt(++iCodeUnit); codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023 } HEAP32[outPtr + iChar * 4 >> 2] = codeUnit; ++iChar } HEAP32[outPtr + iChar * 4 >> 2] = 0 } Module["stringToUTF32"] = stringToUTF32; function demangle(func) { var hasLibcxxabi = !!Module["___cxa_demangle"]; if (hasLibcxxabi) { try { var buf = _malloc(func.length); writeStringToMemory(func.substr(1), buf); var status = _malloc(4); var ret = Module["___cxa_demangle"](buf, 0, 0, status); if (getValue(status, "i32") === 0 && ret) { return Pointer_stringify(ret) } } catch (e) { } finally { if (buf) _free(buf); if (status) _free(status); if (ret) _free(ret) } } var i = 3; var basicTypes = { "v": "void", "b": "bool", "c": "char", "s": "short", "i": "int", "l": "long", "f": "float", "d": "double", "w": "wchar_t", "a": "signed char", "h": "unsigned char", "t": "unsigned short", "j": "unsigned int", "m": "unsigned long", "x": "long long", "y": "unsigned long long", "z": "..." }; var subs = []; var first = true; function dump(x) { if (x) Module.print(x); Module.print(func); var pre = ""; for (var a = 0; a < i; a++)pre += " "; Module.print(pre + "^") } function parseNested() { i++; if (func[i] === "K") i++; var parts = []; while (func[i] !== "E") { if (func[i] === "S") { i++; var next = func.indexOf("_", i); var num = func.substring(i, next) || 0; parts.push(subs[num] || "?"); i = next + 1; continue } if (func[i] === "C") { parts.push(parts[parts.length - 1]); i += 2; continue } var size = parseInt(func.substr(i)); var pre = size.toString().length; if (!size || !pre) { i--; break } var curr = func.substr(i + pre, size); parts.push(curr); subs.push(curr); i += pre + size } i++; return parts } function parse(rawList, limit, allowVoid) { limit = limit || Infinity; var ret = "", list = []; function flushList() { return "(" + list.join(", ") + ")" } var name; if (func[i] === "N") { name = parseNested().join("::"); limit--; if (limit === 0) return rawList ? [name] : name } else { if (func[i] === "K" || first && func[i] === "L") i++; var size = parseInt(func.substr(i)); if (size) { var pre = size.toString().length; name = func.substr(i + pre, size); i += pre + size } } first = false; if (func[i] === "I") { i++; var iList = parse(true); var iRet = parse(true, 1, true); ret += iRet[0] + " " + name + "<" + iList.join(", ") + ">" } else { ret = name } paramLoop: while (i < func.length && limit-- > 0) { var c = func[i++]; if (c in basicTypes) { list.push(basicTypes[c]) } else { switch (c) { case "P": list.push(parse(true, 1, true)[0] + "*"); break; case "R": list.push(parse(true, 1, true)[0] + "&"); break; case "L": { i++; var end = func.indexOf("E", i); var size = end - i; list.push(func.substr(i, size)); i += size + 2; break }; case "A": { var size = parseInt(func.substr(i)); i += size.toString().length; if (func[i] !== "_") throw "?"; i++; list.push(parse(true, 1, true)[0] + " [" + size + "]"); break }; case "E": break paramLoop; default: ret += "?" + c; break paramLoop } } } if (!allowVoid && list.length === 1 && list[0] === "void") list = []; if (rawList) { if (ret) { list.push(ret + "?") } return list } else { return ret + flushList() } } var final = func; try { if (func == "Object._main" || func == "_main") { return "main()" } if (typeof func === "number") func = Pointer_stringify(func); if (func[0] !== "_") return func; if (func[1] !== "_") return func; if (func[2] !== "Z") return func; switch (func[3]) { case "n": return "operator new()"; case "d": return "operator delete()" }final = parse() } catch (e) { final += "?" } if (final.indexOf("?") >= 0 && !hasLibcxxabi) { Runtime.warnOnce("warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling") } return final } function demangleAll(text) { return text.replace(/__Z[\w\d_]+/g, (function (x) { var y = demangle(x); return x === y ? x : x + " [" + y + "]" })) } function jsStackTrace() { var err = new Error; if (!err.stack) { try { throw new Error(0) } catch (e) { err = e } if (!err.stack) { return "(no stack trace available)" } } return err.stack.toString() } function stackTrace() { return demangleAll(jsStackTrace()) } Module["stackTrace"] = stackTrace; var PAGE_SIZE = 4096; function alignMemoryPage(x) { return x + 4095 & -4096 } var HEAP; var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64; var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; var DYNAMIC_BASE = 0, DYNAMICTOP = 0;
function enlargeMemory() {
    while (TOTAL_MEMORY <= DYNAMICTOP)
    { TOTAL_MEMORY = alignMemoryPage(2 * TOTAL_MEMORY) }
    assert(TOTAL_MEMORY <= Math.pow(2, 30)); var oldHEAP8 = HEAP8; var buffer = new ArrayBuffer(TOTAL_MEMORY); Module["HEAP8"] = HEAP8 = new Int8Array(buffer); Module["HEAP16"] = HEAP16 = new Int16Array(buffer); Module["HEAP32"] = HEAP32 = new Int32Array(buffer); Module["HEAPU8"] = HEAPU8 = new Uint8Array(buffer); Module["HEAPU16"] = HEAPU16 = new Uint16Array(buffer); Module["HEAPU32"] = HEAPU32 = new Uint32Array(buffer); Module["HEAPF32"] = HEAPF32 = new Float32Array(buffer); Module["HEAPF64"] = HEAPF64 = new Float64Array(buffer); HEAP8.set(oldHEAP8); var success = _emscripten_replace_memory(buffer); assert(success)
} var byteLength; try { byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, "byteLength").get) } catch (e) { byteLength = (function (buffer) { return buffer.byteLength }) }
var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;
/* var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 8e7; //GK hex value incorrectly declared */
var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 0x8e7; /* //Fixes kiwix-js #253; kiwix-js-windows #4 */
var FAST_MEMORY = Module["FAST_MEMORY"] || 2097152; var totalMemory = 64 * 1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2 * TOTAL_STACK) {
    if (totalMemory < 16 * 1024 * 1024) { totalMemory *= 2 } else { totalMemory += 16 * 1024 * 1024 }
} if (totalMemory !== TOTAL_MEMORY) { Module.printErr("increasing TOTAL_MEMORY to " + totalMemory + " to be more reasonable"); TOTAL_MEMORY = totalMemory } assert(typeof Int32Array !== "undefined" && typeof Float64Array !== "undefined" && !!(new Int32Array(1))["subarray"] && !!(new Int32Array(1))["set"], "JS engine does not provide full typed array support"); var buffer = new ArrayBuffer(TOTAL_MEMORY); HEAP8 = new Int8Array(buffer); HEAP16 = new Int16Array(buffer); HEAP32 = new Int32Array(buffer); HEAPU8 = new Uint8Array(buffer); HEAPU16 = new Uint16Array(buffer); HEAPU32 = new Uint32Array(buffer); HEAPF32 = new Float32Array(buffer); HEAPF64 = new Float64Array(buffer); HEAP32[0] = 255; assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, "Typed arrays 2 must be run on a little-endian system"); Module["HEAP"] = HEAP; Module["HEAP8"] = HEAP8; Module["HEAP16"] = HEAP16; Module["HEAP32"] = HEAP32; Module["HEAPU8"] = HEAPU8; Module["HEAPU16"] = HEAPU16; Module["HEAPU32"] = HEAPU32; Module["HEAPF32"] = HEAPF32; Module["HEAPF64"] = HEAPF64; function callRuntimeCallbacks(callbacks) { while (callbacks.length > 0) { var callback = callbacks.shift(); if (typeof callback == "function") { callback(); continue } var func = callback.func; if (typeof func === "number") { if (callback.arg === undefined) { Runtime.dynCall("v", func) } else { Runtime.dynCall("vi", func, [callback.arg]) } } else { func(callback.arg === undefined ? null : callback.arg) } } } var __ATPRERUN__ = []; var __ATINIT__ = []; var __ATMAIN__ = []; var __ATEXIT__ = []; var __ATPOSTRUN__ = []; var runtimeInitialized = false; var runtimeExited = false; function preRun() { if (Module["preRun"]) { if (typeof Module["preRun"] == "function") Module["preRun"] = [Module["preRun"]]; while (Module["preRun"].length) { addOnPreRun(Module["preRun"].shift()) } } callRuntimeCallbacks(__ATPRERUN__) } function ensureInitRuntime() { if (runtimeInitialized) return; runtimeInitialized = true; callRuntimeCallbacks(__ATINIT__) } function preMain() { callRuntimeCallbacks(__ATMAIN__) } function exitRuntime() { callRuntimeCallbacks(__ATEXIT__); runtimeExited = true } function postRun() { if (Module["postRun"]) { if (typeof Module["postRun"] == "function") Module["postRun"] = [Module["postRun"]]; while (Module["postRun"].length) { addOnPostRun(Module["postRun"].shift()) } } callRuntimeCallbacks(__ATPOSTRUN__) } function addOnPreRun(cb) { __ATPRERUN__.unshift(cb) } Module["addOnPreRun"] = Module.addOnPreRun = addOnPreRun; function addOnInit(cb) { __ATINIT__.unshift(cb) } Module["addOnInit"] = Module.addOnInit = addOnInit; function addOnPreMain(cb) { __ATMAIN__.unshift(cb) } Module["addOnPreMain"] = Module.addOnPreMain = addOnPreMain; function addOnExit(cb) { __ATEXIT__.unshift(cb) } Module["addOnExit"] = Module.addOnExit = addOnExit; function addOnPostRun(cb) { __ATPOSTRUN__.unshift(cb) } Module["addOnPostRun"] = Module.addOnPostRun = addOnPostRun; function intArrayFromString(stringy, dontAddNull, length) { var ret = (new Runtime.UTF8Processor).processJSString(stringy); if (length) { ret.length = length } if (!dontAddNull) { ret.push(0) } return ret } Module["intArrayFromString"] = intArrayFromString; function intArrayToString(array) { var ret = []; for (var i = 0; i < array.length; i++){ var chr = array[i]; if (chr > 255) { chr &= 255 } ret.push(String.fromCharCode(chr)) } return ret.join("") } Module["intArrayToString"] = intArrayToString; function writeStringToMemory(string, buffer, dontAddNull) { var array = intArrayFromString(string, dontAddNull); var i = 0; while (i < array.length) { var chr = array[i]; HEAP8[buffer + i >> 0] = chr; i = i + 1 } } Module["writeStringToMemory"] = writeStringToMemory; function writeArrayToMemory(array, buffer) { for (var i = 0; i < array.length; i++){ HEAP8[buffer + i >> 0] = array[i] } } Module["writeArrayToMemory"] = writeArrayToMemory; function writeAsciiToMemory(str, buffer, dontAddNull) { for (var i = 0; i < str.length; i++){ HEAP8[buffer + i >> 0] = str.charCodeAt(i) } if (!dontAddNull) HEAP8[buffer + str.length >> 0] = 0 } Module["writeAsciiToMemory"] = writeAsciiToMemory; function unSign(value, bits, ignore) { if (value >= 0) { return value } return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value } function reSign(value, bits, ignore) { if (value <= 0) { return value } var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1); if (value >= half && (bits <= 32 || value > half)) { value = -2 * half + value } return value } if (!Math["imul"] || Math["imul"](4294967295, 5) !== -5) Math["imul"] = function imul(a, b) { var ah = a >>> 16; var al = a & 65535; var bh = b >>> 16; var bl = b & 65535; return al * bl + (ah * bl + al * bh << 16) | 0 }; Math.imul = Math["imul"]; var Math_abs = Math.abs; var Math_cos = Math.cos; var Math_sin = Math.sin; var Math_tan = Math.tan; var Math_acos = Math.acos; var Math_asin = Math.asin; var Math_atan = Math.atan; var Math_atan2 = Math.atan2; var Math_exp = Math.exp; var Math_log = Math.log; var Math_sqrt = Math.sqrt; var Math_ceil = Math.ceil; var Math_floor = Math.floor; var Math_pow = Math.pow; var Math_imul = Math.imul; var Math_fround = Math.fround; var Math_min = Math.min; var runDependencies = 0; var runDependencyWatcher = null; var dependenciesFulfilled = null; function addRunDependency(id) { runDependencies++; if (Module["monitorRunDependencies"]) { Module["monitorRunDependencies"](runDependencies) } } Module["addRunDependency"] = addRunDependency; function removeRunDependency(id) { runDependencies--; if (Module["monitorRunDependencies"]) { Module["monitorRunDependencies"](runDependencies) } if (runDependencies == 0) { if (runDependencyWatcher !== null) { clearInterval(runDependencyWatcher); runDependencyWatcher = null } if (dependenciesFulfilled) { var callback = dependenciesFulfilled; dependenciesFulfilled = null; callback() } } } Module["removeRunDependency"] = removeRunDependency; Module["preloadedImages"] = {}; Module["preloadedAudios"] = {}; var memoryInitializer = null; STATIC_BASE = 8; STATICTOP = STATIC_BASE + Runtime.alignMemory(3595); __ATINIT__.push(); allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 90, 0, 0, 0, 0, 0, 0, 253, 55, 122, 88, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE); var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8); assert(tempDoublePtr % 8 == 0); function copyTempFloat(ptr) { HEAP8[tempDoublePtr] = HEAP8[ptr]; HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1]; HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2]; HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3] } function copyTempDouble(ptr) { HEAP8[tempDoublePtr] = HEAP8[ptr]; HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1]; HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2]; HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3]; HEAP8[tempDoublePtr + 4] = HEAP8[ptr + 4]; HEAP8[tempDoublePtr + 5] = HEAP8[ptr + 5]; HEAP8[tempDoublePtr + 6] = HEAP8[ptr + 6]; HEAP8[tempDoublePtr + 7] = HEAP8[ptr + 7] } Module["_i64Subtract"] = _i64Subtract; Module["_i64Add"] = _i64Add; Module["_memset"] = _memset; Module["_bitshift64Lshr"] = _bitshift64Lshr; Module["_bitshift64Shl"] = _bitshift64Shl; function _abort() { Module["abort"]() } Module["_strlen"] = _strlen; function _emscripten_memcpy_big(dest, src, num) { HEAPU8.set(HEAPU8.subarray(src, src + num), dest); return dest } Module["_memcpy"] = _memcpy; var ___errno_state = 0; function ___setErrNo(value) { HEAP32[___errno_state >> 2] = value; return value } var ERRNO_CODES = { EPERM: 1, ENOENT: 2, ESRCH: 3, EINTR: 4, EIO: 5, ENXIO: 6, E2BIG: 7, ENOEXEC: 8, EBADF: 9, ECHILD: 10, EAGAIN: 11, EWOULDBLOCK: 11, ENOMEM: 12, EACCES: 13, EFAULT: 14, ENOTBLK: 15, EBUSY: 16, EEXIST: 17, EXDEV: 18, ENODEV: 19, ENOTDIR: 20, EISDIR: 21, EINVAL: 22, ENFILE: 23, EMFILE: 24, ENOTTY: 25, ETXTBSY: 26, EFBIG: 27, ENOSPC: 28, ESPIPE: 29, EROFS: 30, EMLINK: 31, EPIPE: 32, EDOM: 33, ERANGE: 34, ENOMSG: 42, EIDRM: 43, ECHRNG: 44, EL2NSYNC: 45, EL3HLT: 46, EL3RST: 47, ELNRNG: 48, EUNATCH: 49, ENOCSI: 50, EL2HLT: 51, EDEADLK: 35, ENOLCK: 37, EBADE: 52, EBADR: 53, EXFULL: 54, ENOANO: 55, EBADRQC: 56, EBADSLT: 57, EDEADLOCK: 35, EBFONT: 59, ENOSTR: 60, ENODATA: 61, ETIME: 62, ENOSR: 63, ENONET: 64, ENOPKG: 65, EREMOTE: 66, ENOLINK: 67, EADV: 68, ESRMNT: 69, ECOMM: 70, EPROTO: 71, EMULTIHOP: 72, EDOTDOT: 73, EBADMSG: 74, ENOTUNIQ: 76, EBADFD: 77, EREMCHG: 78, ELIBACC: 79, ELIBBAD: 80, ELIBSCN: 81, ELIBMAX: 82, ELIBEXEC: 83, ENOSYS: 38, ENOTEMPTY: 39, ENAMETOOLONG: 36, ELOOP: 40, EOPNOTSUPP: 95, EPFNOSUPPORT: 96, ECONNRESET: 104, ENOBUFS: 105, EAFNOSUPPORT: 97, EPROTOTYPE: 91, ENOTSOCK: 88, ENOPROTOOPT: 92, ESHUTDOWN: 108, ECONNREFUSED: 111, EADDRINUSE: 98, ECONNABORTED: 103, ENETUNREACH: 101, ENETDOWN: 100, ETIMEDOUT: 110, EHOSTDOWN: 112, EHOSTUNREACH: 113, EINPROGRESS: 115, EALREADY: 114, EDESTADDRREQ: 89, EMSGSIZE: 90, EPROTONOSUPPORT: 93, ESOCKTNOSUPPORT: 94, EADDRNOTAVAIL: 99, ENETRESET: 102, EISCONN: 106, ENOTCONN: 107, ETOOMANYREFS: 109, EUSERS: 87, EDQUOT: 122, ESTALE: 116, ENOTSUP: 95, ENOMEDIUM: 123, EILSEQ: 84, EOVERFLOW: 75, ECANCELED: 125, ENOTRECOVERABLE: 131, EOWNERDEAD: 130, ESTRPIPE: 86 }; function _sysconf(name) { switch (name) { case 30: return PAGE_SIZE; case 132: case 133: case 12: case 137: case 138: case 15: case 235: case 16: case 17: case 18: case 19: case 20: case 149: case 13: case 10: case 236: case 153: case 9: case 21: case 22: case 159: case 154: case 14: case 77: case 78: case 139: case 80: case 81: case 79: case 82: case 68: case 67: case 164: case 11: case 29: case 47: case 48: case 95: case 52: case 51: case 46: return 200809; case 27: case 246: case 127: case 128: case 23: case 24: case 160: case 161: case 181: case 182: case 242: case 183: case 184: case 243: case 244: case 245: case 165: case 178: case 179: case 49: case 50: case 168: case 169: case 175: case 170: case 171: case 172: case 97: case 76: case 32: case 173: case 35: return -1; case 176: case 177: case 7: case 155: case 8: case 157: case 125: case 126: case 92: case 93: case 129: case 130: case 131: case 94: case 91: return 1; case 74: case 60: case 69: case 70: case 4: return 1024; case 31: case 42: case 72: return 32; case 87: case 26: case 33: return 2147483647; case 34: case 1: return 47839; case 38: case 36: return 99; case 43: case 37: return 2048; case 0: return 2097152; case 3: return 65536; case 28: return 32768; case 44: return 32767; case 75: return 16384; case 39: return 1e3; case 89: return 700; case 71: return 256; case 40: return 255; case 2: return 100; case 180: return 64; case 25: return 20; case 5: return 16; case 6: return 6; case 73: return 4; case 84: { if (typeof navigator === "object") return navigator["hardwareConcurrency"] || 1; return 1 } }___setErrNo(ERRNO_CODES.EINVAL); return -1 } function _sbrk(bytes) { var self = _sbrk; if (!self.called) { DYNAMICTOP = alignMemoryPage(DYNAMICTOP); self.called = true; assert(Runtime.dynamicAlloc); self.alloc = Runtime.dynamicAlloc; Runtime.dynamicAlloc = (function () { abort("cannot dynamically allocate, sbrk now has control") }) } var ret = DYNAMICTOP; if (bytes != 0) self.alloc(bytes); return ret } Module["_memmove"] = _memmove; function ___errno_location() { return ___errno_state } var ERRNO_MESSAGES = { 0: "Success", 1: "Not super-user", 2: "No such file or directory", 3: "No such process", 4: "Interrupted system call", 5: "I/O error", 6: "No such device or address", 7: "Arg list too long", 8: "Exec format error", 9: "Bad file number", 10: "No children", 11: "No more processes", 12: "Not enough core", 13: "Permission denied", 14: "Bad address", 15: "Block device required", 16: "Mount device busy", 17: "File exists", 18: "Cross-device link", 19: "No such device", 20: "Not a directory", 21: "Is a directory", 22: "Invalid argument", 23: "Too many open files in system", 24: "Too many open files", 25: "Not a typewriter", 26: "Text file busy", 27: "File too large", 28: "No space left on device", 29: "Illegal seek", 30: "Read only file system", 31: "Too many links", 32: "Broken pipe", 33: "Math arg out of domain of func", 34: "Math result not representable", 35: "File locking deadlock error", 36: "File or path name too long", 37: "No record locks available", 38: "Function not implemented", 39: "Directory not empty", 40: "Too many symbolic links", 42: "No message of desired type", 43: "Identifier removed", 44: "Channel number out of range", 45: "Level 2 not synchronized", 46: "Level 3 halted", 47: "Level 3 reset", 48: "Link number out of range", 49: "Protocol driver not attached", 50: "No CSI structure available", 51: "Level 2 halted", 52: "Invalid exchange", 53: "Invalid request descriptor", 54: "Exchange full", 55: "No anode", 56: "Invalid request code", 57: "Invalid slot", 59: "Bad font file fmt", 60: "Device not a stream", 61: "No data (for no delay io)", 62: "Timer expired", 63: "Out of streams resources", 64: "Machine is not on the network", 65: "Package not installed", 66: "The object is remote", 67: "The link has been severed", 68: "Advertise error", 69: "Srmount error", 70: "Communication error on send", 71: "Protocol error", 72: "Multihop attempted", 73: "Cross mount point (not really error)", 74: "Trying to read unreadable message", 75: "Value too large for defined data type", 76: "Given log. name not unique", 77: "f.d. invalid for this operation", 78: "Remote address changed", 79: "Can   access a needed shared lib", 80: "Accessing a corrupted shared lib", 81: ".lib section in a.out corrupted", 82: "Attempting to link in too many libs", 83: "Attempting to exec a shared library", 84: "Illegal byte sequence", 86: "Streams pipe error", 87: "Too many users", 88: "Socket operation on non-socket", 89: "Destination address required", 90: "Message too long", 91: "Protocol wrong type for socket", 92: "Protocol not available", 93: "Unknown protocol", 94: "Socket type not supported", 95: "Not supported", 96: "Protocol family not supported", 97: "Address family not supported by protocol family", 98: "Address already in use", 99: "Address not available", 100: "Network interface is not configured", 101: "Network is unreachable", 102: "Connection reset by network", 103: "Connection aborted", 104: "Connection reset by peer", 105: "No buffer space available", 106: "Socket is already connected", 107: "Socket is not connected", 108: "Can't send after socket shutdown", 109: "Too many references", 110: "Connection timed out", 111: "Connection refused", 112: "Host is down", 113: "Host is unreachable", 114: "Socket already connected", 115: "Connection already in progress", 116: "Stale file handle", 122: "Quota exceeded", 123: "No medium (in tape drive)", 125: "Operation canceled", 130: "Previous owner died", 131: "State not recoverable" }; var TTY = { ttys: [], init: (function () { }), shutdown: (function () { }), register: (function (dev, ops) { TTY.ttys[dev] = { input: [], output: [], ops: ops }; FS.registerDevice(dev, TTY.stream_ops) }), stream_ops: { open: (function (stream) { var tty = TTY.ttys[stream.node.rdev]; if (!tty) { throw new FS.ErrnoError(ERRNO_CODES.ENODEV) } stream.tty = tty; stream.seekable = false }), close: (function (stream) { if (stream.tty.output.length) { stream.tty.ops.put_char(stream.tty, 10) } }), read: (function (stream, buffer, offset, length, pos) { if (!stream.tty || !stream.tty.ops.get_char) { throw new FS.ErrnoError(ERRNO_CODES.ENXIO) } var bytesRead = 0; for (var i = 0; i < length; i++){ var result; try { result = stream.tty.ops.get_char(stream.tty) } catch (e) { throw new FS.ErrnoError(ERRNO_CODES.EIO) } if (result === undefined && bytesRead === 0) { throw new FS.ErrnoError(ERRNO_CODES.EAGAIN) } if (result === null || result === undefined) break; bytesRead++; buffer[offset + i] = result } if (bytesRead) { stream.node.timestamp = Date.now() } return bytesRead }), write: (function (stream, buffer, offset, length, pos) { if (!stream.tty || !stream.tty.ops.put_char) { throw new FS.ErrnoError(ERRNO_CODES.ENXIO) } for (var i = 0; i < length; i++){ try { stream.tty.ops.put_char(stream.tty, buffer[offset + i]) } catch (e) { throw new FS.ErrnoError(ERRNO_CODES.EIO) } } if (length) { stream.node.timestamp = Date.now() } return i }) }, default_tty_ops: { get_char: (function (tty) { if (!tty.input.length) { var result = null; if (ENVIRONMENT_IS_NODE) { result = process["stdin"]["read"](); if (!result) { if (process["stdin"]["_readableState"] && process["stdin"]["_readableState"]["ended"]) { return null } return undefined } } else if (typeof window != "undefined" && typeof window.prompt == "function") { result = window.prompt("Input: "); if (result !== null) { result += "\n" } } else if (typeof readline == "function") { result = readline(); if (result !== null) { result += "\n" } } if (!result) { return null } tty.input = intArrayFromString(result, true) } return tty.input.shift() }), put_char: (function (tty, val) { if (val === null || val === 10) { Module["print"](tty.output.join("")); tty.output = [] } else { tty.output.push(TTY.utf8.processCChar(val)) } }) }, default_tty1_ops: { put_char: (function (tty, val) { if (val === null || val === 10) { Module["printErr"](tty.output.join("")); tty.output = [] } else { tty.output.push(TTY.utf8.processCChar(val)) } }) } }; var MEMFS = { ops_table: null, mount: (function (mount) { return MEMFS.createNode(null, "/", 16384 | 511, 0) }), createNode: (function (parent, name, mode, dev) { if (FS.isBlkdev(mode) || FS.isFIFO(mode)) { throw new FS.ErrnoError(ERRNO_CODES.EPERM) } if (!MEMFS.ops_table) { MEMFS.ops_table = { dir: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr, lookup: MEMFS.node_ops.lookup, mknod: MEMFS.node_ops.mknod, rename: MEMFS.node_ops.rename, unlink: MEMFS.node_ops.unlink, rmdir: MEMFS.node_ops.rmdir, readdir: MEMFS.node_ops.readdir, symlink: MEMFS.node_ops.symlink }, stream: { llseek: MEMFS.stream_ops.llseek } }, file: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr }, stream: { llseek: MEMFS.stream_ops.llseek, read: MEMFS.stream_ops.read, write: MEMFS.stream_ops.write, allocate: MEMFS.stream_ops.allocate, mmap: MEMFS.stream_ops.mmap } }, link: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr, readlink: MEMFS.node_ops.readlink }, stream: {} }, chrdev: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr }, stream: FS.chrdev_stream_ops } } } var node = FS.createNode(parent, name, mode, dev); if (FS.isDir(node.mode)) { node.node_ops = MEMFS.ops_table.dir.node; node.stream_ops = MEMFS.ops_table.dir.stream; node.contents = {} } else if (FS.isFile(node.mode)) { node.node_ops = MEMFS.ops_table.file.node; node.stream_ops = MEMFS.ops_table.file.stream; node.usedBytes = 0; node.contents = null } else if (FS.isLink(node.mode)) { node.node_ops = MEMFS.ops_table.link.node; node.stream_ops = MEMFS.ops_table.link.stream } else if (FS.isChrdev(node.mode)) { node.node_ops = MEMFS.ops_table.chrdev.node; node.stream_ops = MEMFS.ops_table.chrdev.stream } node.timestamp = Date.now(); if (parent) { parent.contents[name] = node } return node }), getFileDataAsRegularArray: (function (node) { if (node.contents && node.contents.subarray) { var arr = []; for (var i = 0; i < node.usedBytes; ++i)arr.push(node.contents[i]); return arr } return node.contents }), getFileDataAsTypedArray: (function (node) { if (node.contents && node.contents.subarray) return node.contents.subarray(0, node.usedBytes); return new Uint8Array(node.contents) }), expandFileStorage: (function (node, newCapacity) { if (node.contents && node.contents.subarray && newCapacity > node.contents.length) { node.contents = MEMFS.getFileDataAsRegularArray(node); node.usedBytes = node.contents.length } if (!node.contents || node.contents.subarray) { var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0; if (prevCapacity >= newCapacity) return; var CAPACITY_DOUBLING_MAX = 1024 * 1024; newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) | 0); if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); var oldContents = node.contents; node.contents = new Uint8Array(newCapacity); if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); return } if (!node.contents && newCapacity > 0) node.contents = []; while (node.contents.length < newCapacity) node.contents.push(0) }), resizeFileStorage: (function (node, newSize) { if (node.usedBytes == newSize) return; if (newSize == 0) { node.contents = null; node.usedBytes = 0; return } if (!node.contents || node.contents.subarray) { var oldContents = node.contents; node.contents = new Uint8Array(new ArrayBuffer(newSize)); if (oldContents) { node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))) } node.usedBytes = newSize; return } if (!node.contents) node.contents = []; if (node.contents.length > newSize) node.contents.length = newSize; else while (node.contents.length < newSize) node.contents.push(0); node.usedBytes = newSize }), node_ops: { getattr: (function (node) { var attr = {}; attr.dev = FS.isChrdev(node.mode) ? node.id : 1; attr.ino = node.id; attr.mode = node.mode; attr.nlink = 1; attr.uid = 0; attr.gid = 0; attr.rdev = node.rdev; if (FS.isDir(node.mode)) { attr.size = 4096 } else if (FS.isFile(node.mode)) { attr.size = node.usedBytes } else if (FS.isLink(node.mode)) { attr.size = node.link.length } else { attr.size = 0 } attr.atime = new Date(node.timestamp); attr.mtime = new Date(node.timestamp); attr.ctime = new Date(node.timestamp); attr.blksize = 4096; attr.blocks = Math.ceil(attr.size / attr.blksize); return attr }), setattr: (function (node, attr) { if (attr.mode !== undefined) { node.mode = attr.mode } if (attr.timestamp !== undefined) { node.timestamp = attr.timestamp } if (attr.size !== undefined) { MEMFS.resizeFileStorage(node, attr.size) } }), lookup: (function (parent, name) { throw FS.genericErrors[ERRNO_CODES.ENOENT] }), mknod: (function (parent, name, mode, dev) { return MEMFS.createNode(parent, name, mode, dev) }), rename: (function (old_node, new_dir, new_name) { if (FS.isDir(old_node.mode)) { var new_node; try { new_node = FS.lookupNode(new_dir, new_name) } catch (e) { } if (new_node) { for (var i in new_node.contents) { throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY) } } } delete old_node.parent.contents[old_node.name]; old_node.name = new_name; new_dir.contents[new_name] = old_node; old_node.parent = new_dir }), unlink: (function (parent, name) { delete parent.contents[name] }), rmdir: (function (parent, name) { var node = FS.lookupNode(parent, name); for (var i in node.contents) { throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY) } delete parent.contents[name] }), readdir: (function (node) { var entries = [".", ".."]; for (var key in node.contents) { if (!node.contents.hasOwnProperty(key)) { continue } entries.push(key) } return entries }), symlink: (function (parent, newname, oldpath) { var node = MEMFS.createNode(parent, newname, 511 | 40960, 0); node.link = oldpath; return node }), readlink: (function (node) { if (!FS.isLink(node.mode)) { throw new FS.ErrnoError(ERRNO_CODES.EINVAL) } return node.link }) }, stream_ops: { read: (function (stream, buffer, offset, length, position) { var contents = stream.node.contents; if (position >= stream.node.usedBytes) return 0; var size = Math.min(stream.node.usedBytes - position, length); assert(size >= 0); if (size > 8 && contents.subarray) { buffer.set(contents.subarray(position, position + size), offset) } else { for (var i = 0; i < size; i++)buffer[offset + i] = contents[position + i] } return size }), write: (function (stream, buffer, offset, length, position, canOwn) { if (!length) return 0; var node = stream.node; node.timestamp = Date.now(); if (buffer.subarray && (!node.contents || node.contents.subarray)) { if (canOwn) { node.contents = buffer.subarray(offset, offset + length); node.usedBytes = length; return length } else if (node.usedBytes === 0 && position === 0) { node.contents = new Uint8Array(buffer.subarray(offset, offset + length)); node.usedBytes = length; return length } else if (position + length <= node.usedBytes) { node.contents.set(buffer.subarray(offset, offset + length), position); return length } } MEMFS.expandFileStorage(node, position + length); if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); else for (var i = 0; i < length; i++){ node.contents[position + i] = buffer[offset + i] } node.usedBytes = Math.max(node.usedBytes, position + length); return length }), llseek: (function (stream, offset, whence) { var position = offset; if (whence === 1) { position += stream.position } else if (whence === 2) { if (FS.isFile(stream.node.mode)) { position += stream.node.usedBytes } } if (position < 0) { throw new FS.ErrnoError(ERRNO_CODES.EINVAL) } stream.ungotten = []; stream.position = position; return position }), allocate: (function (stream, offset, length) { MEMFS.expandFileStorage(stream.node, offset + length); stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length) }), mmap: (function (stream, buffer, offset, length, position, prot, flags) { if (!FS.isFile(stream.node.mode)) { throw new FS.ErrnoError(ERRNO_CODES.ENODEV) } var ptr; var allocated; var contents = stream.node.contents; if (!(flags & 2) && (contents.buffer === buffer || contents.buffer === buffer.buffer)) { allocated = false; ptr = contents.byteOffset } else { if (position > 0 || position + length < stream.node.usedBytes) { if (contents.subarray) { contents = contents.subarray(position, position + length) } else { contents = Array.prototype.slice.call(contents, position, position + length) } } allocated = true; ptr = _malloc(length); if (!ptr) { throw new FS.ErrnoError(ERRNO_CODES.ENOMEM) } buffer.set(contents, ptr) } return { ptr: ptr, allocated: allocated } }) } }; var IDBFS = { dbs: {}, indexedDB: (function () { if (typeof indexedDB !== "undefined") return indexedDB; var ret = null; if (typeof window === "object") ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB; assert(ret, "IDBFS used, but indexedDB not supported"); return ret }), DB_VERSION: 21, DB_STORE_NAME: "FILE_DATA", mount: (function (mount) { return MEMFS.mount.apply(null, arguments) }), syncfs: (function (mount, populate, callback) { IDBFS.getLocalSet(mount, (function (err, local) { if (err) return callback(err); IDBFS.getRemoteSet(mount, (function (err, remote) { if (err) return callback(err); var src = populate ? remote : local; var dst = populate ? local : remote; IDBFS.reconcile(src, dst, callback) })) })) }), getDB: (function (name, callback) { var db = IDBFS.dbs[name]; if (db) { return callback(null, db) } var req; try { req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION) } catch (e) { return callback(e) } req.onupgradeneeded = (function (e) { var db = e.target.result; var transaction = e.target.transaction; var fileStore; if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) { fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME) } else { fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME) } fileStore.createIndex("timestamp", "timestamp", { unique: false }) }); req.onsuccess = (function () { db = req.result; IDBFS.dbs[name] = db; callback(null, db) }); req.onerror = (function () { callback(this.error) }) }), getLocalSet: (function (mount, callback) { var entries = {}; function isRealDir(p) { return p !== "." && p !== ".." } function toAbsolute(root) { return (function (p) { return PATH.join2(root, p) }) } var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint)); while (check.length) { var path = check.pop(); var stat; try { stat = FS.stat(path) } catch (e) { return callback(e) } if (FS.isDir(stat.mode)) { check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path))) } entries[path] = { timestamp: stat.mtime } } return callback(null, { type: "local", entries: entries }) }), getRemoteSet: (function (mount, callback) { var entries = {}; IDBFS.getDB(mount.mountpoint, (function (err, db) { if (err) return callback(err); var transaction = db.transaction([IDBFS.DB_STORE_NAME], "readonly"); transaction.onerror = (function () { callback(this.error) }); var store = transaction.objectStore(IDBFS.DB_STORE_NAME); var index = store.index("timestamp"); index.openKeyCursor().onsuccess = (function (event) { var cursor = event.target.result; if (!cursor) { return callback(null, { type: "remote", db: db, entries: entries }) } entries[cursor.primaryKey] = { timestamp: cursor.key }; cursor.continue() }) })) }), loadLocalEntry: (function (path, callback) { var stat, node; try { var lookup = FS.lookupPath(path); node = lookup.node; stat = FS.stat(path) } catch (e) { return callback(e) } if (FS.isDir(stat.mode)) { return callback(null, { timestamp: stat.mtime, mode: stat.mode }) } else if (FS.isFile(stat.mode)) { node.contents = MEMFS.getFileDataAsTypedArray(node); return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents }) } else { return callback(new Error("node type not supported")) } }), storeLocalEntry: (function (path, entry, callback) { try { if (FS.isDir(entry.mode)) { FS.mkdir(path, entry.mode) } else if (FS.isFile(entry.mode)) { FS.writeFile(path, entry.contents, { encoding: "binary", canOwn: true }) } else { return callback(new Error("node type not supported")) } FS.chmod(path, entry.mode); FS.utime(path, entry.timestamp, entry.timestamp) } catch (e) { return callback(e) } callback(null) }), removeLocalEntry: (function (path, callback) { try { var lookup = FS.lookupPath(path); var stat = FS.stat(path); if (FS.isDir(stat.mode)) { FS.rmdir(path) } else if (FS.isFile(stat.mode)) { FS.unlink(path) } } catch (e) { return callback(e) } callback(null) }), loadRemoteEntry: (function (store, path, callback) { var req = store.get(path); req.onsuccess = (function (event) { callback(null, event.target.result) }); req.onerror = (function () { callback(this.error) }) }), storeRemoteEntry: (function (store, path, entry, callback) { var req = store.put(entry, path); req.onsuccess = (function () { callback(null) }); req.onerror = (function () { callback(this.error) }) }), removeRemoteEntry: (function (store, path, callback) { var req = store.delete(path); req.onsuccess = (function () { callback(null) }); req.onerror = (function () { callback(this.error) }) }), reconcile: (function (src, dst, callback) { var total = 0; var create = []; Object.keys(src.entries).forEach((function (key) { var e = src.entries[key]; var e2 = dst.entries[key]; if (!e2 || e.timestamp > e2.timestamp) { create.push(key); total++ } })); var remove = []; Object.keys(dst.entries).forEach((function (key) { var e = dst.entries[key]; var e2 = src.entries[key]; if (!e2) { remove.push(key); total++ } })); if (!total) { return callback(null) } var errored = false; var completed = 0; var db = src.type === "remote" ? src.db : dst.db; var transaction = db.transaction([IDBFS.DB_STORE_NAME], "readwrite"); var store = transaction.objectStore(IDBFS.DB_STORE_NAME); function done(err) { if (err) { if (!done.errored) { done.errored = true; return callback(err) } return } if (++completed >= total) { return callback(null) } } transaction.onerror = (function () { done(this.error) }); create.sort().forEach((function (path) { if (dst.type === "local") { IDBFS.loadRemoteEntry(store, path, (function (err, entry) { if (err) return done(err); IDBFS.storeLocalEntry(path, entry, done) })) } else { IDBFS.loadLocalEntry(path, (function (err, entry) { if (err) return done(err); IDBFS.storeRemoteEntry(store, path, entry, done) })) } })); remove.sort().reverse().forEach((function (path) { if (dst.type === "local") { IDBFS.removeLocalEntry(path, done) } else { IDBFS.removeRemoteEntry(store, path, done) } })) }) }; var NODEFS = { isWindows: false, staticInit: (function () { NODEFS.isWindows = !!process.platform.match(/^win/) }), mount: (function (mount) { assert(ENVIRONMENT_IS_NODE); return NODEFS.createNode(null, "/", NODEFS.getMode(mount.opts.root), 0) }), createNode: (function (parent, name, mode, dev) { if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) { throw new FS.ErrnoError(ERRNO_CODES.EINVAL) } var node = FS.createNode(parent, name, mode); node.node_ops = NODEFS.node_ops; node.stream_ops = NODEFS.stream_ops; return node }), getMode: (function (path) { var stat; try { stat = fs.lstatSync(path); if (NODEFS.isWindows) { stat.mode = stat.mode | (stat.mode & 146) >> 1 } } catch (e) { if (!e.code) throw e; throw new FS.ErrnoError(ERRNO_CODES[e.code]) } return stat.mode }), realPath: (function (node) { var parts = []; while (node.parent !== node) { parts.push(node.name); node = node.parent } parts.push(node.mount.opts.root); parts.reverse(); return PATH.join.apply(null, parts) }), flagsToPermissionStringMap: { 0: "r", 1: "r+", 2: "r+", 64: "r", 65: "r+", 66: "r+", 129: "rx+", 193: "rx+", 514: "w+", 577: "w", 578: "w+", 705: "wx", 706: "wx+", 1024: "a", 1025: "a", 1026: "a+", 1089: "a", 1090: "a+", 1153: "ax", 1154: "ax+", 1217: "ax", 1218: "ax+", 4096: "rs", 4098: "rs+" }, flagsToPermissionString: (function (flags) { if (flags in NODEFS.flagsToPermissionStringMap) { return NODEFS.flagsToPermissionStringMap[flags] } else { return flags } }), node_ops: { getattr: (function (node) { var path = NODEFS.realPath(node); var stat; try { stat = fs.lstatSync(path) } catch (e) { if (!e.code) throw e; throw new FS.ErrnoError(ERRNO_CODES[e.code]) } if (NODEFS.isWindows && !stat.blksize) { stat.blksize = 4096 } if (NODEFS.isWindows && !stat.blocks) { stat.blocks = (stat.size + stat.blksize - 1) / stat.blksize | 0 } return { dev: stat.dev, ino: stat.ino, mode: stat.mode, nlink: stat.nlink, uid: stat.uid, gid: stat.gid, rdev: stat.rdev, size: stat.size, atime: stat.atime, mtime: stat.mtime, ctime: stat.ctime, blksize: stat.blksize, blocks: stat.blocks } }), setattr: (function (node, attr) { var path = NODEFS.realPath(node); try { if (attr.mode !== undefined) { fs.chmodSync(path, attr.mode); node.mode = attr.mode } if (attr.timestamp !== undefined) { var date = new Date(attr.timestamp); fs.utimesSync(path, date, date) } if (attr.size !== undefined) { fs.truncateSync(path, attr.size) } } catch (e) { if (!e.code) throw e; throw new FS.ErrnoError(ERRNO_CODES[e.code]) } }), lookup: (function (parent, name) { var path = PATH.join2(NODEFS.realPath(parent), name); var mode = NODEFS.getMode(path); return NODEFS.createNode(parent, name, mode) }), mknod: (function (parent, name, mode, dev) { var node = NODEFS.createNode(parent, name, mode, dev); var path = NODEFS.realPath(node); try { if (FS.isDir(node.mode)) { fs.mkdirSync(path, node.mode) } else { fs.writeFileSync(path, "", { mode: node.mode }) } } catch (e) { if (!e.code) throw e; throw new FS.ErrnoError(ERRNO_CODES[e.code]) } return node }), rename: (function (oldNode, newDir, newName) { var oldPath = NODEFS.realPath(oldNode); var newPath = PATH.join2(NODEFS.realPath(newDir), newName); try { fs.renameSync(oldPath, newPath) } catch (e) { if (!e.code) throw e; throw new FS.ErrnoError(ERRNO_CODES[e.code]) } }), unlink: (function (parent, name) { var path = PATH.join2(NODEFS.realPath(parent), name); try { fs.unlinkSync(path) } catch (e) { if (!e.code) throw e; throw new FS.ErrnoError(ERRNO_CODES[e.code]) } }), rmdir: (function (parent, name) { var path = PATH.join2(NODEFS.realPath(parent), name); try { fs.rmdirSync(path) } catch (e) { if (!e.code) throw e; throw new FS.ErrnoError(ERRNO_CODES[e.code]) } }), readdir: (function (node) { var path = NODEFS.realPath(node); try { return fs.readdirSync(path) } catch (e) { if (!e.code) throw e; throw new FS.ErrnoError(ERRNO_CODES[e.code]) } }), symlink: (function (parent, newName, oldPath) { var newPath = PATH.join2(NODEFS.realPath(parent), newName); try { fs.symlinkSync(oldPath, newPath) } catch (e) { if (!e.code) throw e; throw new FS.ErrnoError(ERRNO_CODES[e.code]) } }), readlink: (function (node) { var path = NODEFS.realPath(node); try { return fs.readlinkSync(path) } catch (e) { if (!e.code) throw e; throw new FS.ErrnoError(ERRNO_CODES[e.code]) } }) }, stream_ops: { open: (function (stream) { var path = NODEFS.realPath(stream.node); try { if (FS.isFile(stream.node.mode)) { stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags)) } } catch (e) { if (!e.code) throw e; throw new FS.ErrnoError(ERRNO_CODES[e.code]) } }), close: (function (stream) { try { if (FS.isFile(stream.node.mode) && stream.nfd) { fs.closeSync(stream.nfd) } } catch (e) { if (!e.code) throw e; throw new FS.ErrnoError(ERRNO_CODES[e.code]) } }), read: (function (stream, buffer, offset, length, position) { var nbuffer = new Buffer(length); var res; try { res = fs.readSync(stream.nfd, nbuffer, 0, length, position) } catch (e) { throw new FS.ErrnoError(ERRNO_CODES[e.code]) } if (res > 0) { for (var i = 0; i < res; i++){ buffer[offset + i] = nbuffer[i] } } return res }), write: (function (stream, buffer, offset, length, position) { var nbuffer = new Buffer(buffer.subarray(offset, offset + length)); var res; try { res = fs.writeSync(stream.nfd, nbuffer, 0, length, position) } catch (e) { throw new FS.ErrnoError(ERRNO_CODES[e.code]) } return res }), llseek: (function (stream, offset, whence) { var position = offset; if (whence === 1) { position += stream.position } else if (whence === 2) { if (FS.isFile(stream.node.mode)) { try { var stat = fs.fstatSync(stream.nfd); position += stat.size } catch (e) { throw new FS.ErrnoError(ERRNO_CODES[e.code]) } } } if (position < 0) { throw new FS.ErrnoError(ERRNO_CODES.EINVAL) } stream.position = position; return position }) } }; var _stdin = allocate(1, "i32*", ALLOC_STATIC); var _stdout = allocate(1, "i32*", ALLOC_STATIC); var _stderr = allocate(1, "i32*", ALLOC_STATIC); function _fflush(stream) { } var FS = { root: null, mounts: [], devices: [null], streams: [], nextInode: 1, nameTable: null, currentPath: "/", initialized: false, ignorePermissions: true, trackingDelegate: {}, tracking: { openFlags: { READ: 1, WRITE: 2 } }, ErrnoError: null, genericErrors: {}, handleFSError: (function (e) { if (!(e instanceof FS.ErrnoError)) throw e + " : " + stackTrace(); return ___setErrNo(e.errno) }), lookupPath: (function (path, opts) { path = PATH.resolve(FS.cwd(), path); opts = opts || {}; if (!path) return { path: "", node: null }; var defaults = { follow_mount: true, recurse_count: 0 }; for (var key in defaults) { if (opts[key] === undefined) { opts[key] = defaults[key] } } if (opts.recurse_count > 8) { throw new FS.ErrnoError(ERRNO_CODES.ELOOP) } var parts = PATH.normalizeArray(path.split("/").filter((function (p) { return !!p })), false); var current = FS.root; var current_path = "/"; for (var i = 0; i < parts.length; i++){ var islast = i === parts.length - 1; if (islast && opts.parent) { break } current = FS.lookupNode(current, parts[i]); current_path = PATH.join2(current_path, parts[i]); if (FS.isMountpoint(current)) { if (!islast || islast && opts.follow_mount) { current = current.mounted.root } } if (!islast || opts.follow) { var count = 0; while (FS.isLink(current.mode)) { var link = FS.readlink(current_path); current_path = PATH.resolve(PATH.dirname(current_path), link); var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count }); current = lookup.node; if (count++ > 40) { throw new FS.ErrnoError(ERRNO_CODES.ELOOP) } } } } return { path: current_path, node: current } }), getPath: (function (node) { var path; while (true) { if (FS.isRoot(node)) { var mount = node.mount.mountpoint; if (!path) return mount; return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path } path = path ? node.name + "/" + path : node.name; node = node.parent } }), hashName: (function (parentid, name) { var hash = 0; for (var i = 0; i < name.length; i++){ hash = (hash << 5) - hash + name.charCodeAt(i) | 0 } return (parentid + hash >>> 0) % FS.nameTable.length }), hashAddNode: (function (node) { var hash = FS.hashName(node.parent.id, node.name); node.name_next = FS.nameTable[hash]; FS.nameTable[hash] = node }), hashRemoveNode: (function (node) { var hash = FS.hashName(node.parent.id, node.name); if (FS.nameTable[hash] === node) { FS.nameTable[hash] = node.name_next } else { var current = FS.nameTable[hash]; while (current) { if (current.name_next === node) { current.name_next = node.name_next; break } current = current.name_next } } }), lookupNode: (function (parent, name) { var err = FS.mayLookup(parent); if (err) { throw new FS.ErrnoError(err, parent) } var hash = FS.hashName(parent.id, name); for (var node = FS.nameTable[hash]; node; node = node.name_next){ var nodeName = node.name; if (node.parent.id === parent.id && nodeName === name) { return node } } return FS.lookup(parent, name) }), createNode: (function (parent, name, mode, rdev) { if (!FS.FSNode) { FS.FSNode = (function (parent, name, mode, rdev) { if (!parent) { parent = this } this.parent = parent; this.mount = parent.mount; this.mounted = null; this.id = FS.nextInode++; this.name = name; this.mode = mode; this.node_ops = {}; this.stream_ops = {}; this.rdev = rdev }); FS.FSNode.prototype = {}; var readMode = 292 | 73; var writeMode = 146; Object.defineProperties(FS.FSNode.prototype, { read: { get: (function () { return (this.mode & readMode) === readMode }), set: (function (val) { val ? this.mode |= readMode : this.mode &= ~readMode }) }, write: { get: (function () { return (this.mode & writeMode) === writeMode }), set: (function (val) { val ? this.mode |= writeMode : this.mode &= ~writeMode }) }, isFolder: { get: (function () { return FS.isDir(this.mode) }) }, isDevice: { get: (function () { return FS.isChrdev(this.mode) }) } }) } var node = new FS.FSNode(parent, name, mode, rdev); FS.hashAddNode(node); return node }), destroyNode: (function (node) { FS.hashRemoveNode(node) }), isRoot: (function (node) { return node === node.parent }), isMountpoint: (function (node) { return !!node.mounted }), isFile: (function (mode) { return (mode & 61440) === 32768 }), isDir: (function (mode) { return (mode & 61440) === 16384 }), isLink: (function (mode) { return (mode & 61440) === 40960 }), isChrdev: (function (mode) { return (mode & 61440) === 8192 }), isBlkdev: (function (mode) { return (mode & 61440) === 24576 }), isFIFO: (function (mode) { return (mode & 61440) === 4096 }), isSocket: (function (mode) { return (mode & 49152) === 49152 }), flagModes: { "r": 0, "rs": 1052672, "r+": 2, "w": 577, "wx": 705, "xw": 705, "w+": 578, "wx+": 706, "xw+": 706, "a": 1089, "ax": 1217, "xa": 1217, "a+": 1090, "ax+": 1218, "xa+": 1218 }, modeStringToFlags: (function (str) { var flags = FS.flagModes[str]; if (typeof flags === "undefined") { throw new Error("Unknown file open mode: " + str) } return flags }), flagsToPermissionString: (function (flag) { var accmode = flag & 2097155; var perms = ["r", "w", "rw"][accmode]; if (flag & 512) { perms += "w" } return perms }), nodePermissions: (function (node, perms) { if (FS.ignorePermissions) { return 0 } if (perms.indexOf("r") !== -1 && !(node.mode & 292)) { return ERRNO_CODES.EACCES } else if (perms.indexOf("w") !== -1 && !(node.mode & 146)) { return ERRNO_CODES.EACCES } else if (perms.indexOf("x") !== -1 && !(node.mode & 73)) { return ERRNO_CODES.EACCES } return 0 }), mayLookup: (function (dir) { var err = FS.nodePermissions(dir, "x"); if (err) return err; if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES; return 0 }), mayCreate: (function (dir, name) { try { var node = FS.lookupNode(dir, name); return ERRNO_CODES.EEXIST } catch (e) { } return FS.nodePermissions(dir, "wx") }), mayDelete: (function (dir, name, isdir) { var node; try { node = FS.lookupNode(dir, name) } catch (e) { return e.errno } var err = FS.nodePermissions(dir, "wx"); if (err) { return err } if (isdir) { if (!FS.isDir(node.mode)) { return ERRNO_CODES.ENOTDIR } if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) { return ERRNO_CODES.EBUSY } } else { if (FS.isDir(node.mode)) { return ERRNO_CODES.EISDIR } } return 0 }), mayOpen: (function (node, flags) { if (!node) { return ERRNO_CODES.ENOENT } if (FS.isLink(node.mode)) { return ERRNO_CODES.ELOOP } else if (FS.isDir(node.mode)) { if ((flags & 2097155) !== 0 || flags & 512) { return ERRNO_CODES.EISDIR } } return FS.nodePermissions(node, FS.flagsToPermissionString(flags)) }), MAX_OPEN_FDS: 4096, nextfd: (function (fd_start, fd_end) { fd_start = fd_start || 0; fd_end = fd_end || FS.MAX_OPEN_FDS; for (var fd = fd_start; fd <= fd_end; fd++){ if (!FS.streams[fd]) { return fd } } throw new FS.ErrnoError(ERRNO_CODES.EMFILE) }), getStream: (function (fd) { return FS.streams[fd] }), createStream: (function (stream, fd_start, fd_end) { if (!FS.FSStream) { FS.FSStream = (function () { }); FS.FSStream.prototype = {}; Object.defineProperties(FS.FSStream.prototype, { object: { get: (function () { return this.node }), set: (function (val) { this.node = val }) }, isRead: { get: (function () { return (this.flags & 2097155) !== 1 }) }, isWrite: { get: (function () { return (this.flags & 2097155) !== 0 }) }, isAppend: { get: (function () { return this.flags & 1024 }) } }) } var newStream = new FS.FSStream; for (var p in stream) { newStream[p] = stream[p] } stream = newStream; var fd = FS.nextfd(fd_start, fd_end); stream.fd = fd; FS.streams[fd] = stream; return stream }), closeStream: (function (fd) { FS.streams[fd] = null }), getStreamFromPtr: (function (ptr) { return FS.streams[ptr - 1] }), getPtrForStream: (function (stream) { return stream ? stream.fd + 1 : 0 }), chrdev_stream_ops: { open: (function (stream) { var device = FS.getDevice(stream.node.rdev); stream.stream_ops = device.stream_ops; if (stream.stream_ops.open) { stream.stream_ops.open(stream) } }), llseek: (function () { throw new FS.ErrnoError(ERRNO_CODES.ESPIPE) }) }, major: (function (dev) { return dev >> 8 }), minor: (function (dev) { return dev & 255 }), makedev: (function (ma, mi) { return ma << 8 | mi }), registerDevice: (function (dev, ops) { FS.devices[dev] = { stream_ops: ops } }), getDevice: (function (dev) { return FS.devices[dev] }), getMounts: (function (mount) { var mounts = []; var check = [mount]; while (check.length) { var m = check.pop(); mounts.push(m); check.push.apply(check, m.mounts) } return mounts }), syncfs: (function (populate, callback) { if (typeof populate === "function") { callback = populate; populate = false } var mounts = FS.getMounts(FS.root.mount); var completed = 0; function done(err) { if (err) { if (!done.errored) { done.errored = true; return callback(err) } return } if (++completed >= mounts.length) { callback(null) } } mounts.forEach((function (mount) { if (!mount.type.syncfs) { return done(null) } mount.type.syncfs(mount, populate, done) })) }), mount: (function (type, opts, mountpoint) { var root = mountpoint === "/"; var pseudo = !mountpoint; var node; if (root && FS.root) { throw new FS.ErrnoError(ERRNO_CODES.EBUSY) } else if (!root && !pseudo) { var lookup = FS.lookupPath(mountpoint, { follow_mount: false }); mountpoint = lookup.path; node = lookup.node; if (FS.isMountpoint(node)) { throw new FS.ErrnoError(ERRNO_CODES.EBUSY) } if (!FS.isDir(node.mode)) { throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR) } } var mount = { type: type, opts: opts, mountpoint: mountpoint, mounts: [] }; var mountRoot = type.mount(mount); mountRoot.mount = mount; mount.root = mountRoot; if (root) { FS.root = mountRoot } else if (node) { node.mounted = mount; if (node.mount) { node.mount.mounts.push(mount) } } return mountRoot }), unmount: (function (mountpoint) { var lookup = FS.lookupPath(mountpoint, { follow_mount: false }); if (!FS.isMountpoint(lookup.node)) { throw new FS.ErrnoError(ERRNO_CODES.EINVAL) } var node = lookup.node; var mount = node.mounted; var mounts = FS.getMounts(mount); Object.keys(FS.nameTable).forEach((function (hash) { var current = FS.nameTable[hash]; while (current) { var next = current.name_next; if (mounts.indexOf(current.mount) !== -1) { FS.destroyNode(current) } current = next } })); node.mounted = null; var idx = node.mount.mounts.indexOf(mount); assert(idx !== -1); node.mount.mounts.splice(idx, 1) }), lookup: (function (parent, name) { return parent.node_ops.lookup(parent, name) }), mknod: (function (path, mode, dev) { var lookup = FS.lookupPath(path, { parent: true }); var parent = lookup.node; var name = PATH.basename(path); if (!name || name === "." || name === "..") { throw new FS.ErrnoError(ERRNO_CODES.EINVAL) } var err = FS.mayCreate(parent, name); if (err) { throw new FS.ErrnoError(err) } if (!parent.node_ops.mknod) { throw new FS.ErrnoError(ERRNO_CODES.EPERM) } return parent.node_ops.mknod(parent, name, mode, dev) }), create: (function (path, mode) { mode = mode !== undefined ? mode : 438; mode &= 4095; mode |= 32768; return FS.mknod(path, mode, 0) }), mkdir: (function (path, mode) { mode = mode !== undefined ? mode : 511; mode &= 511 | 512; mode |= 16384; return FS.mknod(path, mode, 0) }), mkdev: (function (path, mode, dev) { if (typeof dev === "undefined") { dev = mode; mode = 438 } mode |= 8192; return FS.mknod(path, mode, dev) }), symlink: (function (oldpath, newpath) { if (!PATH.resolve(oldpath)) { throw new FS.ErrnoError(ERRNO_CODES.ENOENT) } var lookup = FS.lookupPath(newpath, { parent: true }); var parent = lookup.node; if (!parent) { throw new FS.ErrnoError(ERRNO_CODES.ENOENT) } var newname = PATH.basename(newpath); var err = FS.mayCreate(parent, newname); if (err) { throw new FS.ErrnoError(err) } if (!parent.node_ops.symlink) { throw new FS.ErrnoError(ERRNO_CODES.EPERM) } return parent.node_ops.symlink(parent, newname, oldpath) }), rename: (function (old_path, new_path) { var old_dirname = PATH.dirname(old_path); var new_dirname = PATH.dirname(new_path); var old_name = PATH.basename(old_path); var new_name = PATH.basename(new_path); var lookup, old_dir, new_dir; try { lookup = FS.lookupPath(old_path, { parent: true }); old_dir = lookup.node; lookup = FS.lookupPath(new_path, { parent: true }); new_dir = lookup.node } catch (e) { throw new FS.ErrnoError(ERRNO_CODES.EBUSY) } if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT); if (old_dir.mount !== new_dir.mount) { throw new FS.ErrnoError(ERRNO_CODES.EXDEV) } var old_node = FS.lookupNode(old_dir, old_name); var relative = PATH.relative(old_path, new_dirname); if (relative.charAt(0) !== ".") { throw new FS.ErrnoError(ERRNO_CODES.EINVAL) } relative = PATH.relative(new_path, old_dirname); if (relative.charAt(0) !== ".") { throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY) } var new_node; try { new_node = FS.lookupNode(new_dir, new_name) } catch (e) { } if (old_node === new_node) { return } var isdir = FS.isDir(old_node.mode); var err = FS.mayDelete(old_dir, old_name, isdir); if (err) { throw new FS.ErrnoError(err) } err = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name); if (err) { throw new FS.ErrnoError(err) } if (!old_dir.node_ops.rename) { throw new FS.ErrnoError(ERRNO_CODES.EPERM) } if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) { throw new FS.ErrnoError(ERRNO_CODES.EBUSY) } if (new_dir !== old_dir) { err = FS.nodePermissions(old_dir, "w"); if (err) { throw new FS.ErrnoError(err) } } try { if (FS.trackingDelegate["willMovePath"]) { FS.trackingDelegate["willMovePath"](old_path, new_path) } } catch (e) { console.log("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message) } FS.hashRemoveNode(old_node); try { old_dir.node_ops.rename(old_node, new_dir, new_name) } catch (e) { throw e } finally { FS.hashAddNode(old_node) } try { if (FS.trackingDelegate["onMovePath"]) FS.trackingDelegate["onMovePath"](old_path, new_path) } catch (e) { console.log("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message) } }), rmdir: (function (path) { var lookup = FS.lookupPath(path, { parent: true }); var parent = lookup.node; var name = PATH.basename(path); var node = FS.lookupNode(parent, name); var err = FS.mayDelete(parent, name, true); if (err) { throw new FS.ErrnoError(err) } if (!parent.node_ops.rmdir) { throw new FS.ErrnoError(ERRNO_CODES.EPERM) } if (FS.isMountpoint(node)) { throw new FS.ErrnoError(ERRNO_CODES.EBUSY) } try { if (FS.trackingDelegate["willDeletePath"]) { FS.trackingDelegate["willDeletePath"](path) } } catch (e) { console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message) } parent.node_ops.rmdir(parent, name); FS.destroyNode(node); try { if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path) } catch (e) { console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message) } }), readdir: (function (path) { var lookup = FS.lookupPath(path, { follow: true }); var node = lookup.node; if (!node.node_ops.readdir) { throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR) } return node.node_ops.readdir(node) }), unlink: (function (path) { var lookup = FS.lookupPath(path, { parent: true }); var parent = lookup.node; var name = PATH.basename(path); var node = FS.lookupNode(parent, name); var err = FS.mayDelete(parent, name, false); if (err) { if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM; throw new FS.ErrnoError(err) } if (!parent.node_ops.unlink) { throw new FS.ErrnoError(ERRNO_CODES.EPERM) } if (FS.isMountpoint(node)) { throw new FS.ErrnoError(ERRNO_CODES.EBUSY) } try { if (FS.trackingDelegate["willDeletePath"]) { FS.trackingDelegate["willDeletePath"](path) } } catch (e) { console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message) } parent.node_ops.unlink(parent, name); FS.destroyNode(node); try { if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path) } catch (e) { console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message) } }), readlink: (function (path) { var lookup = FS.lookupPath(path); var link = lookup.node; if (!link) { throw new FS.ErrnoError(ERRNO_CODES.ENOENT) } if (!link.node_ops.readlink) { throw new FS.ErrnoError(ERRNO_CODES.EINVAL) } return link.node_ops.readlink(link) }), stat: (function (path, dontFollow) { var lookup = FS.lookupPath(path, { follow: !dontFollow }); var node = lookup.node; if (!node) { throw new FS.ErrnoError(ERRNO_CODES.ENOENT) } if (!node.node_ops.getattr) { throw new FS.ErrnoError(ERRNO_CODES.EPERM) } return node.node_ops.getattr(node) }), lstat: (function (path) { return FS.stat(path, true) }), chmod: (function (path, mode, dontFollow) { var node; if (typeof path === "string") { var lookup = FS.lookupPath(path, { follow: !dontFollow }); node = lookup.node } else { node = path } if (!node.node_ops.setattr) { throw new FS.ErrnoError(ERRNO_CODES.EPERM) } node.node_ops.setattr(node, { mode: mode & 4095 | node.mode & ~4095, timestamp: Date.now() }) }), lchmod: (function (path, mode) { FS.chmod(path, mode, true) }), fchmod: (function (fd, mode) { var stream = FS.getStream(fd); if (!stream) { throw new FS.ErrnoError(ERRNO_CODES.EBADF) } FS.chmod(stream.node, mode) }), chown: (function (path, uid, gid, dontFollow) { var node; if (typeof path === "string") { var lookup = FS.lookupPath(path, { follow: !dontFollow }); node = lookup.node } else { node = path } if (!node.node_ops.setattr) { throw new FS.ErrnoError(ERRNO_CODES.EPERM) } node.node_ops.setattr(node, { timestamp: Date.now() }) }), lchown: (function (path, uid, gid) { FS.chown(path, uid, gid, true) }), fchown: (function (fd, uid, gid) { var stream = FS.getStream(fd); if (!stream) { throw new FS.ErrnoError(ERRNO_CODES.EBADF) } FS.chown(stream.node, uid, gid) }), truncate: (function (path, len) { if (len < 0) { throw new FS.ErrnoError(ERRNO_CODES.EINVAL) } var node; if (typeof path === "string") { var lookup = FS.lookupPath(path, { follow: true }); node = lookup.node } else { node = path } if (!node.node_ops.setattr) { throw new FS.ErrnoError(ERRNO_CODES.EPERM) } if (FS.isDir(node.mode)) { throw new FS.ErrnoError(ERRNO_CODES.EISDIR) } if (!FS.isFile(node.mode)) { throw new FS.ErrnoError(ERRNO_CODES.EINVAL) } var err = FS.nodePermissions(node, "w"); if (err) { throw new FS.ErrnoError(err) } node.node_ops.setattr(node, { size: len, timestamp: Date.now() }) }), ftruncate: (function (fd, len) { var stream = FS.getStream(fd); if (!stream) { throw new FS.ErrnoError(ERRNO_CODES.EBADF) } if ((stream.flags & 2097155) === 0) { throw new FS.ErrnoError(ERRNO_CODES.EINVAL) } FS.truncate(stream.node, len) }), utime: (function (path, atime, mtime) { var lookup = FS.lookupPath(path, { follow: true }); var node = lookup.node; node.node_ops.setattr(node, { timestamp: Math.max(atime, mtime) }) }), open: (function (path, flags, mode, fd_start, fd_end) { if (path === "") { throw new FS.ErrnoError(ERRNO_CODES.ENOENT) } flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags; mode = typeof mode === "undefined" ? 438 : mode; if (flags & 64) { mode = mode & 4095 | 32768 } else { mode = 0 } var node; if (typeof path === "object") { node = path } else { path = PATH.normalize(path); try { var lookup = FS.lookupPath(path, { follow: !(flags & 131072) }); node = lookup.node } catch (e) { } } var created = false; if (flags & 64) { if (node) { if (flags & 128) { throw new FS.ErrnoError(ERRNO_CODES.EEXIST) } } else { node = FS.mknod(path, mode, 0); created = true } } if (!node) { throw new FS.ErrnoError(ERRNO_CODES.ENOENT) } if (FS.isChrdev(node.mode)) { flags &= ~512 } if (!created) { var err = FS.mayOpen(node, flags); if (err) { throw new FS.ErrnoError(err) } } if (flags & 512) { FS.truncate(node, 0) } flags &= ~(128 | 512); var stream = FS.createStream({ node: node, path: FS.getPath(node), flags: flags, seekable: true, position: 0, stream_ops: node.stream_ops, ungotten: [], error: false }, fd_start, fd_end); if (stream.stream_ops.open) { stream.stream_ops.open(stream) } if (Module["logReadFiles"] && !(flags & 1)) { if (!FS.readFiles) FS.readFiles = {}; if (!(path in FS.readFiles)) { FS.readFiles[path] = 1; Module["printErr"]("read file: " + path) } } try { if (FS.trackingDelegate["onOpenFile"]) { var trackingFlags = 0; if ((flags & 2097155) !== 1) { trackingFlags |= FS.tracking.openFlags.READ } if ((flags & 2097155) !== 0) { trackingFlags |= FS.tracking.openFlags.WRITE } FS.trackingDelegate["onOpenFile"](path, trackingFlags) } } catch (e) { console.log("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message) } return stream }), close: (function (stream) { try { if (stream.stream_ops.close) { stream.stream_ops.close(stream) } } catch (e) { throw e } finally { FS.closeStream(stream.fd) } }), llseek: (function (stream, offset, whence) { if (!stream.seekable || !stream.stream_ops.llseek) { throw new FS.ErrnoError(ERRNO_CODES.ESPIPE) } return stream.stream_ops.llseek(stream, offset, whence) }), read: (function (stream, buffer, offset, length, position) { if (length < 0 || position < 0) { throw new FS.ErrnoError(ERRNO_CODES.EINVAL) } if ((stream.flags & 2097155) === 1) { throw new FS.ErrnoError(ERRNO_CODES.EBADF) } if (FS.isDir(stream.node.mode)) { throw new FS.ErrnoError(ERRNO_CODES.EISDIR) } if (!stream.stream_ops.read) { throw new FS.ErrnoError(ERRNO_CODES.EINVAL) } var seeking = true; if (typeof position === "undefined") { position = stream.position; seeking = false } else if (!stream.seekable) { throw new FS.ErrnoError(ERRNO_CODES.ESPIPE) } var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position); if (!seeking) stream.position += bytesRead; return bytesRead }), write: (function (stream, buffer, offset, length, position, canOwn) { if (length < 0 || position < 0) { throw new FS.ErrnoError(ERRNO_CODES.EINVAL) } if ((stream.flags & 2097155) === 0) { throw new FS.ErrnoError(ERRNO_CODES.EBADF) } if (FS.isDir(stream.node.mode)) { throw new FS.ErrnoError(ERRNO_CODES.EISDIR) } if (!stream.stream_ops.write) { throw new FS.ErrnoError(ERRNO_CODES.EINVAL) } if (stream.flags & 1024) { FS.llseek(stream, 0, 2) } var seeking = true; if (typeof position === "undefined") { position = stream.position; seeking = false } else if (!stream.seekable) { throw new FS.ErrnoError(ERRNO_CODES.ESPIPE) } var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn); if (!seeking) stream.position += bytesWritten; try { if (stream.path && FS.trackingDelegate["onWriteToFile"]) FS.trackingDelegate["onWriteToFile"](stream.path) } catch (e) { console.log("FS.trackingDelegate['onWriteToFile']('" + path + "') threw an exception: " + e.message) } return bytesWritten }), allocate: (function (stream, offset, length) { if (offset < 0 || length <= 0) { throw new FS.ErrnoError(ERRNO_CODES.EINVAL) } if ((stream.flags & 2097155) === 0) { throw new FS.ErrnoError(ERRNO_CODES.EBADF) } if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) { throw new FS.ErrnoError(ERRNO_CODES.ENODEV) } if (!stream.stream_ops.allocate) { throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP) } stream.stream_ops.allocate(stream, offset, length) }), mmap: (function (stream, buffer, offset, length, position, prot, flags) { if ((stream.flags & 2097155) === 1) { throw new FS.ErrnoError(ERRNO_CODES.EACCES) } if (!stream.stream_ops.mmap) { throw new FS.ErrnoError(ERRNO_CODES.ENODEV) } return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags) }), ioctl: (function (stream, cmd, arg) { if (!stream.stream_ops.ioctl) { throw new FS.ErrnoError(ERRNO_CODES.ENOTTY) } return stream.stream_ops.ioctl(stream, cmd, arg) }), readFile: (function (path, opts) { opts = opts || {}; opts.flags = opts.flags || "r"; opts.encoding = opts.encoding || "binary"; if (opts.encoding !== "utf8" && opts.encoding !== "binary") { throw new Error('Invalid encoding type "' + opts.encoding + '"') } var ret; var stream = FS.open(path, opts.flags); var stat = FS.stat(path); var length = stat.size; var buf = new Uint8Array(length); FS.read(stream, buf, 0, length, 0); if (opts.encoding === "utf8") { ret = ""; var utf8 = new Runtime.UTF8Processor; for (var i = 0; i < length; i++){ ret += utf8.processCChar(buf[i]) } } else if (opts.encoding === "binary") { ret = buf } FS.close(stream); return ret }), writeFile: (function (path, data, opts) { opts = opts || {}; opts.flags = opts.flags || "w"; opts.encoding = opts.encoding || "utf8"; if (opts.encoding !== "utf8" && opts.encoding !== "binary") { throw new Error('Invalid encoding type "' + opts.encoding + '"') } var stream = FS.open(path, opts.flags, opts.mode); if (opts.encoding === "utf8") { var utf8 = new Runtime.UTF8Processor; var buf = new Uint8Array(utf8.processJSString(data)); FS.write(stream, buf, 0, buf.length, 0, opts.canOwn) } else if (opts.encoding === "binary") { FS.write(stream, data, 0, data.length, 0, opts.canOwn) } FS.close(stream) }), cwd: (function () { return FS.currentPath }), chdir: (function (path) { var lookup = FS.lookupPath(path, { follow: true }); if (!FS.isDir(lookup.node.mode)) { throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR) } var err = FS.nodePermissions(lookup.node, "x"); if (err) { throw new FS.ErrnoError(err) } FS.currentPath = lookup.path }), createDefaultDirectories: (function () { FS.mkdir("/tmp"); FS.mkdir("/home"); FS.mkdir("/home/web_user") }), createDefaultDevices: (function () { FS.mkdir("/dev"); FS.registerDevice(FS.makedev(1, 3), { read: (function () { return 0 }), write: (function () { return 0 }) }); FS.mkdev("/dev/null", FS.makedev(1, 3)); TTY.register(FS.makedev(5, 0), TTY.default_tty_ops); TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops); FS.mkdev("/dev/tty", FS.makedev(5, 0)); FS.mkdev("/dev/tty1", FS.makedev(6, 0)); var random_device; if (typeof crypto !== "undefined") { var randomBuffer = new Uint8Array(1); random_device = (function () { crypto.getRandomValues(randomBuffer); return randomBuffer[0] }) } else if (ENVIRONMENT_IS_NODE) { random_device = (function () { return require("crypto").randomBytes(1)[0] }) } else { random_device = (function () { return Math.random() * 256 | 0 }) } FS.createDevice("/dev", "random", random_device); FS.createDevice("/dev", "urandom", random_device); FS.mkdir("/dev/shm"); FS.mkdir("/dev/shm/tmp") }), createStandardStreams: (function () { if (Module["stdin"]) { FS.createDevice("/dev", "stdin", Module["stdin"]) } else { FS.symlink("/dev/tty", "/dev/stdin") } if (Module["stdout"]) { FS.createDevice("/dev", "stdout", null, Module["stdout"]) } else { FS.symlink("/dev/tty", "/dev/stdout") } if (Module["stderr"]) { FS.createDevice("/dev", "stderr", null, Module["stderr"]) } else { FS.symlink("/dev/tty1", "/dev/stderr") } var stdin = FS.open("/dev/stdin", "r"); HEAP32[_stdin >> 2] = FS.getPtrForStream(stdin); assert(stdin.fd === 0, "invalid handle for stdin (" + stdin.fd + ")"); var stdout = FS.open("/dev/stdout", "w"); HEAP32[_stdout >> 2] = FS.getPtrForStream(stdout); assert(stdout.fd === 1, "invalid handle for stdout (" + stdout.fd + ")"); var stderr = FS.open("/dev/stderr", "w"); HEAP32[_stderr >> 2] = FS.getPtrForStream(stderr); assert(stderr.fd === 2, "invalid handle for stderr (" + stderr.fd + ")") }), ensureErrnoError: (function () { if (FS.ErrnoError) return; FS.ErrnoError = function ErrnoError(errno, node) { this.node = node; this.setErrno = (function (errno) { this.errno = errno; for (var key in ERRNO_CODES) { if (ERRNO_CODES[key] === errno) { this.code = key; break } } }); this.setErrno(errno); this.message = ERRNO_MESSAGES[errno] }; FS.ErrnoError.prototype = new Error; FS.ErrnoError.prototype.constructor = FS.ErrnoError;[ERRNO_CODES.ENOENT].forEach((function (code) { FS.genericErrors[code] = new FS.ErrnoError(code); FS.genericErrors[code].stack = "<generic error, no stack>" })) }), staticInit: (function () { FS.ensureErrnoError(); FS.nameTable = new Array(4096); FS.mount(MEMFS, {}, "/"); FS.createDefaultDirectories(); FS.createDefaultDevices() }), init: (function (input, output, error) { assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)"); FS.init.initialized = true; FS.ensureErrnoError(); Module["stdin"] = input || Module["stdin"]; Module["stdout"] = output || Module["stdout"]; Module["stderr"] = error || Module["stderr"]; FS.createStandardStreams() }), quit: (function () { FS.init.initialized = false; for (var i = 0; i < FS.streams.length; i++){ var stream = FS.streams[i]; if (!stream) { continue } FS.close(stream) } }), getMode: (function (canRead, canWrite) { var mode = 0; if (canRead) mode |= 292 | 73; if (canWrite) mode |= 146; return mode }), joinPath: (function (parts, forceRelative) { var path = PATH.join.apply(null, parts); if (forceRelative && path[0] == "/") path = path.substr(1); return path }), absolutePath: (function (relative, base) { return PATH.resolve(base, relative) }), standardizePath: (function (path) { return PATH.normalize(path) }), findObject: (function (path, dontResolveLastLink) { var ret = FS.analyzePath(path, dontResolveLastLink); if (ret.exists) { return ret.object } else { ___setErrNo(ret.error); return null } }), analyzePath: (function (path, dontResolveLastLink) { try { var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink }); path = lookup.path } catch (e) { } var ret = { isRoot: false, exists: false, error: 0, name: null, path: null, object: null, parentExists: false, parentPath: null, parentObject: null }; try { var lookup = FS.lookupPath(path, { parent: true }); ret.parentExists = true; ret.parentPath = lookup.path; ret.parentObject = lookup.node; ret.name = PATH.basename(path); lookup = FS.lookupPath(path, { follow: !dontResolveLastLink }); ret.exists = true; ret.path = lookup.path; ret.object = lookup.node; ret.name = lookup.node.name; ret.isRoot = lookup.path === "/" } catch (e) { ret.error = e.errno } return ret }), createFolder: (function (parent, name, canRead, canWrite) { var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name); var mode = FS.getMode(canRead, canWrite); return FS.mkdir(path, mode) }), createPath: (function (parent, path, canRead, canWrite) { parent = typeof parent === "string" ? parent : FS.getPath(parent); var parts = path.split("/").reverse(); while (parts.length) { var part = parts.pop(); if (!part) continue; var current = PATH.join2(parent, part); try { FS.mkdir(current) } catch (e) { } parent = current } return current }), createFile: (function (parent, name, properties, canRead, canWrite) { var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name); var mode = FS.getMode(canRead, canWrite); return FS.create(path, mode) }), createDataFile: (function (parent, name, data, canRead, canWrite, canOwn) { var path = name ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name) : parent; var mode = FS.getMode(canRead, canWrite); var node = FS.create(path, mode); if (data) { if (typeof data === "string") { var arr = new Array(data.length); for (var i = 0, len = data.length; i < len; ++i)arr[i] = data.charCodeAt(i); data = arr } FS.chmod(node, mode | 146); var stream = FS.open(node, "w"); FS.write(stream, data, 0, data.length, 0, canOwn); FS.close(stream); FS.chmod(node, mode) } return node }), createDevice: (function (parent, name, input, output) { var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name); var mode = FS.getMode(!!input, !!output); if (!FS.createDevice.major) FS.createDevice.major = 64; var dev = FS.makedev(FS.createDevice.major++, 0); FS.registerDevice(dev, { open: (function (stream) { stream.seekable = false }), close: (function (stream) { if (output && output.buffer && output.buffer.length) { output(10) } }), read: (function (stream, buffer, offset, length, pos) { var bytesRead = 0; for (var i = 0; i < length; i++){ var result; try { result = input() } catch (e) { throw new FS.ErrnoError(ERRNO_CODES.EIO) } if (result === undefined && bytesRead === 0) { throw new FS.ErrnoError(ERRNO_CODES.EAGAIN) } if (result === null || result === undefined) break; bytesRead++; buffer[offset + i] = result } if (bytesRead) { stream.node.timestamp = Date.now() } return bytesRead }), write: (function (stream, buffer, offset, length, pos) { for (var i = 0; i < length; i++){ try { output(buffer[offset + i]) } catch (e) { throw new FS.ErrnoError(ERRNO_CODES.EIO) } } if (length) { stream.node.timestamp = Date.now() } return i }) }); return FS.mkdev(path, mode, dev) }), createLink: (function (parent, name, target, canRead, canWrite) { var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name); return FS.symlink(target, path) }), forceLoadFile: (function (obj) { if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true; var success = true; if (typeof XMLHttpRequest !== "undefined") { throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.") } else if (Module["read"]) { try { obj.contents = intArrayFromString(Module["read"](obj.url), true); obj.usedBytes = obj.contents.length } catch (e) { success = false } } else { throw new Error("Cannot load without read() or XMLHttpRequest.") } if (!success) ___setErrNo(ERRNO_CODES.EIO); return success }), createLazyFile: (function (parent, name, url, canRead, canWrite) { function LazyUint8Array() { this.lengthKnown = false; this.chunks = [] } LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) { if (idx > this.length - 1 || idx < 0) { return undefined } var chunkOffset = idx % this.chunkSize; var chunkNum = idx / this.chunkSize | 0; return this.getter(chunkNum)[chunkOffset] }; LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) { this.getter = getter }; LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() { var xhr = new XMLHttpRequest; xhr.open("HEAD", url, false); xhr.send(null); if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status); var datalength = Number(xhr.getResponseHeader("Content-length")); var header; var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes"; var chunkSize = 1024 * 1024; if (!hasByteServing) chunkSize = datalength; var doXHR = (function (from, to) { if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!"); if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!"); var xhr = new XMLHttpRequest; xhr.open("GET", url, false); if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to); if (typeof Uint8Array != "undefined") xhr.responseType = "arraybuffer"; if (xhr.overrideMimeType) { xhr.overrideMimeType("text/plain; charset=x-user-defined") } xhr.send(null); if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status); if (xhr.response !== undefined) { return new Uint8Array(xhr.response || []) } else { return intArrayFromString(xhr.responseText || "", true) } }); var lazyArray = this; lazyArray.setDataGetter((function (chunkNum) { var start = chunkNum * chunkSize; var end = (chunkNum + 1) * chunkSize - 1; end = Math.min(end, datalength - 1); if (typeof lazyArray.chunks[chunkNum] === "undefined") { lazyArray.chunks[chunkNum] = doXHR(start, end) } if (typeof lazyArray.chunks[chunkNum] === "undefined") throw new Error("doXHR failed!"); return lazyArray.chunks[chunkNum] })); this._length = datalength; this._chunkSize = chunkSize; this.lengthKnown = true }; if (typeof XMLHttpRequest !== "undefined") { if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc"; var lazyArray = new LazyUint8Array; Object.defineProperty(lazyArray, "length", { get: (function () { if (!this.lengthKnown) { this.cacheLength() } return this._length }) }); Object.defineProperty(lazyArray, "chunkSize", { get: (function () { if (!this.lengthKnown) { this.cacheLength() } return this._chunkSize }) }); var properties = { isDevice: false, contents: lazyArray } } else { var properties = { isDevice: false, url: url } } var node = FS.createFile(parent, name, properties, canRead, canWrite); if (properties.contents) { node.contents = properties.contents } else if (properties.url) { node.contents = null; node.url = properties.url } Object.defineProperty(node, "usedBytes", { get: (function () { return this.contents.length }) }); var stream_ops = {}; var keys = Object.keys(node.stream_ops); keys.forEach((function (key) { var fn = node.stream_ops[key]; stream_ops[key] = function forceLoadLazyFile() { if (!FS.forceLoadFile(node)) { throw new FS.ErrnoError(ERRNO_CODES.EIO) } return fn.apply(null, arguments) } })); stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) { if (!FS.forceLoadFile(node)) { throw new FS.ErrnoError(ERRNO_CODES.EIO) } var contents = stream.node.contents; if (position >= contents.length) return 0; var size = Math.min(contents.length - position, length); assert(size >= 0); if (contents.slice) { for (var i = 0; i < size; i++){ buffer[offset + i] = contents[position + i] } } else { for (var i = 0; i < size; i++){ buffer[offset + i] = contents.get(position + i) } } return size }; node.stream_ops = stream_ops; return node }), createPreloadedFile: (function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) { Browser.init(); var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent; function processData(byteArray) { function finish(byteArray) { if (!dontCreateFile) { FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn) } if (onload) onload(); removeRunDependency("cp " + fullname) } var handled = false; Module["preloadPlugins"].forEach((function (plugin) { if (handled) return; if (plugin["canHandle"](fullname)) { plugin["handle"](byteArray, fullname, finish, (function () { if (onerror) onerror(); removeRunDependency("cp " + fullname) })); handled = true } })); if (!handled) finish(byteArray) } addRunDependency("cp " + fullname); if (typeof url == "string") { Browser.asyncLoad(url, (function (byteArray) { processData(byteArray) }), onerror) } else { processData(url) } }), indexedDB: (function () { return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB }), DB_NAME: (function () { return "EM_FS_" + window.location.pathname }), DB_VERSION: 20, DB_STORE_NAME: "FILE_DATA", saveFilesToDB: (function (paths, onload, onerror) { onload = onload || (function () { }); onerror = onerror || (function () { }); var indexedDB = FS.indexedDB(); try { var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION) } catch (e) { return onerror(e) } openRequest.onupgradeneeded = function openRequest_onupgradeneeded() { console.log("creating db"); var db = openRequest.result; db.createObjectStore(FS.DB_STORE_NAME) }; openRequest.onsuccess = function openRequest_onsuccess() { var db = openRequest.result; var transaction = db.transaction([FS.DB_STORE_NAME], "readwrite"); var files = transaction.objectStore(FS.DB_STORE_NAME); var ok = 0, fail = 0, total = paths.length; function finish() { if (fail == 0) onload(); else onerror() } paths.forEach((function (path) { var putRequest = files.put(FS.analyzePath(path).object.contents, path); putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() }; putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() } })); transaction.onerror = onerror }; openRequest.onerror = onerror }), loadFilesFromDB: (function (paths, onload, onerror) { onload = onload || (function () { }); onerror = onerror || (function () { }); var indexedDB = FS.indexedDB(); try { var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION) } catch (e) { return onerror(e) } openRequest.onupgradeneeded = onerror; openRequest.onsuccess = function openRequest_onsuccess() { var db = openRequest.result; try { var transaction = db.transaction([FS.DB_STORE_NAME], "readonly") } catch (e) { onerror(e); return } var files = transaction.objectStore(FS.DB_STORE_NAME); var ok = 0, fail = 0, total = paths.length; function finish() { if (fail == 0) onload(); else onerror() } paths.forEach((function (path) { var getRequest = files.get(path); getRequest.onsuccess = function getRequest_onsuccess() { if (FS.analyzePath(path).exists) { FS.unlink(path) } FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true); ok++; if (ok + fail == total) finish() }; getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() } })); transaction.onerror = onerror }; openRequest.onerror = onerror }) }; var PATH = { splitPath: (function (filename) { var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/; return splitPathRe.exec(filename).slice(1) }), normalizeArray: (function (parts, allowAboveRoot) { var up = 0; for (var i = parts.length - 1; i >= 0; i--){ var last = parts[i]; if (last === ".") { parts.splice(i, 1) } else if (last === "..") { parts.splice(i, 1); up++ } else if (up) { parts.splice(i, 1); up-- } } if (allowAboveRoot) { for (; up--; up){ parts.unshift("..") } } return parts }), normalize: (function (path) { var isAbsolute = path.charAt(0) === "/", trailingSlash = path.substr(-1) === "/"; path = PATH.normalizeArray(path.split("/").filter((function (p) { return !!p })), !isAbsolute).join("/"); if (!path && !isAbsolute) { path = "." } if (path && trailingSlash) { path += "/" } return (isAbsolute ? "/" : "") + path }), dirname: (function (path) { var result = PATH.splitPath(path), root = result[0], dir = result[1]; if (!root && !dir) { return "." } if (dir) { dir = dir.substr(0, dir.length - 1) } return root + dir }), basename: (function (path) { if (path === "/") return "/"; var lastSlash = path.lastIndexOf("/"); if (lastSlash === -1) return path; return path.substr(lastSlash + 1) }), extname: (function (path) { return PATH.splitPath(path)[3] }), join: (function () { var paths = Array.prototype.slice.call(arguments, 0); return PATH.normalize(paths.join("/")) }), join2: (function (l, r) { return PATH.normalize(l + "/" + r) }), resolve: (function () { var resolvedPath = "", resolvedAbsolute = false; for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--){ var path = i >= 0 ? arguments[i] : FS.cwd(); if (typeof path !== "string") { throw new TypeError("Arguments to path.resolve must be strings") } else if (!path) { return "" } resolvedPath = path + "/" + resolvedPath; resolvedAbsolute = path.charAt(0) === "/" } resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter((function (p) { return !!p })), !resolvedAbsolute).join("/"); return (resolvedAbsolute ? "/" : "") + resolvedPath || "." }), relative: (function (from, to) { from = PATH.resolve(from).substr(1); to = PATH.resolve(to).substr(1); function trim(arr) { var start = 0; for (; start < arr.length; start++){ if (arr[start] !== "") break } var end = arr.length - 1; for (; end >= 0; end--){ if (arr[end] !== "") break } if (start > end) return []; return arr.slice(start, end - start + 1) } var fromParts = trim(from.split("/")); var toParts = trim(to.split("/")); var length = Math.min(fromParts.length, toParts.length); var samePartsLength = length; for (var i = 0; i < length; i++){ if (fromParts[i] !== toParts[i]) { samePartsLength = i; break } } var outputParts = []; for (var i = samePartsLength; i < fromParts.length; i++){ outputParts.push("..") } outputParts = outputParts.concat(toParts.slice(samePartsLength)); return outputParts.join("/") }) }; var Browser = { mainLoop: { scheduler: null, method: "", shouldPause: false, paused: false, queue: [], pause: (function () { Browser.mainLoop.shouldPause = true }), resume: (function () { if (Browser.mainLoop.paused) { Browser.mainLoop.paused = false; Browser.mainLoop.scheduler() } Browser.mainLoop.shouldPause = false }), updateStatus: (function () { if (Module["setStatus"]) { var message = Module["statusMessage"] || "Please wait..."; var remaining = Browser.mainLoop.remainingBlockers; var expected = Browser.mainLoop.expectedBlockers; if (remaining) { if (remaining < expected) { Module["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")") } else { Module["setStatus"](message) } } else { Module["setStatus"]("") } } }), runIter: (function (func) { if (ABORT) return; if (Module["preMainLoop"]) { var preRet = Module["preMainLoop"](); if (preRet === false) { return } } try { func() } catch (e) { if (e instanceof ExitStatus) { return } else { if (e && typeof e === "object" && e.stack) Module.printErr("exception thrown: " + [e, e.stack]); throw e } } if (Module["postMainLoop"]) Module["postMainLoop"]() }) }, isFullScreen: false, pointerLock: false, moduleContextCreatedCallbacks: [], workers: [], init: (function () { if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; if (Browser.initted) return; Browser.initted = true; try { new Blob; Browser.hasBlobConstructor = true } catch (e) { Browser.hasBlobConstructor = false; console.log("warning: no blob constructor, cannot create blobs with mimetypes") } Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null; Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : undefined; if (!Module.noImageDecoding && typeof Browser.URLObject === "undefined") { console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available."); Module.noImageDecoding = true } var imagePlugin = {}; imagePlugin["canHandle"] = function imagePlugin_canHandle(name) { return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name) }; imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) { var b = null; if (Browser.hasBlobConstructor) { try { b = new Blob([byteArray], { type: Browser.getMimetype(name) }); if (b.size !== byteArray.length) { b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) }) } } catch (e) { Runtime.warnOnce("Blob constructor present but fails: " + e + "; falling back to blob builder") } } if (!b) { var bb = new Browser.BlobBuilder; bb.append((new Uint8Array(byteArray)).buffer); b = bb.getBlob() } var url = Browser.URLObject.createObjectURL(b); var img = new Image; img.onload = function img_onload() { assert(img.complete, "Image " + name + " could not be decoded"); var canvas = document.createElement("canvas"); canvas.width = img.width; canvas.height = img.height; var ctx = canvas.getContext("2d"); ctx.drawImage(img, 0, 0); Module["preloadedImages"][name] = canvas; Browser.URLObject.revokeObjectURL(url); if (onload) onload(byteArray) }; img.onerror = function img_onerror(event) { console.log("Image " + url + " could not be decoded"); if (onerror) onerror() }; img.src = url }; Module["preloadPlugins"].push(imagePlugin); var audioPlugin = {}; audioPlugin["canHandle"] = function audioPlugin_canHandle(name) { return !Module.noAudioDecoding && name.substr(-4) in { ".ogg": 1, ".wav": 1, ".mp3": 1 } }; audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) { var done = false; function finish(audio) { if (done) return; done = true; Module["preloadedAudios"][name] = audio; if (onload) onload(byteArray) } function fail() { if (done) return; done = true; Module["preloadedAudios"][name] = new Audio; if (onerror) onerror() } if (Browser.hasBlobConstructor) { try { var b = new Blob([byteArray], { type: Browser.getMimetype(name) }) } catch (e) { return fail() } var url = Browser.URLObject.createObjectURL(b); var audio = new Audio; audio.addEventListener("canplaythrough", (function () { finish(audio) }), false); audio.onerror = function audio_onerror(event) { if (done) return; console.log("warning: browser could not fully decode audio " + name + ", trying slower base64 approach"); function encode64(data) { var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"; var PAD = "="; var ret = ""; var leftchar = 0; var leftbits = 0; for (var i = 0; i < data.length; i++){ leftchar = leftchar << 8 | data[i]; leftbits += 8; while (leftbits >= 6) { var curr = leftchar >> leftbits - 6 & 63; leftbits -= 6; ret += BASE[curr] } } if (leftbits == 2) { ret += BASE[(leftchar & 3) << 4]; ret += PAD + PAD } else if (leftbits == 4) { ret += BASE[(leftchar & 15) << 2]; ret += PAD } return ret } audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray); finish(audio) }; audio.src = url; Browser.safeSetTimeout((function () { finish(audio) }), 1e4) } else { return fail() } }; Module["preloadPlugins"].push(audioPlugin); var canvas = Module["canvas"]; function pointerLockChange() { Browser.pointerLock = document["pointerLockElement"] === canvas || document["mozPointerLockElement"] === canvas || document["webkitPointerLockElement"] === canvas || document["msPointerLockElement"] === canvas } if (canvas) { canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"] || canvas["msRequestPointerLock"] || (function () { }); canvas.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || (function () { }); canvas.exitPointerLock = canvas.exitPointerLock.bind(document); document.addEventListener("pointerlockchange", pointerLockChange, false); document.addEventListener("mozpointerlockchange", pointerLockChange, false); document.addEventListener("webkitpointerlockchange", pointerLockChange, false); document.addEventListener("mspointerlockchange", pointerLockChange, false); if (Module["elementPointerLock"]) { canvas.addEventListener("click", (function (ev) { if (!Browser.pointerLock && canvas.requestPointerLock) { canvas.requestPointerLock(); ev.preventDefault() } }), false) } } }), createContext: (function (canvas, useWebGL, setInModule, webGLContextAttributes) { if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; var ctx; var contextHandle; if (useWebGL) { var contextAttributes = { antialias: false, alpha: false }; if (webGLContextAttributes) { for (var attribute in webGLContextAttributes) { contextAttributes[attribute] = webGLContextAttributes[attribute] } } contextHandle = GL.createContext(canvas, contextAttributes); if (contextHandle) { ctx = GL.getContext(contextHandle).GLctx } canvas.style.backgroundColor = "black" } else { ctx = canvas.getContext("2d") } if (!ctx) return null; if (setInModule) { if (!useWebGL) assert(typeof GLctx === "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it"); Module.ctx = ctx; if (useWebGL) GL.makeContextCurrent(contextHandle); Module.useWebGL = useWebGL; Browser.moduleContextCreatedCallbacks.forEach((function (callback) { callback() })); Browser.init() } return ctx }), destroyContext: (function (canvas, useWebGL, setInModule) { }), fullScreenHandlersInstalled: false, lockPointer: undefined, resizeCanvas: undefined, requestFullScreen: (function (lockPointer, resizeCanvas) { Browser.lockPointer = lockPointer; Browser.resizeCanvas = resizeCanvas; if (typeof Browser.lockPointer === "undefined") Browser.lockPointer = true; if (typeof Browser.resizeCanvas === "undefined") Browser.resizeCanvas = false; var canvas = Module["canvas"]; function fullScreenChange() { Browser.isFullScreen = false; var canvasContainer = canvas.parentNode; if ((document["webkitFullScreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["mozFullscreenElement"] || document["fullScreenElement"] || document["fullscreenElement"] || document["msFullScreenElement"] || document["msFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer) { canvas.cancelFullScreen = document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["webkitCancelFullScreen"] || document["msExitFullscreen"] || document["exitFullscreen"] || (function () { }); canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document); if (Browser.lockPointer) canvas.requestPointerLock(); Browser.isFullScreen = true; if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize() } else { canvasContainer.parentNode.insertBefore(canvas, canvasContainer); canvasContainer.parentNode.removeChild(canvasContainer); if (Browser.resizeCanvas) Browser.setWindowedCanvasSize() } if (Module["onFullScreen"]) Module["onFullScreen"](Browser.isFullScreen); Browser.updateCanvasDimensions(canvas) } if (!Browser.fullScreenHandlersInstalled) { Browser.fullScreenHandlersInstalled = true; document.addEventListener("fullscreenchange", fullScreenChange, false); document.addEventListener("mozfullscreenchange", fullScreenChange, false); document.addEventListener("webkitfullscreenchange", fullScreenChange, false); document.addEventListener("MSFullscreenChange", fullScreenChange, false) } var canvasContainer = document.createElement("div"); canvas.parentNode.insertBefore(canvasContainer, canvas); canvasContainer.appendChild(canvas); canvasContainer.requestFullScreen = canvasContainer["requestFullScreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullScreen"] ? (function () { canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]) }) : null); canvasContainer.requestFullScreen() }), nextRAF: 0, fakeRequestAnimationFrame: (function (func) { var now = Date.now(); if (Browser.nextRAF === 0) { Browser.nextRAF = now + 1e3 / 60 } else { while (now + 2 >= Browser.nextRAF) { Browser.nextRAF += 1e3 / 60 } } var delay = Math.max(Browser.nextRAF - now, 0); setTimeout(func, delay) }), requestAnimationFrame: function requestAnimationFrame(func) { if (typeof window === "undefined") { Browser.fakeRequestAnimationFrame(func) } else { if (!window.requestAnimationFrame) { window.requestAnimationFrame = window["requestAnimationFrame"] || window["mozRequestAnimationFrame"] || window["webkitRequestAnimationFrame"] || window["msRequestAnimationFrame"] || window["oRequestAnimationFrame"] || Browser.fakeRequestAnimationFrame } window.requestAnimationFrame(func) } }, safeCallback: (function (func) { return (function () { if (!ABORT) return func.apply(null, arguments) }) }), safeRequestAnimationFrame: (function (func) { return Browser.requestAnimationFrame((function () { if (!ABORT) func() })) }), safeSetTimeout: (function (func, timeout) { Module["noExitRuntime"] = true; return setTimeout((function () { if (!ABORT) func() }), timeout) }), safeSetInterval: (function (func, timeout) { Module["noExitRuntime"] = true; return setInterval((function () { if (!ABORT) func() }), timeout) }), getMimetype: (function (name) { return { "jpg": "image/jpeg", "jpeg": "image/jpeg", "png": "image/png", "bmp": "image/bmp", "ogg": "audio/ogg", "wav": "audio/wav", "mp3": "audio/mpeg" }[name.substr(name.lastIndexOf(".") + 1)] }), getUserMedia: (function (func) { if (!window.getUserMedia) { window.getUserMedia = navigator["getUserMedia"] || navigator["mozGetUserMedia"] } window.getUserMedia(func) }), getMovementX: (function (event) { return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0 }), getMovementY: (function (event) { return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0 }), getMouseWheelDelta: (function (event) { var delta = 0; switch (event.type) { case "DOMMouseScroll": delta = event.detail; break; case "mousewheel": delta = event.wheelDelta; break; case "wheel": delta = event["deltaY"]; break; default: throw "unrecognized mouse wheel event: " + event.type }return delta }), mouseX: 0, mouseY: 0, mouseMovementX: 0, mouseMovementY: 0, touches: {}, lastTouches: {}, calculateMouseEvent: (function (event) { if (Browser.pointerLock) { if (event.type != "mousemove" && "mozMovementX" in event) { Browser.mouseMovementX = Browser.mouseMovementY = 0 } else { Browser.mouseMovementX = Browser.getMovementX(event); Browser.mouseMovementY = Browser.getMovementY(event) } if (typeof SDL != "undefined") { Browser.mouseX = SDL.mouseX + Browser.mouseMovementX; Browser.mouseY = SDL.mouseY + Browser.mouseMovementY } else { Browser.mouseX += Browser.mouseMovementX; Browser.mouseY += Browser.mouseMovementY } } else { var rect = Module["canvas"].getBoundingClientRect(); var cw = Module["canvas"].width; var ch = Module["canvas"].height; var scrollX = typeof window.scrollX !== "undefined" ? window.scrollX : window.pageXOffset; var scrollY = typeof window.scrollY !== "undefined" ? window.scrollY : window.pageYOffset; if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") { var touch = event.touch; if (touch === undefined) { return } var adjustedX = touch.pageX - (scrollX + rect.left); var adjustedY = touch.pageY - (scrollY + rect.top); adjustedX = adjustedX * (cw / rect.width); adjustedY = adjustedY * (ch / rect.height); var coords = { x: adjustedX, y: adjustedY }; if (event.type === "touchstart") { Browser.lastTouches[touch.identifier] = coords; Browser.touches[touch.identifier] = coords } else if (event.type === "touchend" || event.type === "touchmove") { Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier]; Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY } } return } var x = event.pageX - (scrollX + rect.left); var y = event.pageY - (scrollY + rect.top); x = x * (cw / rect.width); y = y * (ch / rect.height); Browser.mouseMovementX = x - Browser.mouseX; Browser.mouseMovementY = y - Browser.mouseY; Browser.mouseX = x; Browser.mouseY = y } }), xhrLoad: (function (url, onload, onerror) { var xhr = new XMLHttpRequest; xhr.open("GET", url, true); xhr.responseType = "arraybuffer"; xhr.onload = function xhr_onload() { if (xhr.status == 200 || xhr.status == 0 && xhr.response) { onload(xhr.response) } else { onerror() } }; xhr.onerror = onerror; xhr.send(null) }), asyncLoad: (function (url, onload, onerror, noRunDep) { Browser.xhrLoad(url, (function (arrayBuffer) { assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).'); onload(new Uint8Array(arrayBuffer)); if (!noRunDep) removeRunDependency("al " + url) }), (function (event) { if (onerror) { onerror() } else { throw 'Loading data file "' + url + '" failed.' } })); if (!noRunDep) addRunDependency("al " + url) }), resizeListeners: [], updateResizeListeners: (function () { var canvas = Module["canvas"]; Browser.resizeListeners.forEach((function (listener) { listener(canvas.width, canvas.height) })) }), setCanvasSize: (function (width, height, noUpdates) { var canvas = Module["canvas"]; Browser.updateCanvasDimensions(canvas, width, height); if (!noUpdates) Browser.updateResizeListeners() }), windowedWidth: 0, windowedHeight: 0, setFullScreenCanvasSize: (function () { if (typeof SDL != "undefined") { var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2]; flags = flags | 8388608; HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags } Browser.updateResizeListeners() }), setWindowedCanvasSize: (function () { if (typeof SDL != "undefined") { var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2]; flags = flags & ~8388608; HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags } Browser.updateResizeListeners() }), updateCanvasDimensions: (function (canvas, wNative, hNative) { if (wNative && hNative) { canvas.widthNative = wNative; canvas.heightNative = hNative } else { wNative = canvas.widthNative; hNative = canvas.heightNative } var w = wNative; var h = hNative; if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) { if (w / h < Module["forcedAspectRatio"]) { w = Math.round(h * Module["forcedAspectRatio"]) } else { h = Math.round(w / Module["forcedAspectRatio"]) } } if ((document["webkitFullScreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["mozFullscreenElement"] || document["fullScreenElement"] || document["fullscreenElement"] || document["msFullScreenElement"] || document["msFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode && typeof screen != "undefined") { var factor = Math.min(screen.width / w, screen.height / h); w = Math.round(w * factor); h = Math.round(h * factor) } if (Browser.resizeCanvas) { if (canvas.width != w) canvas.width = w; if (canvas.height != h) canvas.height = h; if (typeof canvas.style != "undefined") { canvas.style.removeProperty("width"); canvas.style.removeProperty("height") } } else { if (canvas.width != wNative) canvas.width = wNative; if (canvas.height != hNative) canvas.height = hNative; if (typeof canvas.style != "undefined") { if (w != wNative || h != hNative) { canvas.style.setProperty("width", w + "px", "important"); canvas.style.setProperty("height", h + "px", "important") } else { canvas.style.removeProperty("width"); canvas.style.removeProperty("height") } } } }), wgetRequests: {}, nextWgetRequestHandle: 0, getNextWgetRequestHandle: (function () { var handle = Browser.nextWgetRequestHandle; Browser.nextWgetRequestHandle++; return handle }) }; function _time(ptr) { var ret = Date.now() / 1e3 | 0; if (ptr) { HEAP32[ptr >> 2] = ret } return ret } Module["_emscripten_replace_memory"] = _emscripten_replace_memory; ___errno_state = Runtime.staticAlloc(4); HEAP32[___errno_state >> 2] = 0; Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) }; Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) }; Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) }; Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() }; Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() }; Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }; FS.staticInit(); __ATINIT__.unshift({ func: (function () { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() }) }); __ATMAIN__.push({ func: (function () { FS.ignorePermissions = false }) }); __ATEXIT__.push({ func: (function () { FS.quit() }) }); Module["FS_createFolder"] = FS.createFolder; Module["FS_createPath"] = FS.createPath; Module["FS_createDataFile"] = FS.createDataFile; Module["FS_createPreloadedFile"] = FS.createPreloadedFile; Module["FS_createLazyFile"] = FS.createLazyFile; Module["FS_createLink"] = FS.createLink; Module["FS_createDevice"] = FS.createDevice; __ATINIT__.unshift({ func: (function () { TTY.init() }) }); __ATEXIT__.push({ func: (function () { TTY.shutdown() }) }); TTY.utf8 = new Runtime.UTF8Processor; if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit() } STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP); staticSealed = true; STACK_MAX = STACK_BASE + TOTAL_STACK; DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX); assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack"); var ctlz_i8 = allocate([8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "i8", ALLOC_DYNAMIC); var cttz_i8 = allocate([8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0], "i8", ALLOC_DYNAMIC); var Math_min = Math.min; var asm = (function (global, env, buffer) {
// EMSCRIPTEN_START_ASM
"almost asm";var a=global.Int8Array;var b=global.Int16Array;var c=global.Int32Array;var d=global.Uint8Array;var e=global.Uint16Array;var f=global.Uint32Array;var g=global.Float32Array;var h=global.Float64Array;var i=new a(buffer);var j=new b(buffer);var k=new c(buffer);var l=new d(buffer);var m=new e(buffer);var n=new f(buffer);var o=new g(buffer);var p=new h(buffer);var q=global.byteLength;var r=env.STACKTOP|0;var s=env.STACK_MAX|0;var t=env.tempDoublePtr|0;var u=env.ABORT|0;var v=env.cttz_i8|0;var w=env.ctlz_i8|0;var x=0;var y=0;var z=0;var A=0;var B=+env.NaN,C=+env.Infinity;var D=0,E=0,F=0,G=0,H=0.0,I=0,J=0,K=0,L=0.0;var M=0;var N=0;var O=0;var P=0;var Q=0;var R=0;var S=0;var T=0;var U=0;var V=0;var W=global.Math.floor;var X=global.Math.abs;var Y=global.Math.sqrt;var Z=global.Math.pow;var _=global.Math.cos;var $=global.Math.sin;var aa=global.Math.tan;var ba=global.Math.acos;var ca=global.Math.asin;var da=global.Math.atan;var ea=global.Math.atan2;var fa=global.Math.exp;var ga=global.Math.log;var ha=global.Math.ceil;var ia=global.Math.imul;var ja=env.abort;var ka=env.assert;var la=env.min;var ma=env._fflush;var na=env._abort;var oa=env.___setErrNo;var pa=env._sbrk;var qa=env._time;var ra=env._emscripten_memcpy_big;var sa=env._sysconf;var ta=env.___errno_location;var ua=0.0;
// EMSCRIPTEN_START_FUNCS
function va(a){a=a|0;var b=0;b=r;r=r+a|0;r=r+15&-16;return b|0}function wa(){return r|0}function xa(a){a=a|0;r=a}function ya(a,b){a=a|0;b=b|0;if((x|0)==0){x=a;y=b}}function za(a){a=a|0;i[t>>0]=i[a>>0];i[t+1>>0]=i[a+1>>0];i[t+2>>0]=i[a+2>>0];i[t+3>>0]=i[a+3>>0]}function Aa(a){a=a|0;i[t>>0]=i[a>>0];i[t+1>>0]=i[a+1>>0];i[t+2>>0]=i[a+2>>0];i[t+3>>0]=i[a+3>>0];i[t+4>>0]=i[a+4>>0];i[t+5>>0]=i[a+5>>0];i[t+6>>0]=i[a+6>>0];i[t+7>>0]=i[a+7>>0]}function Ba(a){a=a|0;M=a}function Ca(){return M|0}function Da(){var a=0,b=0,c=0,d=0,e=0;a=r;b=0;do{c=b>>>1;d=(0-(b&1)&-306674912^c)>>>1;e=(0-(c&1)&-306674912^d)>>>1;c=(0-(d&1)&-306674912^e)>>>1;d=(0-(e&1)&-306674912^c)>>>1;e=(0-(c&1)&-306674912^d)>>>1;c=(0-(d&1)&-306674912^e)>>>1;k[8+(b<<2)>>2]=0-(c&1)&-306674912^(0-(e&1)&-306674912^c)>>>1;b=b+1|0}while((b|0)!=256);r=a;return}function Ea(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;d=r;e=~c;if((b|0)==0){f=e;g=~f;r=d;return g|0}else{h=b;i=a;j=e}while(1){e=k[8+(((l[i>>0]|0)^j&255)<<2)>>2]^j>>>8;h=h+ -1|0;if((h|0)==0){f=e;break}else{i=i+1|0;j=e}}g=~f;r=d;return g|0}function Fa(){var a=0,b=0,c=0,d=0,e=0,f=0;a=r;b=0;do{c=fb(b|0,0,1)|0;d=M;e=cb(0,0,b&1|0,0)|0;f=fb(e&-679014590^c|0,M&-915646571^d|0,1)|0;d=M;e=cb(0,0,c&1|0,0)|0;c=fb(e&-679014590^f|0,M&-915646571^d|0,1)|0;d=M;e=cb(0,0,f&1|0,0)|0;f=fb(e&-679014590^c|0,M&-915646571^d|0,1)|0;d=M;e=cb(0,0,c&1|0,0)|0;c=fb(e&-679014590^f|0,M&-915646571^d|0,1)|0;d=M;e=cb(0,0,f&1|0,0)|0;f=fb(e&-679014590^c|0,M&-915646571^d|0,1)|0;d=M;e=cb(0,0,c&1|0,0)|0;c=fb(e&-679014590^f|0,M&-915646571^d|0,1)|0;d=M;e=cb(0,0,f&1|0,0)|0;f=fb(e&-679014590^c|0,M&-915646571^d|0,1)|0;d=M;e=cb(0,0,c&1|0,0)|0;c=1032+(b<<3)|0;k[c>>2]=e&-679014590^f;k[c+4>>2]=M&-915646571^d;b=b+1|0}while((b|0)!=256);r=a;return}function Ga(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,m=0,n=0,o=0,p=0;e=r;f=~c;c=~d;if((b|0)==0){g=f;h=c;i=~g;j=~h;M=j;r=e;return i|0}else{m=b;n=a;o=c;p=f}while(1){f=1032+(((l[n>>0]|0)^p&255)<<3)|0;c=k[f>>2]|0;a=k[f+4>>2]|0;f=fb(p|0,o|0,8)|0;b=c^f;f=a^M;m=m+ -1|0;if((m|0)==0){g=b;h=f;break}else{n=n+1|0;o=f;p=b}}i=~g;j=~h;M=j;r=e;return i|0}function Ha(){var a=0;a=r;if((k[770]|0)!=0){r=a;return}Da();Fa();k[770]=1;r=a;return}function Ia(a){a=a|0;var b=0,c=0,d=0;b=r;if((k[770]|0)==0){Da();Fa();k[770]=1}c=_a(28)|0;d=Ya(2,104857600)|0;k[c>>2]=d;d=_a(a)|0;k[c+4>>2]=d;k[c+8>>2]=0;k[c+12>>2]=0;d=_a(a)|0;k[c+16>>2]=d;k[c+20>>2]=0;k[c+24>>2]=a;r=b;return c|0}function Ja(a){a=a|0;return(k[a+8>>2]|0)>>>0>=(k[a+12>>2]|0)>>>0|0}function Ka(a){a=a|0;return k[a+4>>2]|0}function La(a,b){a=a|0;b=b|0;k[a+8>>2]=0;k[a+12>>2]=b;return}function Ma(a){a=a|0;var b=0,c=0;b=r;c=Xa(k[a>>2]|0,a+4|0)|0;r=b;return c|0}function Na(a){a=a|0;return k[a+20>>2]|0}function Oa(a){a=a|0;return k[a+16>>2]|0}function Pa(a){a=a|0;k[a+20>>2]=0;return}function Qa(a){a=a|0;var b=0;b=r;Za(k[a>>2]|0);$a(k[a+4>>2]|0);$a(k[a+16>>2]|0);$a(a);r=b;return}function Ra(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0;c=r;d=b+4|0;e=b+8|0;f=a+64|0;g=a+81|0;h=a+80|0;m=a+60|0;n=b+12|0;o=b+16|0;p=a+24|0;q=b+20|0;s=a+44|0;t=a+28|0;u=a+72|0;v=a+68|0;w=a+84|0;x=a+4|0;y=a+8|0;z=a+76|0;A=a+116|0;B=a+112|0;C=a+108|0;D=a+32|0;E=a+40|0;F=a+28388|0;G=a+28392|0;H=a+20|0;I=a+12|0;J=a+16|0;K=a+104|0;L=a+36|0;a:while(1){M=k[d>>2]|0;N=k[e>>2]|0;O=k[f>>2]|0;b:do if(!(M>>>0<N>>>0)){if((O|0)!=7){P=0;Q=88;break a}}else{switch(O|0){case 0:{k[d>>2]=M+1;R=i[(k[b>>2]|0)+M>>0]|0;S=R&255;if(R<<24>>24==0){P=1;Q=88;break a}if(!((R&255)>223|R<<24>>24==1)){if((i[h>>0]|0)!=0){P=7;Q=88;break a}}else{i[g>>0]=1;i[h>>0]=0;if((k[m>>2]|0)==0){T=k[o>>2]|0;k[p>>2]=(k[n>>2]|0)+T;k[s>>2]=(k[q>>2]|0)-T}k[t+0>>2]=0;k[t+4>>2]=0;k[t+8>>2]=0;k[t+12>>2]=0}if(!(R<<24>>24<0)){if((R&255)>2){P=7;Q=88;break a}k[f>>2]=3;k[v>>2]=8;continue a}k[u>>2]=S<<16&2031616;k[f>>2]=1;if((R&255)>191){i[g>>0]=0;k[v>>2]=5;continue a}if((i[g>>0]|0)!=0){P=7;Q=88;break a}k[v>>2]=6;if(!((R&255)>159))continue a;k[w+0>>2]=0;k[w+4>>2]=0;k[w+8>>2]=0;k[w+12>>2]=0;k[w+16>>2]=0;R=0;do{j[a+(R<<1)+120>>1]=1024;R=R+1|0}while((R|0)!=14134);k[a>>2]=-1;k[x>>2]=0;k[y>>2]=5;continue a;break};case 1:{k[d>>2]=M+1;k[u>>2]=(l[(k[b>>2]|0)+M>>0]<<8)+(k[u>>2]|0);k[f>>2]=2;continue a;break};case 2:{k[d>>2]=M+1;k[u>>2]=(l[(k[b>>2]|0)+M>>0]|0)+1+(k[u>>2]|0);k[f>>2]=3;continue a;break};case 3:{k[d>>2]=M+1;k[z>>2]=l[(k[b>>2]|0)+M>>0]<<8;k[f>>2]=4;continue a;break};case 4:{k[d>>2]=M+1;k[z>>2]=(l[(k[b>>2]|0)+M>>0]|0)+1+(k[z>>2]|0);k[f>>2]=k[v>>2];continue a;break};case 5:{k[d>>2]=M+1;R=i[(k[b>>2]|0)+M>>0]|0;if((R&255)>224){P=7;Q=88;break a}k[A>>2]=0;if((R&255)>44){S=R;T=0;do{S=(S&255)+211&255;T=T+1|0}while((S&255)>44);k[A>>2]=T;U=S;V=T}else{U=R;V=0}k[A>>2]=(1<<V)+ -1;k[B>>2]=0;W=U&255;if((U&255)>8){X=W;Y=0;do{Z=X+247|0;Y=Y+1|0;X=Z&255}while((Z&255)>8);k[B>>2]=Y;_=X;$=Y}else{_=W;$=0}k[C>>2]=_;if((_+$|0)>>>0>4){P=7;Q=88;break a}k[B>>2]=(1<<$)+ -1;k[w+0>>2]=0;k[w+4>>2]=0;k[w+8>>2]=0;k[w+12>>2]=0;k[w+16>>2]=0;R=0;do{j[a+(R<<1)+120>>1]=1024;R=R+1|0}while((R|0)!=14134);k[a>>2]=-1;k[x>>2]=0;k[y>>2]=5;k[f>>2]=6;break};case 6:break;case 7:{break b;break};case 8:{R=k[z>>2]|0;c:do if((R|0)!=0){W=R;Y=M;X=N;while(1){if(!(Y>>>0<X>>>0))break;T=k[o>>2]|0;S=k[q>>2]|0;if(!(T>>>0<S>>>0))break;Z=X-Y|0;aa=S-T|0;T=Z>>>0<aa>>>0?Z:aa;aa=k[D>>2]|0;Z=(k[s>>2]|0)-aa|0;S=T>>>0>Z>>>0?Z:T;T=S>>>0>W>>>0?W:S;k[z>>2]=W-T;ib((k[p>>2]|0)+aa|0,(k[b>>2]|0)+(k[d>>2]|0)|0,T|0)|0;aa=(k[D>>2]|0)+T|0;k[D>>2]=aa;if((k[L>>2]|0)>>>0<aa>>>0)k[L>>2]=aa;if((k[m>>2]|0)==0)ba=aa;else{if((aa|0)==(k[s>>2]|0))k[D>>2]=0;ib((k[n>>2]|0)+(k[o>>2]|0)|0,(k[b>>2]|0)+(k[d>>2]|0)|0,T|0)|0;ba=k[D>>2]|0}k[t>>2]=ba;k[o>>2]=(k[o>>2]|0)+T;aa=(k[d>>2]|0)+T|0;k[d>>2]=aa;T=k[z>>2]|0;if((T|0)==0)break c;W=T;Y=aa;X=k[e>>2]|0}if((W|0)!=0){P=0;Q=88;break a}}while(0);k[f>>2]=0;continue a;break};default:continue a}R=k[z>>2]|0;if(R>>>0<5){P=7;Q=88;break a}if((k[y>>2]|0)==0)ca=R;else{do{R=k[d>>2]|0;if((R|0)==(k[e>>2]|0)){P=0;Q=88;break a}X=k[x>>2]<<8;k[d>>2]=R+1;k[x>>2]=l[(k[b>>2]|0)+R>>0]|X;X=(k[y>>2]|0)+ -1|0;k[y>>2]=X}while((X|0)!=0);ca=k[z>>2]|0}k[z>>2]=ca+ -5;k[f>>2]=7}while(0);N=(k[q>>2]|0)-(k[o>>2]|0)|0;M=k[u>>2]|0;O=N>>>0<M>>>0?N:M;M=k[s>>2]|0;N=k[D>>2]|0;k[E>>2]=(M-N|0)>>>0>O>>>0?N+O|0:M;M=k[e>>2]|0;O=k[d>>2]|0;N=M-O|0;X=k[F>>2]|0;R=k[z>>2]|0;if((X|0)==0)if((R|0)==0){da=0;Q=44}else{ea=O;fa=M;Q=54}else{da=R;Q=44}d:do if((Q|0)==44){Q=0;R=42-X|0;M=da-X|0;Y=R>>>0>M>>>0?M:R;R=Y>>>0>N>>>0?N:Y;ib(a+X+28392|0,(k[b>>2]|0)+O|0,R|0)|0;Y=k[F>>2]|0;M=R+Y|0;do if((M|0)!=(k[z>>2]|0))if(M>>>0<21){k[F>>2]=M;k[d>>2]=(k[d>>2]|0)+R;break d}else{ga=M+ -21|0;break}else{eb(a+M+28392|0,0,63-Y-R|0)|0;ga=(k[F>>2]|0)+R|0}while(0);k[H>>2]=ga;k[I>>2]=G;k[J>>2]=0;if(!(Va(a)|0)){P=7;Q=88;break a}Y=k[J>>2]|0;M=k[F>>2]|0;if(Y>>>0>(M+R|0)>>>0){P=7;Q=88;break a}k[z>>2]=(k[z>>2]|0)-Y;if(Y>>>0<M>>>0){aa=M-Y|0;k[F>>2]=aa;jb(G|0,a+Y+28392|0,aa|0)|0;break}else{k[d>>2]=Y-M+(k[d>>2]|0);k[F>>2]=0;ea=k[d>>2]|0;fa=k[e>>2]|0;Q=54;break}}while(0);if((Q|0)==54){Q=0;O=fa-ea|0;if(O>>>0>20){k[I>>2]=k[b>>2];k[J>>2]=ea;X=k[z>>2]|0;if(O>>>0<(X+21|0)>>>0)ha=(k[e>>2]|0)+ -21|0;else ha=(k[d>>2]|0)+X|0;k[H>>2]=ha;if(!(Va(a)|0)){P=7;Q=88;break}X=k[J>>2]|0;O=X-(k[d>>2]|0)|0;N=k[z>>2]|0;if(O>>>0>N>>>0){P=7;Q=88;break}k[z>>2]=N-O;k[d>>2]=X;ia=X;ja=k[e>>2]|0}else{ia=ea;ja=fa}X=ja-ia|0;if(X>>>0<21){O=k[z>>2]|0;N=X>>>0>O>>>0?O:X;ib(G|0,(k[b>>2]|0)+ia|0,N|0)|0;k[F>>2]=N;k[d>>2]=(k[d>>2]|0)+N}}N=k[D>>2]|0;X=k[t>>2]|0;O=N-X|0;if((k[m>>2]|0)==0)ka=N;else{if((N|0)==(k[s>>2]|0))k[D>>2]=0;ib((k[n>>2]|0)+(k[o>>2]|0)|0,(k[p>>2]|0)+X|0,O|0)|0;ka=k[D>>2]|0}k[t>>2]=ka;k[o>>2]=(k[o>>2]|0)+O;X=k[u>>2]|0;k[u>>2]=X-O;if((X|0)!=(O|0)){if((k[o>>2]|0)==(k[q>>2]|0)){P=0;Q=88;break}if((k[d>>2]|0)!=(k[e>>2]|0))continue;if((k[F>>2]|0)>>>0<(k[z>>2]|0)>>>0){P=0;Q=88;break}else continue}if((k[z>>2]|0)!=0){P=7;Q=88;break}if((k[K>>2]|0)!=0){P=7;Q=88;break}if((k[x>>2]|0)!=0){P=7;Q=88;break}k[a>>2]=-1;k[x>>2]=0;k[y>>2]=5;k[f>>2]=0}if((Q|0)==88){r=c;return P|0}return 0}function Sa(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;c=r;d=_a(28456)|0;do if((d|0)!=0){e=d+24|0;k[d+60>>2]=a;k[d+52>>2]=b;if((a|0)==2){k[e>>2]=0;k[d+56>>2]=0;f=d;break}else if((a|0)!=1){f=d;break}g=_a(b)|0;k[e>>2]=g;if((g|0)==0){$a(d);f=0}else f=d}else f=0;while(0);r=c;return f|0}function Ta(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;c=r;d=b&255;if((b&255)>39){e=6;r=c;return e|0}b=a+48|0;f=(d&1|2)<<(d>>>1)+11;k[b>>2]=f;d=k[a+60>>2]|0;if((d|0)!=0){if(f>>>0>(k[a+52>>2]|0)>>>0){e=4;r=c;return e|0}k[a+44>>2]=f;if(((d|0)==2?(d=a+56|0,(k[d>>2]|0)>>>0<f>>>0):0)?(f=a+24|0,$a(k[f>>2]|0),g=_a(k[b>>2]|0)|0,k[f>>2]=g,(g|0)==0):0){k[d>>2]=0;e=3;r=c;return e|0}}k[a+104>>2]=0;k[a+64>>2]=0;i[a+80>>0]=1;k[a+28388>>2]=0;e=0;r=c;return e|0}function Ua(a){a=a|0;var b=0;b=r;if((k[a+60>>2]|0)!=0)$a(k[a+24>>2]|0);$a(a);r=b;return}function Va(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0;b=r;c=a+24|0;d=a+32|0;e=k[d>>2]|0;f=a+40|0;g=k[f>>2]|0;if(((e>>>0<g>>>0?(h=a+104|0,n=k[h>>2]|0,(n|0)!=0):0)?(o=k[a+84>>2]|0,p=a+36|0,(k[p>>2]|0)>>>0>o>>>0):0)?(k[a+48>>2]|0)>>>0>o>>>0:0){q=g-e|0;g=q>>>0<n>>>0?q:n;k[h>>2]=n-g;n=e-o+ -1|0;h=a+44|0;if(e>>>0>o>>>0)s=n;else s=(k[h>>2]|0)+n|0;n=k[c>>2]|0;o=i[n+s>>0]|0;k[d>>2]=e+1;i[n+e>>0]=o;o=g+ -1|0;if((o|0)!=0){g=s;s=o;do{o=g+1|0;g=(o|0)==(k[h>>2]|0)?0:o;o=k[d>>2]|0;n=k[c>>2]|0;q=i[n+g>>0]|0;k[d>>2]=o+1;i[n+o>>0]=q;s=s+ -1|0}while((s|0)!=0)}s=k[d>>2]|0;if((k[p>>2]|0)>>>0<s>>>0){k[p>>2]=s;t=s}else t=s}else t=e;a:do if(t>>>0<(k[f>>2]|0)>>>0){e=a+16|0;s=a+20|0;p=a+116|0;g=a+100|0;h=a+4|0;q=a+12|0;o=a+44|0;n=a+36|0;u=a+108|0;v=a+112|0;w=a+24|0;x=a+84|0;y=a+92|0;z=a+96|0;A=a+88|0;B=a+1756|0;C=a+104|0;D=a+48|0;E=a+2784|0;F=t;b:while(1){G=k[e>>2]|0;if(G>>>0>(k[s>>2]|0)>>>0){H=a;break a}I=k[p>>2]&F;J=a+(k[g>>2]<<5)+(I<<1)+120|0;K=k[a>>2]|0;if(K>>>0<16777216){L=K<<8;k[a>>2]=L;M=k[h>>2]<<8;k[e>>2]=G+1;N=l[(k[q>>2]|0)+G>>0]|0|M;k[h>>2]=N;O=L;P=N}else{O=K;P=k[h>>2]|0}K=m[J>>1]|0;N=ia(K,O>>>11)|0;do if(P>>>0<N>>>0){k[a>>2]=N;j[J>>1]=((2048-K|0)>>>5)+K;L=k[d>>2]|0;M=L+ -1|0;if((L|0)==0)Q=(k[o>>2]|0)+M|0;else Q=M;M=(k[n>>2]|0)==0;if(M)R=0;else R=l[(k[w>>2]|0)+Q>>0]|0;G=k[u>>2]|0;S=((k[v>>2]&L)<<G)+(R>>>(8-G|0))|0;if((k[g>>2]|0)>>>0<7){G=k[a>>2]|0;T=1;while(1){U=a+(S*1536|0)+(T<<1)+3812|0;if(G>>>0<16777216){V=G<<8;k[a>>2]=V;W=k[h>>2]<<8;X=k[e>>2]|0;k[e>>2]=X+1;Y=l[(k[q>>2]|0)+X>>0]|0|W;k[h>>2]=Y;Z=V;_=Y}else{Z=G;_=k[h>>2]|0}Y=m[U>>1]|0;V=ia(Y,Z>>>11)|0;if(_>>>0<V>>>0){k[a>>2]=V;$=V;aa=1;ba=(2048-Y>>5)+Y|0}else{W=Z-V|0;k[a>>2]=W;k[h>>2]=_-V;$=W;aa=0;ba=Y-(Y>>>5)|0}j[U>>1]=ba;U=(aa|T<<1)^1;if(U>>>0<256){G=$;T=U}else{ca=U;break}}}else{T=k[x>>2]|0;G=L-T+ -1|0;if(L>>>0>T>>>0)da=G;else da=(k[o>>2]|0)+G|0;if(M){ea=0;fa=256;ga=1}else{ea=l[(k[w>>2]|0)+da>>0]|0;fa=256;ga=1}while(1){ea=ea<<1;G=ea&fa;T=a+(S*1536|0)+(G+fa+ga<<1)+3812|0;U=k[a>>2]|0;if(U>>>0<16777216){Y=U<<8;k[a>>2]=Y;W=k[h>>2]<<8;V=k[e>>2]|0;k[e>>2]=V+1;X=l[(k[q>>2]|0)+V>>0]|0|W;k[h>>2]=X;ha=Y;ja=X}else{ha=U;ja=k[h>>2]|0}U=m[T>>1]|0;X=ia(U,ha>>>11)|0;if(ja>>>0<X>>>0){k[a>>2]=X;ka=1;la=(2048-U>>5)+U|0}else{k[a>>2]=ha-X;k[h>>2]=ja-X;ka=0;la=U-(U>>>5)|0}j[T>>1]=la;T=(ka&1|ga<<1)^1;if(!(T>>>0<256)){ca=T;break}else{fa=(ka?fa:0)^G;ga=T}}}S=k[d>>2]|0;k[d>>2]=S+1;i[(k[w>>2]|0)+S>>0]=ca;S=k[d>>2]|0;if((k[n>>2]|0)>>>0<S>>>0)k[n>>2]=S;M=k[g>>2]|0;if(M>>>0<4){k[g>>2]=0;ma=S;break}if(M>>>0<10){k[g>>2]=M+ -3;ma=S;break}else{k[g>>2]=M+ -6;ma=S;break}}else{k[a>>2]=O-N;k[h>>2]=P-N;j[J>>1]=K-(K>>>5);S=a+(k[g>>2]<<1)+504|0;M=k[a>>2]|0;if(M>>>0<16777216){L=M<<8;k[a>>2]=L;T=k[h>>2]<<8;G=k[e>>2]|0;k[e>>2]=G+1;U=l[(k[q>>2]|0)+G>>0]|0|T;k[h>>2]=U;na=L;oa=U}else{na=M;oa=k[h>>2]|0}M=m[S>>1]|0;U=ia(M,na>>>11)|0;c:do if(oa>>>0<U>>>0){k[a>>2]=U;j[S>>1]=((2048-M|0)>>>5)+M;k[g>>2]=(k[g>>2]|0)>>>0<7?7:10;k[z>>2]=k[y>>2];k[y>>2]=k[A>>2];k[A>>2]=k[x>>2];Wa(a,B,I);L=k[C>>2]|0;T=L>>>0<6?L+ -2|0:3;L=k[a>>2]|0;G=1;while(1){X=a+(T<<7)+(G<<1)+984|0;if(L>>>0<16777216){Y=L<<8;k[a>>2]=Y;W=k[h>>2]<<8;V=k[e>>2]|0;k[e>>2]=V+1;pa=l[(k[q>>2]|0)+V>>0]|0|W;k[h>>2]=pa;qa=Y;ra=pa}else{qa=L;ra=k[h>>2]|0}pa=m[X>>1]|0;Y=ia(pa,qa>>>11)|0;if(ra>>>0<Y>>>0){k[a>>2]=Y;sa=Y;ta=1;ua=(2048-pa>>5)+pa|0}else{W=qa-Y|0;k[a>>2]=W;k[h>>2]=ra-Y;sa=W;ta=0;ua=pa-(pa>>>5)|0}j[X>>1]=ua;G=(ta|G<<1)^1;if(!(G>>>0<64))break;else L=sa}L=G+ -64|0;if(L>>>0<4){k[x>>2]=L;break}T=L>>>1;X=T+ -1|0;pa=L&1|2;k[x>>2]=pa;if(L>>>0<14){L=pa<<X;k[x>>2]=L;W=63-G+L|0;L=0;Y=1;while(1){V=a+(W+Y<<1)+1496|0;va=k[a>>2]|0;if(va>>>0<16777216){wa=va<<8;k[a>>2]=wa;xa=k[h>>2]<<8;ya=k[e>>2]|0;k[e>>2]=ya+1;za=l[(k[q>>2]|0)+ya>>0]|0|xa;k[h>>2]=za;Aa=wa;Ba=za}else{Aa=va;Ba=k[h>>2]|0}va=m[V>>1]|0;za=ia(va,Aa>>>11)|0;if(Ba>>>0<za>>>0){k[a>>2]=za;j[V>>1]=((2048-va|0)>>>5)+va;Ca=Y<<1}else{k[a>>2]=Aa-za;k[h>>2]=Ba-za;j[V>>1]=va-(va>>>5);k[x>>2]=(k[x>>2]|0)+(1<<L);Ca=Y<<1|1}L=L+1|0;if(!(L>>>0<X>>>0))break c;else Y=Ca}}Y=T+ -5|0;X=k[a>>2]|0;L=pa;do{if(X>>>0<16777216){W=X<<8;k[a>>2]=W;G=k[h>>2]<<8;va=k[e>>2]|0;k[e>>2]=va+1;V=l[(k[q>>2]|0)+va>>0]|0|G;k[h>>2]=V;Da=W;Ea=V}else{Da=X;Ea=k[h>>2]|0}X=Da>>>1;k[a>>2]=X;V=Ea-X|0;W=V>>31;k[h>>2]=(W&X)+V;L=W+(L<<1|1)|0;k[x>>2]=L;Y=Y+ -1|0}while((Y|0)!=0);k[x>>2]=L<<4;Y=X;pa=0;T=1;while(1){W=a+(T<<1)+1724|0;if(Y>>>0<16777216){V=Y<<8;k[a>>2]=V;G=k[h>>2]<<8;va=k[e>>2]|0;k[e>>2]=va+1;za=l[(k[q>>2]|0)+va>>0]|0|G;k[h>>2]=za;Fa=V;Ga=za}else{Fa=Y;Ga=k[h>>2]|0}za=m[W>>1]|0;V=ia(za,Fa>>>11)|0;if(Ga>>>0<V>>>0){k[a>>2]=V;j[W>>1]=((2048-za|0)>>>5)+za;Ha=T<<1}else{k[a>>2]=Fa-V;k[h>>2]=Ga-V;j[W>>1]=za-(za>>>5);k[x>>2]=(k[x>>2]|0)+(1<<pa);Ha=T<<1|1}za=pa+1|0;if((za|0)==4)break c;Y=k[a>>2]|0;pa=za;T=Ha}}else{k[a>>2]=na-U;k[h>>2]=oa-U;j[S>>1]=M-(M>>>5);T=a+(k[g>>2]<<1)+528|0;pa=k[a>>2]|0;if(pa>>>0<16777216){Y=pa<<8;k[a>>2]=Y;X=k[h>>2]<<8;L=k[e>>2]|0;k[e>>2]=L+1;za=l[(k[q>>2]|0)+L>>0]|0|X;k[h>>2]=za;Ia=Y;Ja=za}else{Ia=pa;Ja=k[h>>2]|0}pa=m[T>>1]|0;za=ia(pa,Ia>>>11)|0;do if(Ja>>>0<za>>>0){k[a>>2]=za;j[T>>1]=((2048-pa|0)>>>5)+pa;Y=a+(k[g>>2]<<5)+(I<<1)+600|0;X=k[a>>2]|0;if(X>>>0<16777216){L=X<<8;k[a>>2]=L;W=k[h>>2]<<8;V=k[e>>2]|0;k[e>>2]=V+1;G=l[(k[q>>2]|0)+V>>0]|0|W;k[h>>2]=G;Ka=L;La=G}else{Ka=X;La=k[h>>2]|0}X=m[Y>>1]|0;G=ia(X,Ka>>>11)|0;if(La>>>0<G>>>0){k[a>>2]=G;j[Y>>1]=((2048-X|0)>>>5)+X;k[g>>2]=(k[g>>2]|0)>>>0<7?9:11;k[C>>2]=1;break c}else{k[a>>2]=Ka-G;k[h>>2]=La-G;j[Y>>1]=X-(X>>>5);break}}else{k[a>>2]=Ia-za;k[h>>2]=Ja-za;j[T>>1]=pa-(pa>>>5);X=a+(k[g>>2]<<1)+552|0;Y=k[a>>2]|0;if(Y>>>0<16777216){G=Y<<8;k[a>>2]=G;L=k[h>>2]<<8;W=k[e>>2]|0;k[e>>2]=W+1;V=l[(k[q>>2]|0)+W>>0]|0|L;k[h>>2]=V;Ma=G;Na=V}else{Ma=Y;Na=k[h>>2]|0}Y=m[X>>1]|0;V=ia(Y,Ma>>>11)|0;if(Na>>>0<V>>>0){k[a>>2]=V;j[X>>1]=((2048-Y|0)>>>5)+Y;Oa=k[A>>2]|0}else{k[a>>2]=Ma-V;k[h>>2]=Na-V;j[X>>1]=Y-(Y>>>5);Y=a+(k[g>>2]<<1)+576|0;X=k[a>>2]|0;if(X>>>0<16777216){V=X<<8;k[a>>2]=V;G=k[h>>2]<<8;L=k[e>>2]|0;k[e>>2]=L+1;W=l[(k[q>>2]|0)+L>>0]|0|G;k[h>>2]=W;Pa=V;Qa=W}else{Pa=X;Qa=k[h>>2]|0}X=m[Y>>1]|0;W=ia(X,Pa>>>11)|0;if(Qa>>>0<W>>>0){k[a>>2]=W;j[Y>>1]=((2048-X|0)>>>5)+X;Ra=k[y>>2]|0}else{k[a>>2]=Pa-W;k[h>>2]=Qa-W;j[Y>>1]=X-(X>>>5);X=k[z>>2]|0;k[z>>2]=k[y>>2];Ra=X}k[y>>2]=k[A>>2];Oa=Ra}k[A>>2]=k[x>>2];k[x>>2]=Oa}while(0);k[g>>2]=(k[g>>2]|0)>>>0<7?8:11;Wa(a,E,I)}while(0);M=k[x>>2]|0;if(!((k[n>>2]|0)>>>0>M>>>0)){Sa=0;Ta=122;break b}if(!((k[D>>2]|0)>>>0>M>>>0)){Sa=0;Ta=122;break b}S=k[d>>2]|0;U=(k[f>>2]|0)-S|0;pa=k[C>>2]|0;T=U>>>0<pa>>>0?U:pa;k[C>>2]=pa-T;pa=S-M+ -1|0;if(S>>>0>M>>>0)Ua=pa;else Ua=(k[o>>2]|0)+pa|0;pa=k[c>>2]|0;M=i[pa+Ua>>0]|0;k[d>>2]=S+1;i[pa+S>>0]=M;M=T+ -1|0;if((M|0)!=0){T=Ua;S=M;do{M=T+1|0;T=(M|0)==(k[o>>2]|0)?0:M;M=k[d>>2]|0;pa=k[c>>2]|0;U=i[pa+T>>0]|0;k[d>>2]=M+1;i[pa+M>>0]=U;S=S+ -1|0}while((S|0)!=0)}S=k[d>>2]|0;if((k[n>>2]|0)>>>0<S>>>0){k[n>>2]=S;ma=S}else ma=S}while(0);if(ma>>>0<(k[f>>2]|0)>>>0)F=ma;else{H=a;break a}}if((Ta|0)==122){r=b;return Sa|0}}else H=a;while(0);Ta=k[H>>2]|0;if(!(Ta>>>0<16777216)){Sa=1;r=b;return Sa|0}k[H>>2]=Ta<<8;Ta=a+4|0;H=k[Ta>>2]<<8;ma=a+16|0;f=k[ma>>2]|0;k[ma>>2]=f+1;k[Ta>>2]=l[(k[a+12>>2]|0)+f>>0]|0|H;Sa=1;r=b;return Sa|0}function Wa(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;d=r;e=k[a>>2]|0;if(e>>>0<16777216){f=e<<8;k[a>>2]=f;g=a+4|0;h=k[g>>2]<<8;i=a+16|0;n=k[i>>2]|0;k[i>>2]=n+1;i=l[(k[a+12>>2]|0)+n>>0]|0|h;k[g>>2]=i;o=f;p=i}else{o=e;p=k[a+4>>2]|0}e=m[b>>1]|0;i=ia(e,o>>>11)|0;do if(!(p>>>0<i>>>0)){f=a+4|0;g=o-i|0;k[a>>2]=g;h=p-i|0;k[f>>2]=h;j[b>>1]=e-(e>>>5);n=b+2|0;if(g>>>0<16777216){q=g<<8;k[a>>2]=q;s=a+16|0;t=k[s>>2]|0;k[s>>2]=t+1;s=l[(k[a+12>>2]|0)+t>>0]|0|h<<8;k[f>>2]=s;u=q;v=s}else{u=g;v=h}h=m[n>>1]|0;g=ia(h,u>>>11)|0;if(v>>>0<g>>>0){k[a>>2]=g;j[n>>1]=((2048-h|0)>>>5)+h;k[a+104>>2]=10;w=g;x=f;y=10;z=v;A=8;B=b+(c<<4)+260|0;break}else{s=u-g|0;k[a>>2]=s;q=v-g|0;k[f>>2]=q;j[n>>1]=h-(h>>>5);k[a+104>>2]=18;w=s;x=f;y=18;z=q;A=256;B=b+516|0;break}}else{k[a>>2]=i;j[b>>1]=((2048-e|0)>>>5)+e;k[a+104>>2]=2;w=i;x=a+4|0;y=2;z=p;A=8;B=b+(c<<4)+4|0}while(0);c=a+16|0;b=a+12|0;p=z;z=w;w=1;while(1){i=B+(w<<1)|0;if(z>>>0<16777216){e=z<<8;k[a>>2]=e;v=k[c>>2]|0;k[c>>2]=v+1;u=l[(k[b>>2]|0)+v>>0]|0|p<<8;k[x>>2]=u;C=e;D=u}else{C=z;D=p}u=m[i>>1]|0;e=ia(u,C>>>11)|0;if(D>>>0<e>>>0){k[a>>2]=e;E=e;F=D;G=1;H=(2048-u>>5)+u|0}else{v=C-e|0;k[a>>2]=v;o=D-e|0;k[x>>2]=o;E=v;F=o;G=0;H=u-(u>>>5)|0}j[i>>1]=H;w=(G|w<<1)^1;if(!(w>>>0<A>>>0))break;else{p=F;z=E}}k[a+104>>2]=w-A+y;r=d;return}function Xa(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Fa=0,Ha=0;c=r;d=a+36|0;if((k[d>>2]|0)==0){k[a>>2]=0;i[a+40>>0]=0;e=a+4|0;k[e>>2]=0;f=a+24|0;g=f;k[g>>2]=0;k[g+4>>2]=0;g=a+172|0;h=a+72|0;j=h+100|0;do{k[h>>2]=0;h=h+4|0}while((h|0)<(j|0));k[g>>2]=12;m=0;n=e;o=f;p=g}else{m=k[a>>2]|0;n=a+4|0;o=a+24|0;p=a+172|0}g=b+4|0;f=k[g>>2]|0;e=b+16|0;h=k[e>>2]|0;j=a+16|0;k[j>>2]=f;q=b+8|0;s=a+168|0;t=a+176|0;u=a+182|0;v=a+183|0;w=a+32|0;x=a+64|0;y=a+177|0;z=a+48|0;A=a+8|0;B=a+56|0;C=a+1200|0;D=a+72|0;E=a+20|0;F=a+80|0;G=a+96|0;H=a+104|0;I=a+112|0;J=a+88|0;K=b+12|0;L=m;a:while(1){switch(L|0){case 5:{N=64;break};case 3:{N=44;break};case 1:{N=12;break};case 2:{O=k[s>>2]|0;P=k[p>>2]|0;Q=k[b>>2]|0;N=16;break};case 7:{N=90;break a;break};case 8:{N=97;break a;break};case 9:{N=101;break a;break};case 4:{N=58;break};case 6:{N=74;break a;break};case 0:{m=k[g>>2]|0;R=(k[q>>2]|0)-m|0;S=k[s>>2]|0;T=(k[p>>2]|0)-S|0;U=R>>>0<T>>>0?R:T;ib(a+S+176|0,(k[b>>2]|0)+m|0,U|0)|0;k[g>>2]=(k[g>>2]|0)+U;m=(k[s>>2]|0)+U|0;U=(m|0)==(k[p>>2]|0);k[s>>2]=U?0:m;if(!U){V=0;break a}k[a>>2]=1;if((ab(t,3096,6)|0)!=0){V=5;break a}if((i[u>>0]|0)!=0){V=6;break a}U=i[v>>0]|0;k[w>>2]=U&255;if(U<<24>>24==0|U<<24>>24==1|U<<24>>24==4)N=12;else{V=6;break a}break};default:{N=6;break a}}do if((N|0)==12){N=0;U=k[g>>2]|0;if((U|0)==(k[q>>2]|0)){V=0;break a}m=k[b>>2]|0;S=i[m+U>>0]|0;if(S<<24>>24==0){k[g>>2]=U+1;k[j>>2]=U;W=6;break}else{U=((S&255)<<2)+4|0;k[x>>2]=U;k[p>>2]=U;k[s>>2]=0;k[a>>2]=2;O=0;P=U;Q=m;N=16;break}}while(0);if((N|0)==16){N=0;m=k[g>>2]|0;U=(k[q>>2]|0)-m|0;S=P-O|0;T=U>>>0<S>>>0?U:S;ib(a+O+176|0,Q+m|0,T|0)|0;k[g>>2]=T+(k[g>>2]|0);m=(k[s>>2]|0)+T|0;T=(m|0)==(k[p>>2]|0);k[s>>2]=T?0:m;if(!T){V=0;break}T=m+ -4|0;k[p>>2]=T;m=Ea(t,T,0)|0;T=k[p>>2]|0;if((m|0)!=(l[a+(T+1)+176>>0]<<8|l[a+T+176>>0]|l[a+(T+2)+176>>0]<<16|l[a+(T+3)+176>>0]<<24|0)){V=7;break}k[s>>2]=2;m=i[y>>0]|0;S=m&255;if((S&63|0)!=0){V=6;break}if((S&64|0)==0){X=-1;Y=-1;Z=2}else{S=k[n>>2]|0;if((S|0)==0){U=A;k[U>>2]=0;k[U+4>>2]=0;_=2;$=0}else{_=2;$=S}while(1){if(!(_>>>0<T>>>0)){V=7;break a}aa=i[a+_+176>>0]|0;_=_+1|0;k[s>>2]=_;S=aa&255;U=gb(S&127|0,0,$|0)|0;R=A;ba=U|k[R>>2];ca=M|k[R+4>>2];R=A;k[R>>2]=ba;k[R+4>>2]=ca;if((S&128|0)==0)break;S=$+7|0;k[n>>2]=S;if((S|0)==63){V=7;break a}else $=S}if(!(aa<<24>>24!=0|($|0)==0)){V=7;break}k[n>>2]=0;X=ba;Y=ca;Z=_}S=z;k[S>>2]=X;k[S+4>>2]=Y;if(m<<24>>24<0){S=k[n>>2]|0;if((S|0)==0){R=A;k[R>>2]=0;k[R+4>>2]=0;da=Z;ea=0}else{da=Z;ea=S}while(1){if(!(da>>>0<T>>>0)){V=7;break a}fa=i[a+da+176>>0]|0;da=da+1|0;k[s>>2]=da;S=fa&255;R=gb(S&127|0,0,ea|0)|0;U=A;ga=R|k[U>>2];ha=M|k[U+4>>2];U=A;k[U>>2]=ga;k[U+4>>2]=ha;if((S&128|0)==0)break;S=ea+7|0;k[n>>2]=S;if((S|0)==63){V=7;break a}else ea=S}if(!(fa<<24>>24!=0|(ea|0)==0)){V=7;break}k[n>>2]=0;ia=ga;ja=ha;ka=da}else{ia=-1;ja=-1;ka=Z}m=B;k[m>>2]=ia;k[m+4>>2]=ja;if((T-ka|0)>>>0<2){V=7;break}m=ka+1|0;k[s>>2]=m;if((i[a+ka+176>>0]|0)!=33){V=6;break}S=ka+2|0;k[s>>2]=S;if((i[a+m+176>>0]|0)!=1){V=6;break}if((T|0)==(S|0)){V=7;break}m=k[C>>2]|0;k[s>>2]=ka+3;U=Ta(m,i[a+S+176>>0]|0)|0;if((U|0)!=0){V=U;break}U=k[p>>2]|0;S=k[s>>2]|0;while(1){if(!(S>>>0<U>>>0))break;m=S;S=S+1|0;k[s>>2]=S;if((i[a+m+176>>0]|0)!=0){V=6;break a}}k[s>>2]=0;k[D+0>>2]=0;k[D+4>>2]=0;k[D+8>>2]=0;k[D+12>>2]=0;k[a>>2]=3;N=44}if((N|0)==44){N=0;k[j>>2]=k[g>>2];k[E>>2]=k[e>>2];S=Ra(k[C>>2]|0,b)|0;U=D;T=db((k[g>>2]|0)-(k[j>>2]|0)|0,0,k[U>>2]|0,k[U+4>>2]|0)|0;U=M;m=D;k[m>>2]=T;k[m+4>>2]=U;m=k[E>>2]|0;R=(k[e>>2]|0)-m|0;la=F;ma=db(R|0,0,k[la>>2]|0,k[la+4>>2]|0)|0;la=M;na=F;k[na>>2]=ma;k[na+4>>2]=la;na=z;oa=k[na+4>>2]|0;if(U>>>0>oa>>>0|((U|0)==(oa|0)?T>>>0>(k[na>>2]|0)>>>0:0)){V=7;break}na=B;T=k[na+4>>2]|0;if(la>>>0>T>>>0|((la|0)==(T|0)?ma>>>0>(k[na>>2]|0)>>>0:0)){V=7;break}na=k[w>>2]|0;if((na|0)==1){ma=Ea((k[K>>2]|0)+m|0,R,k[o>>2]|0)|0;T=o;k[T>>2]=ma;k[T+4>>2]=0}else if((na|0)==4){na=o;T=Ga((k[K>>2]|0)+m|0,R,k[na>>2]|0,k[na+4>>2]|0)|0;na=o;k[na>>2]=T;k[na+4>>2]=M}if((S|0)!=1){V=S;break}S=z;na=k[S>>2]|0;T=k[S+4>>2]|0;if(!((na|0)==-1&(T|0)==-1)?(S=D,!((na|0)==(k[S>>2]|0)?(T|0)==(k[S+4>>2]|0):0)):0){V=7;break}S=B;T=k[S>>2]|0;na=k[S+4>>2]|0;if(!((T|0)==-1&(na|0)==-1)?(S=F,!((T|0)==(k[S>>2]|0)?(na|0)==(k[S+4>>2]|0):0)):0){V=7;break}S=D;na=db(k[x>>2]|0,0,k[S>>2]|0,k[S+4>>2]|0)|0;S=G;T=db(na|0,M|0,k[S>>2]|0,k[S+4>>2]|0)|0;S=M;na=G;k[na>>2]=T;k[na+4>>2]=S;na=k[w>>2]|0;if((na|0)==1){R=db(T|0,S|0,4,0)|0;m=G;k[m>>2]=R;k[m+4>>2]=M}else if((na|0)==4){na=db(T|0,S|0,8,0)|0;S=G;k[S>>2]=na;k[S+4>>2]=M}S=F;na=H;T=db(k[na>>2]|0,k[na+4>>2]|0,k[S>>2]|0,k[S+4>>2]|0)|0;S=H;k[S>>2]=T;k[S+4>>2]=M;S=Ea(G,24,k[I>>2]|0)|0;k[I>>2]=S;S=J;T=db(k[S>>2]|0,k[S+4>>2]|0,1,0)|0;S=J;k[S>>2]=T;k[S+4>>2]=M;k[a>>2]=4;N=58}if((N|0)==58){N=0;S=D;T=k[S>>2]|0;if(!((T&3|0)==0&0==0)){na=k[q>>2]|0;m=k[g>>2]|0;R=T;T=k[S+4>>2]|0;do{if((m|0)==(na|0)){V=0;break a}S=m;m=m+1|0;k[g>>2]=m;if((i[(k[b>>2]|0)+S>>0]|0)!=0){V=7;break a}R=db(R|0,T|0,1,0)|0;T=M;S=D;k[S>>2]=R;k[S+4>>2]=T}while(!((R&3|0)==0&0==0))}k[a>>2]=5;N=64}do if((N|0)==64){N=0;R=k[w>>2]|0;if((R|0)==1){do{T=k[g>>2]|0;if((T|0)==(k[q>>2]|0)){V=0;break a}m=o;na=fb(k[m>>2]|0,k[m+4>>2]|0,k[n>>2]|0)|0;k[g>>2]=T+1;if(!((i[(k[b>>2]|0)+T>>0]|0)==(na&255)<<24>>24)){V=7;break a}na=(k[n>>2]|0)+8|0;k[n>>2]=na}while(na>>>0<32);na=o;k[na>>2]=0;k[na+4>>2]=0;k[n>>2]=0;W=1;break}else if((R|0)==4){do{na=k[g>>2]|0;if((na|0)==(k[q>>2]|0)){V=0;break a}T=o;m=fb(k[T>>2]|0,k[T+4>>2]|0,k[n>>2]|0)|0;k[g>>2]=na+1;if(!((i[(k[b>>2]|0)+na>>0]|0)==(m&255)<<24>>24)){V=7;break a}m=(k[n>>2]|0)+8|0;k[n>>2]=m}while(m>>>0<64);R=o;k[R>>2]=0;k[R+4>>2]=0;k[n>>2]=0;W=1;break}else{W=1;break}}while(0);k[a>>2]=W;L=W}b:do if((N|0)==6)while(1){N=0;N=6}else if((N|0)==74){W=a+120|0;L=a+136|0;D=a+144|0;I=a+144|0;H=a+152|0;F=a+160|0;c:while(1){pa=k[b>>2]|0;x=k[q>>2]|0;if((k[n>>2]|0)==0){B=A;k[B>>2]=0;k[B+4>>2]=0}while(1){B=k[g>>2]|0;if(!(B>>>0<x>>>0)){qa=0;ra=B;break c}sa=i[pa+B>>0]|0;ta=B+1|0;k[g>>2]=ta;B=sa&255;ua=k[n>>2]|0;z=gb(B&127|0,0,ua|0)|0;K=A;va=z|k[K>>2];wa=M|k[K+4>>2];K=A;k[K>>2]=va;k[K+4>>2]=wa;if((B&128|0)==0)break;B=ua+7|0;k[n>>2]=B;if((B|0)==63){N=81;break c}}if(!(sa<<24>>24!=0|(ua|0)==0)){qa=7;ra=ta;break}k[n>>2]=0;x=k[W>>2]|0;if((x|0)==0){B=L;k[B>>2]=va;k[B+4>>2]=wa;B=J;if(!((va|0)==(k[B>>2]|0)?(wa|0)==(k[B+4>>2]|0):0)){V=7;break b}k[W>>2]=1}else if((x|0)==2){B=H;K=db(k[B>>2]|0,k[B+4>>2]|0,va|0,wa|0)|0;B=H;k[B>>2]=K;k[B+4>>2]=M;B=Ea(I,24,k[F>>2]|0)|0;k[F>>2]=B;B=L;K=db(k[B>>2]|0,k[B+4>>2]|0,-1,-1)|0;B=L;k[B>>2]=K;k[B+4>>2]=M;k[W>>2]=1}else if((x|0)==1){x=D;B=db(k[x>>2]|0,k[x+4>>2]|0,va|0,wa|0)|0;x=D;k[x>>2]=B;k[x+4>>2]=M;k[W>>2]=2}x=L;if((k[x>>2]|0)==0&(k[x+4>>2]|0)==0){N=89;break}}if((N|0)==81){qa=7;ra=k[g>>2]|0}else if((N|0)==89){k[a>>2]=7;N=90;break}L=k[j>>2]|0;W=ra-L|0;D=a+128|0;F=D;I=db(W|0,0,k[F>>2]|0,k[F+4>>2]|0)|0;F=D;k[F>>2]=I;k[F+4>>2]=M;F=Ea(pa+L|0,W,k[o>>2]|0)|0;W=o;k[W>>2]=F;k[W+4>>2]=0;V=qa}else if((N|0)==101){xa=k[p>>2]|0;ya=k[b>>2]|0;N=102}while(0);d:do if((N|0)==90){qa=a+128|0;pa=qa;ra=k[pa>>2]|0;wa=k[pa+4>>2]|0;pa=k[g>>2]|0;while(1){za=k[j>>2]|0;Aa=pa-za|0;Ba=db(Aa|0,0,ra|0,wa|0)|0;Ca=M;if((Ba&3|0)==0&0==0)break;if((pa|0)==(k[q>>2]|0)){N=93;break}va=pa;pa=pa+1|0;k[g>>2]=pa;if((i[(k[b>>2]|0)+va>>0]|0)!=0){V=7;break d}}if((N|0)==93){pa=k[b>>2]|0;wa=qa;k[wa>>2]=Ba;k[wa+4>>2]=Ca;wa=Ea(pa+za|0,Aa,k[o>>2]|0)|0;pa=o;k[pa>>2]=wa;k[pa+4>>2]=0;V=0;break}pa=k[b>>2]|0;wa=qa;k[wa>>2]=Ba;k[wa+4>>2]=Ca;wa=Ea(pa+za|0,Aa,k[o>>2]|0)|0;pa=o;k[pa>>2]=wa;k[pa+4>>2]=0;if((ab(G,a+144|0,24)|0)==0){k[a>>2]=8;N=97}else V=7}while(0);e:do if((N|0)==97){while(1){N=0;G=k[g>>2]|0;if((G|0)==(k[q>>2]|0)){V=0;break e}Aa=o;za=fb(k[Aa>>2]|0,k[Aa+4>>2]|0,k[n>>2]|0)|0;k[g>>2]=G+1;Da=k[b>>2]|0;if(!((i[Da+G>>0]|0)==(za&255)<<24>>24)){V=7;break e}za=(k[n>>2]|0)+8|0;k[n>>2]=za;if(za>>>0<32)N=97;else break}qa=o;k[qa>>2]=0;k[qa+4>>2]=0;k[n>>2]=0;k[p>>2]=12;k[a>>2]=9;xa=12;ya=Da;N=102}while(0);if((N|0)==102){N=k[g>>2]|0;Da=(k[q>>2]|0)-N|0;n=k[s>>2]|0;o=xa-n|0;xa=Da>>>0<o>>>0?Da:o;ib(a+n+176|0,ya+N|0,xa|0)|0;k[g>>2]=xa+(k[g>>2]|0);N=(k[s>>2]|0)+xa|0;xa=(N|0)==(k[p>>2]|0);k[s>>2]=xa?0:N;if(xa)if((((ab(a+186|0,3088,2)|0)==0?(xa=a+180|0,N=Ea(xa,6,0)|0,(N|0)==(l[y>>0]<<8|l[t>>0]|l[a+178>>0]<<16|l[a+179>>0]<<24|0)):0)?(t=a+128|0,y=fb(k[t>>2]|0,k[t+4>>2]|0,2)|0,(M|0)==0?(y|0)==(l[a+181>>0]<<8|l[xa>>0]|l[u>>0]<<16|l[v>>0]<<24|0):0):0)?(i[a+184>>0]|0)==0:0)V=(l[a+185>>0]|0)==(k[w>>2]|0)?1:7;else V=7;else V=0}w=(V|0)==0;if((k[d>>2]|0)==0){if(!w)if((V|0)==1){Fa=1;r=c;return Fa|0}else Ha=V;else Ha=(k[g>>2]|0)==(k[q>>2]|0)?7:8;k[g>>2]=f;k[e>>2]=h;Fa=Ha;r=c;return Fa|0}if((w?(f|0)==(k[g>>2]|0):0)?(h|0)==(k[e>>2]|0):0){e=a+40|0;h=(i[e>>0]|0)==0?0:8;i[e>>0]=1;Fa=h;r=c;return Fa|0}i[a+40>>0]=0;Fa=V;r=c;return Fa|0}function Ya(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;c=r;d=_a(1208)|0;if((d|0)==0){e=0;r=c;return e|0}k[d+36>>2]=a;f=Sa(a,b)|0;k[d+1200>>2]=f;if((f|0)==0){$a(d);e=0;r=c;return e|0}else{k[d>>2]=0;i[d+40>>0]=0;k[d+4>>2]=0;f=d+24|0;k[f>>2]=0;k[f+4>>2]=0;f=d+172|0;b=d+72|0;a=b+100|0;do{k[b>>2]=0;b=b+4|0}while((b|0)<(a|0));k[f>>2]=12;e=d;r=c;return e|0}return 0}function Za(a){a=a|0;var b=0;b=r;if((a|0)==0){r=b;return}Ua(k[a+1200>>2]|0);$a(a);r=b;return}function _a(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,oa=0,ra=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0;b=r;do if(a>>>0<245){if(a>>>0<11)c=16;else c=a+11&-8;d=c>>>3;e=k[776]|0;f=e>>>d;if((f&3|0)!=0){g=(f&1^1)+d|0;h=g<<1;i=3144+(h<<2)|0;j=3144+(h+2<<2)|0;h=k[j>>2]|0;l=h+8|0;m=k[l>>2]|0;do if((i|0)!=(m|0)){if(m>>>0<(k[780]|0)>>>0)na();n=m+12|0;if((k[n>>2]|0)==(h|0)){k[n>>2]=i;k[j>>2]=m;break}else na()}else k[776]=e&~(1<<g);while(0);m=g<<3;k[h+4>>2]=m|3;j=h+(m|4)|0;k[j>>2]=k[j>>2]|1;o=l;r=b;return o|0}if(c>>>0>(k[778]|0)>>>0){if((f|0)!=0){j=2<<d;m=f<<d&(j|0-j);j=(m&0-m)+ -1|0;m=j>>>12&16;i=j>>>m;j=i>>>5&8;n=i>>>j;i=n>>>2&4;p=n>>>i;n=p>>>1&2;q=p>>>n;p=q>>>1&1;s=(j|m|i|n|p)+(q>>>p)|0;p=s<<1;q=3144+(p<<2)|0;n=3144+(p+2<<2)|0;p=k[n>>2]|0;i=p+8|0;m=k[i>>2]|0;do if((q|0)!=(m|0)){if(m>>>0<(k[780]|0)>>>0)na();j=m+12|0;if((k[j>>2]|0)==(p|0)){k[j>>2]=q;k[n>>2]=m;break}else na()}else k[776]=e&~(1<<s);while(0);e=s<<3;m=e-c|0;k[p+4>>2]=c|3;n=p+c|0;k[p+(c|4)>>2]=m|1;k[p+e>>2]=m;e=k[778]|0;if((e|0)!=0){q=k[781]|0;d=e>>>3;e=d<<1;f=3144+(e<<2)|0;l=k[776]|0;h=1<<d;if((l&h|0)!=0){d=3144+(e+2<<2)|0;g=k[d>>2]|0;if(g>>>0<(k[780]|0)>>>0)na();else{t=d;u=g}}else{k[776]=l|h;t=3144+(e+2<<2)|0;u=f}k[t>>2]=q;k[u+12>>2]=q;k[q+8>>2]=u;k[q+12>>2]=f}k[778]=m;k[781]=n;o=i;r=b;return o|0}n=k[777]|0;if((n|0)!=0){m=(n&0-n)+ -1|0;n=m>>>12&16;f=m>>>n;m=f>>>5&8;q=f>>>m;f=q>>>2&4;e=q>>>f;q=e>>>1&2;h=e>>>q;e=h>>>1&1;l=k[3408+((m|n|f|q|e)+(h>>>e)<<2)>>2]|0;e=(k[l+4>>2]&-8)-c|0;h=l;q=l;while(1){l=k[h+16>>2]|0;if((l|0)==0){f=k[h+20>>2]|0;if((f|0)==0)break;else v=f}else v=l;l=(k[v+4>>2]&-8)-c|0;f=l>>>0<e>>>0;e=f?l:e;h=v;q=f?v:q}h=k[780]|0;if(q>>>0<h>>>0)na();i=q+c|0;if(!(q>>>0<i>>>0))na();p=k[q+24>>2]|0;s=k[q+12>>2]|0;do if((s|0)==(q|0)){f=q+20|0;l=k[f>>2]|0;if((l|0)==0){n=q+16|0;m=k[n>>2]|0;if((m|0)==0){w=0;break}else{x=m;y=n}}else{x=l;y=f}while(1){f=x+20|0;l=k[f>>2]|0;if((l|0)!=0){x=l;y=f;continue}f=x+16|0;l=k[f>>2]|0;if((l|0)==0)break;else{x=l;y=f}}if(y>>>0<h>>>0)na();else{k[y>>2]=0;w=x;break}}else{f=k[q+8>>2]|0;if(f>>>0<h>>>0)na();l=f+12|0;if((k[l>>2]|0)!=(q|0))na();n=s+8|0;if((k[n>>2]|0)==(q|0)){k[l>>2]=s;k[n>>2]=f;w=s;break}else na()}while(0);do if((p|0)!=0){s=k[q+28>>2]|0;h=3408+(s<<2)|0;if((q|0)==(k[h>>2]|0)){k[h>>2]=w;if((w|0)==0){k[777]=k[777]&~(1<<s);break}}else{if(p>>>0<(k[780]|0)>>>0)na();s=p+16|0;if((k[s>>2]|0)==(q|0))k[s>>2]=w;else k[p+20>>2]=w;if((w|0)==0)break}if(w>>>0<(k[780]|0)>>>0)na();k[w+24>>2]=p;s=k[q+16>>2]|0;do if((s|0)!=0)if(s>>>0<(k[780]|0)>>>0)na();else{k[w+16>>2]=s;k[s+24>>2]=w;break}while(0);s=k[q+20>>2]|0;if((s|0)!=0)if(s>>>0<(k[780]|0)>>>0)na();else{k[w+20>>2]=s;k[s+24>>2]=w;break}}while(0);if(e>>>0<16){p=e+c|0;k[q+4>>2]=p|3;s=q+(p+4)|0;k[s>>2]=k[s>>2]|1}else{k[q+4>>2]=c|3;k[q+(c|4)>>2]=e|1;k[q+(e+c)>>2]=e;s=k[778]|0;if((s|0)!=0){p=k[781]|0;h=s>>>3;s=h<<1;f=3144+(s<<2)|0;n=k[776]|0;l=1<<h;if((n&l|0)!=0){h=3144+(s+2<<2)|0;m=k[h>>2]|0;if(m>>>0<(k[780]|0)>>>0)na();else{z=h;A=m}}else{k[776]=n|l;z=3144+(s+2<<2)|0;A=f}k[z>>2]=p;k[A+12>>2]=p;k[p+8>>2]=A;k[p+12>>2]=f}k[778]=e;k[781]=i}o=q+8|0;r=b;return o|0}else B=c}else B=c}else if(!(a>>>0>4294967231)){f=a+11|0;p=f&-8;s=k[777]|0;if((s|0)!=0){l=0-p|0;n=f>>>8;if((n|0)!=0)if(p>>>0>16777215)C=31;else{f=(n+1048320|0)>>>16&8;m=n<<f;n=(m+520192|0)>>>16&4;h=m<<n;m=(h+245760|0)>>>16&2;g=14-(n|f|m)+(h<<m>>>15)|0;C=p>>>(g+7|0)&1|g<<1}else C=0;g=k[3408+(C<<2)>>2]|0;a:do if((g|0)==0){D=l;E=0;F=0}else{if((C|0)==31)G=0;else G=25-(C>>>1)|0;m=l;h=0;f=p<<G;n=g;d=0;while(1){j=k[n+4>>2]&-8;H=j-p|0;if(H>>>0<m>>>0)if((j|0)==(p|0)){D=H;E=n;F=n;break a}else{I=H;J=n}else{I=m;J=d}H=k[n+20>>2]|0;n=k[n+(f>>>31<<2)+16>>2]|0;j=(H|0)==0|(H|0)==(n|0)?h:H;if((n|0)==0){D=I;E=j;F=J;break}else{m=I;h=j;f=f<<1;d=J}}}while(0);if((E|0)==0&(F|0)==0){g=2<<C;l=s&(g|0-g);if((l|0)==0){B=p;break}g=(l&0-l)+ -1|0;l=g>>>12&16;q=g>>>l;g=q>>>5&8;i=q>>>g;q=i>>>2&4;e=i>>>q;i=e>>>1&2;d=e>>>i;e=d>>>1&1;K=k[3408+((g|l|q|i|e)+(d>>>e)<<2)>>2]|0}else K=E;if((K|0)==0){L=D;M=F}else{e=D;d=K;i=F;while(1){q=(k[d+4>>2]&-8)-p|0;l=q>>>0<e>>>0;g=l?q:e;q=l?d:i;l=k[d+16>>2]|0;if((l|0)!=0){e=g;d=l;i=q;continue}d=k[d+20>>2]|0;if((d|0)==0){L=g;M=q;break}else{e=g;i=q}}}if((M|0)!=0?L>>>0<((k[778]|0)-p|0)>>>0:0){i=k[780]|0;if(M>>>0<i>>>0)na();e=M+p|0;if(!(M>>>0<e>>>0))na();d=k[M+24>>2]|0;s=k[M+12>>2]|0;do if((s|0)==(M|0)){q=M+20|0;g=k[q>>2]|0;if((g|0)==0){l=M+16|0;f=k[l>>2]|0;if((f|0)==0){N=0;break}else{O=f;P=l}}else{O=g;P=q}while(1){q=O+20|0;g=k[q>>2]|0;if((g|0)!=0){O=g;P=q;continue}q=O+16|0;g=k[q>>2]|0;if((g|0)==0)break;else{O=g;P=q}}if(P>>>0<i>>>0)na();else{k[P>>2]=0;N=O;break}}else{q=k[M+8>>2]|0;if(q>>>0<i>>>0)na();g=q+12|0;if((k[g>>2]|0)!=(M|0))na();l=s+8|0;if((k[l>>2]|0)==(M|0)){k[g>>2]=s;k[l>>2]=q;N=s;break}else na()}while(0);do if((d|0)!=0){s=k[M+28>>2]|0;i=3408+(s<<2)|0;if((M|0)==(k[i>>2]|0)){k[i>>2]=N;if((N|0)==0){k[777]=k[777]&~(1<<s);break}}else{if(d>>>0<(k[780]|0)>>>0)na();s=d+16|0;if((k[s>>2]|0)==(M|0))k[s>>2]=N;else k[d+20>>2]=N;if((N|0)==0)break}if(N>>>0<(k[780]|0)>>>0)na();k[N+24>>2]=d;s=k[M+16>>2]|0;do if((s|0)!=0)if(s>>>0<(k[780]|0)>>>0)na();else{k[N+16>>2]=s;k[s+24>>2]=N;break}while(0);s=k[M+20>>2]|0;if((s|0)!=0)if(s>>>0<(k[780]|0)>>>0)na();else{k[N+20>>2]=s;k[s+24>>2]=N;break}}while(0);b:do if(!(L>>>0<16)){k[M+4>>2]=p|3;k[M+(p|4)>>2]=L|1;k[M+(L+p)>>2]=L;d=L>>>3;if(L>>>0<256){s=d<<1;i=3144+(s<<2)|0;q=k[776]|0;l=1<<d;do if((q&l|0)==0){k[776]=q|l;Q=3144+(s+2<<2)|0;R=i}else{d=3144+(s+2<<2)|0;g=k[d>>2]|0;if(!(g>>>0<(k[780]|0)>>>0)){Q=d;R=g;break}na()}while(0);k[Q>>2]=e;k[R+12>>2]=e;k[M+(p+8)>>2]=R;k[M+(p+12)>>2]=i;break}s=L>>>8;if((s|0)!=0)if(L>>>0>16777215)S=31;else{l=(s+1048320|0)>>>16&8;q=s<<l;s=(q+520192|0)>>>16&4;g=q<<s;q=(g+245760|0)>>>16&2;d=14-(s|l|q)+(g<<q>>>15)|0;S=L>>>(d+7|0)&1|d<<1}else S=0;d=3408+(S<<2)|0;k[M+(p+28)>>2]=S;k[M+(p+20)>>2]=0;k[M+(p+16)>>2]=0;q=k[777]|0;g=1<<S;if((q&g|0)==0){k[777]=q|g;k[d>>2]=e;k[M+(p+24)>>2]=d;k[M+(p+12)>>2]=e;k[M+(p+8)>>2]=e;break}g=k[d>>2]|0;if((S|0)==31)T=0;else T=25-(S>>>1)|0;c:do if((k[g+4>>2]&-8|0)!=(L|0)){d=L<<T;q=g;while(1){U=q+(d>>>31<<2)+16|0;l=k[U>>2]|0;if((l|0)==0)break;if((k[l+4>>2]&-8|0)==(L|0)){V=l;break c}else{d=d<<1;q=l}}if(U>>>0<(k[780]|0)>>>0)na();else{k[U>>2]=e;k[M+(p+24)>>2]=q;k[M+(p+12)>>2]=e;k[M+(p+8)>>2]=e;break b}}else V=g;while(0);g=V+8|0;i=k[g>>2]|0;d=k[780]|0;if(V>>>0<d>>>0)na();if(i>>>0<d>>>0)na();else{k[i+12>>2]=e;k[g>>2]=e;k[M+(p+8)>>2]=i;k[M+(p+12)>>2]=V;k[M+(p+24)>>2]=0;break}}else{i=L+p|0;k[M+4>>2]=i|3;g=M+(i+4)|0;k[g>>2]=k[g>>2]|1}while(0);o=M+8|0;r=b;return o|0}else B=p}else B=p}else B=-1;while(0);M=k[778]|0;if(!(B>>>0>M>>>0)){L=M-B|0;V=k[781]|0;if(L>>>0>15){k[781]=V+B;k[778]=L;k[V+(B+4)>>2]=L|1;k[V+M>>2]=L;k[V+4>>2]=B|3}else{k[778]=0;k[781]=0;k[V+4>>2]=M|3;L=V+(M+4)|0;k[L>>2]=k[L>>2]|1}o=V+8|0;r=b;return o|0}V=k[779]|0;if(B>>>0<V>>>0){L=V-B|0;k[779]=L;V=k[782]|0;k[782]=V+B;k[V+(B+4)>>2]=L|1;k[V+4>>2]=B|3;o=V+8|0;r=b;return o|0}do if((k[894]|0)==0){V=sa(30)|0;if((V+ -1&V|0)==0){k[896]=V;k[895]=V;k[897]=-1;k[898]=-1;k[899]=0;k[887]=0;V=(qa(0)|0)&-16^1431655768;k[894]=V;break}else na()}while(0);V=B+48|0;L=k[896]|0;M=B+47|0;U=L+M|0;T=0-L|0;L=U&T;if(!(L>>>0>B>>>0)){o=0;r=b;return o|0}S=k[886]|0;if((S|0)!=0?(R=k[884]|0,Q=R+L|0,Q>>>0<=R>>>0|Q>>>0>S>>>0):0){o=0;r=b;return o|0}d:do if((k[887]&4|0)==0){S=k[782]|0;e:do if((S|0)!=0){Q=3552|0;while(1){R=k[Q>>2]|0;if(!(R>>>0>S>>>0)?(W=Q+4|0,(R+(k[W>>2]|0)|0)>>>0>S>>>0):0)break;R=k[Q+8>>2]|0;if((R|0)==0){X=182;break e}else Q=R}if((Q|0)!=0){R=U-(k[779]|0)&T;if(R>>>0<2147483647){N=pa(R|0)|0;O=(N|0)==((k[Q>>2]|0)+(k[W>>2]|0)|0);Y=N;Z=R;_=O?N:-1;$=O?R:0;X=191}else aa=0}else X=182}else X=182;while(0);do if((X|0)==182){S=pa(0)|0;if((S|0)!=(-1|0)){p=S;R=k[895]|0;O=R+ -1|0;if((O&p|0)==0)ba=L;else ba=L-p+(O+p&0-R)|0;R=k[884]|0;p=R+ba|0;if(ba>>>0>B>>>0&ba>>>0<2147483647){O=k[886]|0;if((O|0)!=0?p>>>0<=R>>>0|p>>>0>O>>>0:0){aa=0;break}O=pa(ba|0)|0;p=(O|0)==(S|0);Y=O;Z=ba;_=p?S:-1;$=p?ba:0;X=191}else aa=0}else aa=0}while(0);f:do if((X|0)==191){p=0-Z|0;if((_|0)!=(-1|0)){ca=_;da=$;X=202;break d}do if((Y|0)!=(-1|0)&Z>>>0<2147483647&Z>>>0<V>>>0?(S=k[896]|0,O=M-Z+S&0-S,O>>>0<2147483647):0)if((pa(O|0)|0)==(-1|0)){pa(p|0)|0;aa=$;break f}else{ea=O+Z|0;break}else ea=Z;while(0);if((Y|0)==(-1|0))aa=$;else{ca=Y;da=ea;X=202;break d}}while(0);k[887]=k[887]|4;fa=aa;X=199}else{fa=0;X=199}while(0);if((((X|0)==199?L>>>0<2147483647:0)?(aa=pa(L|0)|0,L=pa(0)|0,(L|0)!=(-1|0)&(aa|0)!=(-1|0)&aa>>>0<L>>>0):0)?(ea=L-aa|0,L=ea>>>0>(B+40|0)>>>0,L):0){ca=aa;da=L?ea:fa;X=202}if((X|0)==202){fa=(k[884]|0)+da|0;k[884]=fa;if(fa>>>0>(k[885]|0)>>>0)k[885]=fa;fa=k[782]|0;g:do if((fa|0)!=0){ea=3552|0;while(1){ga=k[ea>>2]|0;ha=ea+4|0;ia=k[ha>>2]|0;if((ca|0)==(ga+ia|0)){X=214;break}L=k[ea+8>>2]|0;if((L|0)==0)break;else ea=L}if(((X|0)==214?(k[ea+12>>2]&8|0)==0:0)?fa>>>0>=ga>>>0&fa>>>0<ca>>>0:0){k[ha>>2]=ia+da;L=(k[779]|0)+da|0;aa=fa+8|0;if((aa&7|0)==0)ja=0;else ja=0-aa&7;aa=L-ja|0;k[782]=fa+ja;k[779]=aa;k[fa+(ja+4)>>2]=aa|1;k[fa+(L+4)>>2]=40;k[783]=k[898];break}if(ca>>>0<(k[780]|0)>>>0)k[780]=ca;L=ca+da|0;aa=3552|0;while(1){if((k[aa>>2]|0)==(L|0)){X=224;break}Y=k[aa+8>>2]|0;if((Y|0)==0)break;else aa=Y}if((X|0)==224?(k[aa+12>>2]&8|0)==0:0){k[aa>>2]=ca;L=aa+4|0;k[L>>2]=(k[L>>2]|0)+da;L=ca+8|0;if((L&7|0)==0)ka=0;else ka=0-L&7;L=ca+(da+8)|0;if((L&7|0)==0)la=0;else la=0-L&7;L=ca+(la+da)|0;ea=ka+B|0;Y=ca+ea|0;$=L-(ca+ka)-B|0;k[ca+(ka+4)>>2]=B|3;h:do if((L|0)!=(k[782]|0)){if((L|0)==(k[781]|0)){Z=(k[778]|0)+$|0;k[778]=Z;k[781]=Y;k[ca+(ea+4)>>2]=Z|1;k[ca+(Z+ea)>>2]=Z;break}Z=da+4|0;M=k[ca+(Z+la)>>2]|0;if((M&3|0)==1){V=M&-8;_=M>>>3;i:do if(!(M>>>0<256)){ba=k[ca+((la|24)+da)>>2]|0;W=k[ca+(da+12+la)>>2]|0;do if((W|0)==(L|0)){T=la|16;U=ca+(Z+T)|0;p=k[U>>2]|0;if((p|0)==0){Q=ca+(T+da)|0;T=k[Q>>2]|0;if((T|0)==0){ma=0;break}else{oa=T;ra=Q}}else{oa=p;ra=U}while(1){U=oa+20|0;p=k[U>>2]|0;if((p|0)!=0){oa=p;ra=U;continue}U=oa+16|0;p=k[U>>2]|0;if((p|0)==0)break;else{oa=p;ra=U}}if(ra>>>0<(k[780]|0)>>>0)na();else{k[ra>>2]=0;ma=oa;break}}else{U=k[ca+((la|8)+da)>>2]|0;if(U>>>0<(k[780]|0)>>>0)na();p=U+12|0;if((k[p>>2]|0)!=(L|0))na();Q=W+8|0;if((k[Q>>2]|0)==(L|0)){k[p>>2]=W;k[Q>>2]=U;ma=W;break}else na()}while(0);if((ba|0)==0)break;W=k[ca+(da+28+la)>>2]|0;q=3408+(W<<2)|0;do if((L|0)!=(k[q>>2]|0)){if(ba>>>0<(k[780]|0)>>>0)na();U=ba+16|0;if((k[U>>2]|0)==(L|0))k[U>>2]=ma;else k[ba+20>>2]=ma;if((ma|0)==0)break i}else{k[q>>2]=ma;if((ma|0)!=0)break;k[777]=k[777]&~(1<<W);break i}while(0);if(ma>>>0<(k[780]|0)>>>0)na();k[ma+24>>2]=ba;W=la|16;q=k[ca+(W+da)>>2]|0;do if((q|0)!=0)if(q>>>0<(k[780]|0)>>>0)na();else{k[ma+16>>2]=q;k[q+24>>2]=ma;break}while(0);q=k[ca+(Z+W)>>2]|0;if((q|0)==0)break;if(q>>>0<(k[780]|0)>>>0)na();else{k[ma+20>>2]=q;k[q+24>>2]=ma;break}}else{q=k[ca+((la|8)+da)>>2]|0;ba=k[ca+(da+12+la)>>2]|0;U=3144+(_<<1<<2)|0;do if((q|0)!=(U|0)){if(q>>>0<(k[780]|0)>>>0)na();if((k[q+12>>2]|0)==(L|0))break;na()}while(0);if((ba|0)==(q|0)){k[776]=k[776]&~(1<<_);break}do if((ba|0)==(U|0))ua=ba+8|0;else{if(ba>>>0<(k[780]|0)>>>0)na();W=ba+8|0;if((k[W>>2]|0)==(L|0)){ua=W;break}na()}while(0);k[q+12>>2]=ba;k[ua>>2]=q}while(0);va=ca+((V|la)+da)|0;wa=V+$|0}else{va=L;wa=$}_=va+4|0;k[_>>2]=k[_>>2]&-2;k[ca+(ea+4)>>2]=wa|1;k[ca+(wa+ea)>>2]=wa;_=wa>>>3;if(wa>>>0<256){Z=_<<1;M=3144+(Z<<2)|0;U=k[776]|0;W=1<<_;do if((U&W|0)==0){k[776]=U|W;xa=3144+(Z+2<<2)|0;ya=M}else{_=3144+(Z+2<<2)|0;Q=k[_>>2]|0;if(!(Q>>>0<(k[780]|0)>>>0)){xa=_;ya=Q;break}na()}while(0);k[xa>>2]=Y;k[ya+12>>2]=Y;k[ca+(ea+8)>>2]=ya;k[ca+(ea+12)>>2]=M;break}Z=wa>>>8;do if((Z|0)==0)za=0;else{if(wa>>>0>16777215){za=31;break}W=(Z+1048320|0)>>>16&8;U=Z<<W;V=(U+520192|0)>>>16&4;Q=U<<V;U=(Q+245760|0)>>>16&2;_=14-(V|W|U)+(Q<<U>>>15)|0;za=wa>>>(_+7|0)&1|_<<1}while(0);Z=3408+(za<<2)|0;k[ca+(ea+28)>>2]=za;k[ca+(ea+20)>>2]=0;k[ca+(ea+16)>>2]=0;M=k[777]|0;_=1<<za;if((M&_|0)==0){k[777]=M|_;k[Z>>2]=Y;k[ca+(ea+24)>>2]=Z;k[ca+(ea+12)>>2]=Y;k[ca+(ea+8)>>2]=Y;break}_=k[Z>>2]|0;if((za|0)==31)Aa=0;else Aa=25-(za>>>1)|0;j:do if((k[_+4>>2]&-8|0)!=(wa|0)){Z=wa<<Aa;M=_;while(1){Ba=M+(Z>>>31<<2)+16|0;U=k[Ba>>2]|0;if((U|0)==0)break;if((k[U+4>>2]&-8|0)==(wa|0)){Ca=U;break j}else{Z=Z<<1;M=U}}if(Ba>>>0<(k[780]|0)>>>0)na();else{k[Ba>>2]=Y;k[ca+(ea+24)>>2]=M;k[ca+(ea+12)>>2]=Y;k[ca+(ea+8)>>2]=Y;break h}}else Ca=_;while(0);_=Ca+8|0;Z=k[_>>2]|0;q=k[780]|0;if(Ca>>>0<q>>>0)na();if(Z>>>0<q>>>0)na();else{k[Z+12>>2]=Y;k[_>>2]=Y;k[ca+(ea+8)>>2]=Z;k[ca+(ea+12)>>2]=Ca;k[ca+(ea+24)>>2]=0;break}}else{Z=(k[779]|0)+$|0;k[779]=Z;k[782]=Y;k[ca+(ea+4)>>2]=Z|1}while(0);o=ca+(ka|8)|0;r=b;return o|0}ea=3552|0;while(1){Da=k[ea>>2]|0;if(!(Da>>>0>fa>>>0)?(Ea=k[ea+4>>2]|0,Fa=Da+Ea|0,Fa>>>0>fa>>>0):0)break;ea=k[ea+8>>2]|0}ea=Da+(Ea+ -39)|0;if((ea&7|0)==0)Ga=0;else Ga=0-ea&7;ea=Da+(Ea+ -47+Ga)|0;Y=ea>>>0<(fa+16|0)>>>0?fa:ea;ea=Y+8|0;$=ca+8|0;if(($&7|0)==0)Ha=0;else Ha=0-$&7;$=da+ -40-Ha|0;k[782]=ca+Ha;k[779]=$;k[ca+(Ha+4)>>2]=$|1;k[ca+(da+ -36)>>2]=40;k[783]=k[898];k[Y+4>>2]=27;k[ea+0>>2]=k[888];k[ea+4>>2]=k[889];k[ea+8>>2]=k[890];k[ea+12>>2]=k[891];k[888]=ca;k[889]=da;k[891]=0;k[890]=ea;ea=Y+28|0;k[ea>>2]=7;if((Y+32|0)>>>0<Fa>>>0){$=ea;do{ea=$;$=$+4|0;k[$>>2]=7}while((ea+8|0)>>>0<Fa>>>0)}if((Y|0)!=(fa|0)){$=Y-fa|0;ea=fa+($+4)|0;k[ea>>2]=k[ea>>2]&-2;k[fa+4>>2]=$|1;k[fa+$>>2]=$;ea=$>>>3;if($>>>0<256){L=ea<<1;aa=3144+(L<<2)|0;Z=k[776]|0;_=1<<ea;do if((Z&_|0)==0){k[776]=Z|_;Ia=3144+(L+2<<2)|0;Ja=aa}else{ea=3144+(L+2<<2)|0;q=k[ea>>2]|0;if(!(q>>>0<(k[780]|0)>>>0)){Ia=ea;Ja=q;break}na()}while(0);k[Ia>>2]=fa;k[Ja+12>>2]=fa;k[fa+8>>2]=Ja;k[fa+12>>2]=aa;break}L=$>>>8;if((L|0)!=0)if($>>>0>16777215)Ka=31;else{_=(L+1048320|0)>>>16&8;Z=L<<_;L=(Z+520192|0)>>>16&4;Y=Z<<L;Z=(Y+245760|0)>>>16&2;q=14-(L|_|Z)+(Y<<Z>>>15)|0;Ka=$>>>(q+7|0)&1|q<<1}else Ka=0;q=3408+(Ka<<2)|0;k[fa+28>>2]=Ka;k[fa+20>>2]=0;k[fa+16>>2]=0;Z=k[777]|0;Y=1<<Ka;if((Z&Y|0)==0){k[777]=Z|Y;k[q>>2]=fa;k[fa+24>>2]=q;k[fa+12>>2]=fa;k[fa+8>>2]=fa;break}Y=k[q>>2]|0;if((Ka|0)==31)La=0;else La=25-(Ka>>>1)|0;k:do if((k[Y+4>>2]&-8|0)!=($|0)){q=$<<La;Z=Y;while(1){Ma=Z+(q>>>31<<2)+16|0;_=k[Ma>>2]|0;if((_|0)==0)break;if((k[_+4>>2]&-8|0)==($|0)){Na=_;break k}else{q=q<<1;Z=_}}if(Ma>>>0<(k[780]|0)>>>0)na();else{k[Ma>>2]=fa;k[fa+24>>2]=Z;k[fa+12>>2]=fa;k[fa+8>>2]=fa;break g}}else Na=Y;while(0);Y=Na+8|0;$=k[Y>>2]|0;aa=k[780]|0;if(Na>>>0<aa>>>0)na();if($>>>0<aa>>>0)na();else{k[$+12>>2]=fa;k[Y>>2]=fa;k[fa+8>>2]=$;k[fa+12>>2]=Na;k[fa+24>>2]=0;break}}}else{$=k[780]|0;if(($|0)==0|ca>>>0<$>>>0)k[780]=ca;k[888]=ca;k[889]=da;k[891]=0;k[785]=k[894];k[784]=-1;$=0;do{Y=$<<1;aa=3144+(Y<<2)|0;k[3144+(Y+3<<2)>>2]=aa;k[3144+(Y+2<<2)>>2]=aa;$=$+1|0}while(($|0)!=32);$=ca+8|0;if(($&7|0)==0)Oa=0;else Oa=0-$&7;$=da+ -40-Oa|0;k[782]=ca+Oa;k[779]=$;k[ca+(Oa+4)>>2]=$|1;k[ca+(da+ -36)>>2]=40;k[783]=k[898]}while(0);da=k[779]|0;if(da>>>0>B>>>0){ca=da-B|0;k[779]=ca;da=k[782]|0;k[782]=da+B;k[da+(B+4)>>2]=ca|1;k[da+4>>2]=B|3;o=da+8|0;r=b;return o|0}}da=ta()|0;k[da>>2]=12;o=0;r=b;return o|0}function $a(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;b=r;if((a|0)==0){r=b;return}c=a+ -8|0;d=k[780]|0;if(c>>>0<d>>>0)na();e=k[a+ -4>>2]|0;f=e&3;if((f|0)==1)na();g=e&-8;h=a+(g+ -8)|0;do if((e&1|0)==0){i=k[c>>2]|0;if((f|0)==0){r=b;return}j=-8-i|0;l=a+j|0;m=i+g|0;if(l>>>0<d>>>0)na();if((l|0)==(k[781]|0)){n=a+(g+ -4)|0;if((k[n>>2]&3|0)!=3){o=l;p=m;break}k[778]=m;k[n>>2]=k[n>>2]&-2;k[a+(j+4)>>2]=m|1;k[h>>2]=m;r=b;return}n=i>>>3;if(i>>>0<256){i=k[a+(j+8)>>2]|0;q=k[a+(j+12)>>2]|0;s=3144+(n<<1<<2)|0;if((i|0)!=(s|0)){if(i>>>0<d>>>0)na();if((k[i+12>>2]|0)!=(l|0))na()}if((q|0)==(i|0)){k[776]=k[776]&~(1<<n);o=l;p=m;break}if((q|0)!=(s|0)){if(q>>>0<d>>>0)na();s=q+8|0;if((k[s>>2]|0)==(l|0))t=s;else na()}else t=q+8|0;k[i+12>>2]=q;k[t>>2]=i;o=l;p=m;break}i=k[a+(j+24)>>2]|0;q=k[a+(j+12)>>2]|0;do if((q|0)==(l|0)){s=a+(j+20)|0;n=k[s>>2]|0;if((n|0)==0){u=a+(j+16)|0;v=k[u>>2]|0;if((v|0)==0){w=0;break}else{x=v;y=u}}else{x=n;y=s}while(1){s=x+20|0;n=k[s>>2]|0;if((n|0)!=0){x=n;y=s;continue}s=x+16|0;n=k[s>>2]|0;if((n|0)==0)break;else{x=n;y=s}}if(y>>>0<d>>>0)na();else{k[y>>2]=0;w=x;break}}else{s=k[a+(j+8)>>2]|0;if(s>>>0<d>>>0)na();n=s+12|0;if((k[n>>2]|0)!=(l|0))na();u=q+8|0;if((k[u>>2]|0)==(l|0)){k[n>>2]=q;k[u>>2]=s;w=q;break}else na()}while(0);if((i|0)!=0){q=k[a+(j+28)>>2]|0;s=3408+(q<<2)|0;if((l|0)==(k[s>>2]|0)){k[s>>2]=w;if((w|0)==0){k[777]=k[777]&~(1<<q);o=l;p=m;break}}else{if(i>>>0<(k[780]|0)>>>0)na();q=i+16|0;if((k[q>>2]|0)==(l|0))k[q>>2]=w;else k[i+20>>2]=w;if((w|0)==0){o=l;p=m;break}}if(w>>>0<(k[780]|0)>>>0)na();k[w+24>>2]=i;q=k[a+(j+16)>>2]|0;do if((q|0)!=0)if(q>>>0<(k[780]|0)>>>0)na();else{k[w+16>>2]=q;k[q+24>>2]=w;break}while(0);q=k[a+(j+20)>>2]|0;if((q|0)!=0)if(q>>>0<(k[780]|0)>>>0)na();else{k[w+20>>2]=q;k[q+24>>2]=w;o=l;p=m;break}else{o=l;p=m}}else{o=l;p=m}}else{o=c;p=g}while(0);if(!(o>>>0<h>>>0))na();c=a+(g+ -4)|0;w=k[c>>2]|0;if((w&1|0)==0)na();if((w&2|0)==0){if((h|0)==(k[782]|0)){d=(k[779]|0)+p|0;k[779]=d;k[782]=o;k[o+4>>2]=d|1;if((o|0)!=(k[781]|0)){r=b;return}k[781]=0;k[778]=0;r=b;return}if((h|0)==(k[781]|0)){d=(k[778]|0)+p|0;k[778]=d;k[781]=o;k[o+4>>2]=d|1;k[o+d>>2]=d;r=b;return}d=(w&-8)+p|0;x=w>>>3;do if(!(w>>>0<256)){y=k[a+(g+16)>>2]|0;t=k[a+(g|4)>>2]|0;do if((t|0)==(h|0)){f=a+(g+12)|0;e=k[f>>2]|0;if((e|0)==0){q=a+(g+8)|0;i=k[q>>2]|0;if((i|0)==0){z=0;break}else{A=i;B=q}}else{A=e;B=f}while(1){f=A+20|0;e=k[f>>2]|0;if((e|0)!=0){A=e;B=f;continue}f=A+16|0;e=k[f>>2]|0;if((e|0)==0)break;else{A=e;B=f}}if(B>>>0<(k[780]|0)>>>0)na();else{k[B>>2]=0;z=A;break}}else{f=k[a+g>>2]|0;if(f>>>0<(k[780]|0)>>>0)na();e=f+12|0;if((k[e>>2]|0)!=(h|0))na();q=t+8|0;if((k[q>>2]|0)==(h|0)){k[e>>2]=t;k[q>>2]=f;z=t;break}else na()}while(0);if((y|0)!=0){t=k[a+(g+20)>>2]|0;m=3408+(t<<2)|0;if((h|0)==(k[m>>2]|0)){k[m>>2]=z;if((z|0)==0){k[777]=k[777]&~(1<<t);break}}else{if(y>>>0<(k[780]|0)>>>0)na();t=y+16|0;if((k[t>>2]|0)==(h|0))k[t>>2]=z;else k[y+20>>2]=z;if((z|0)==0)break}if(z>>>0<(k[780]|0)>>>0)na();k[z+24>>2]=y;t=k[a+(g+8)>>2]|0;do if((t|0)!=0)if(t>>>0<(k[780]|0)>>>0)na();else{k[z+16>>2]=t;k[t+24>>2]=z;break}while(0);t=k[a+(g+12)>>2]|0;if((t|0)!=0)if(t>>>0<(k[780]|0)>>>0)na();else{k[z+20>>2]=t;k[t+24>>2]=z;break}}}else{t=k[a+g>>2]|0;y=k[a+(g|4)>>2]|0;m=3144+(x<<1<<2)|0;if((t|0)!=(m|0)){if(t>>>0<(k[780]|0)>>>0)na();if((k[t+12>>2]|0)!=(h|0))na()}if((y|0)==(t|0)){k[776]=k[776]&~(1<<x);break}if((y|0)!=(m|0)){if(y>>>0<(k[780]|0)>>>0)na();m=y+8|0;if((k[m>>2]|0)==(h|0))C=m;else na()}else C=y+8|0;k[t+12>>2]=y;k[C>>2]=t}while(0);k[o+4>>2]=d|1;k[o+d>>2]=d;if((o|0)==(k[781]|0)){k[778]=d;r=b;return}else D=d}else{k[c>>2]=w&-2;k[o+4>>2]=p|1;k[o+p>>2]=p;D=p}p=D>>>3;if(D>>>0<256){w=p<<1;c=3144+(w<<2)|0;d=k[776]|0;C=1<<p;if((d&C|0)!=0){p=3144+(w+2<<2)|0;h=k[p>>2]|0;if(h>>>0<(k[780]|0)>>>0)na();else{E=p;F=h}}else{k[776]=d|C;E=3144+(w+2<<2)|0;F=c}k[E>>2]=o;k[F+12>>2]=o;k[o+8>>2]=F;k[o+12>>2]=c;r=b;return}c=D>>>8;if((c|0)!=0)if(D>>>0>16777215)G=31;else{F=(c+1048320|0)>>>16&8;E=c<<F;c=(E+520192|0)>>>16&4;w=E<<c;E=(w+245760|0)>>>16&2;C=14-(c|F|E)+(w<<E>>>15)|0;G=D>>>(C+7|0)&1|C<<1}else G=0;C=3408+(G<<2)|0;k[o+28>>2]=G;k[o+20>>2]=0;k[o+16>>2]=0;E=k[777]|0;w=1<<G;a:do if((E&w|0)!=0){F=k[C>>2]|0;if((G|0)==31)H=0;else H=25-(G>>>1)|0;b:do if((k[F+4>>2]&-8|0)!=(D|0)){c=D<<H;d=F;while(1){I=d+(c>>>31<<2)+16|0;h=k[I>>2]|0;if((h|0)==0)break;if((k[h+4>>2]&-8|0)==(D|0)){J=h;break b}else{c=c<<1;d=h}}if(I>>>0<(k[780]|0)>>>0)na();else{k[I>>2]=o;k[o+24>>2]=d;k[o+12>>2]=o;k[o+8>>2]=o;break a}}else J=F;while(0);F=J+8|0;c=k[F>>2]|0;h=k[780]|0;if(J>>>0<h>>>0)na();if(c>>>0<h>>>0)na();else{k[c+12>>2]=o;k[F>>2]=o;k[o+8>>2]=c;k[o+12>>2]=J;k[o+24>>2]=0;break}}else{k[777]=E|w;k[C>>2]=o;k[o+24>>2]=C;k[o+12>>2]=o;k[o+8>>2]=o}while(0);o=(k[784]|0)+ -1|0;k[784]=o;if((o|0)==0)K=3560|0;else{r=b;return}while(1){o=k[K>>2]|0;if((o|0)==0)break;else K=o+8|0}k[784]=-1;r=b;return}function ab(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=r;a:do if((c|0)==0)e=0;else{f=c;g=a;h=b;while(1){j=i[g>>0]|0;k=i[h>>0]|0;if(!(j<<24>>24==k<<24>>24))break;f=f+ -1|0;if((f|0)==0){e=0;break a}else{g=g+1|0;h=h+1|0}}e=(j&255)-(k&255)|0}while(0);r=d;return e|0}function bb(){}function cb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=b-d>>>0;e=b-d-(c>>>0>a>>>0|0)>>>0;return(M=e,a-c>>>0|0)|0}function db(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=a+c>>>0;return(M=b+d+(e>>>0<a>>>0|0)>>>0,e|0)|0}function eb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;d=a+c|0;if((c|0)>=20){b=b&255;e=a&3;f=b|b<<8|b<<16|b<<24;g=d&~3;if(e){e=a+4-e|0;while((a|0)<(e|0)){i[a>>0]=b;a=a+1|0}}while((a|0)<(g|0)){k[a>>2]=f;a=a+4|0}}while((a|0)<(d|0)){i[a>>0]=b;a=a+1|0}return a-c|0}function fb(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){M=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}M=0;return b>>>c-32|0}function gb(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){M=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}M=a<<c-32;return 0}function hb(a){a=a|0;var b=0;b=a;while(i[b>>0]|0)b=b+1|0;return b-a|0}function ib(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if((c|0)>=4096)return ra(a|0,b|0,c|0)|0;d=a|0;if((a&3)==(b&3)){while(a&3){if((c|0)==0)return d|0;i[a>>0]=i[b>>0]|0;a=a+1|0;b=b+1|0;c=c-1|0}while((c|0)>=4){k[a>>2]=k[b>>2];a=a+4|0;b=b+4|0;c=c-4|0}}while((c|0)>0){i[a>>0]=i[b>>0]|0;a=a+1|0;b=b+1|0;c=c-1|0}return d|0}function jb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if((b|0)<(a|0)&(a|0)<(b+c|0)){d=a;b=b+c|0;a=a+c|0;while((c|0)>0){a=a-1|0;b=b-1|0;c=c-1|0;i[a>>0]=i[b>>0]|0}a=d}else ib(a,b,c)|0;return a|0}function kb(q){q=q;i=new a(q);j=new b(q);k=new c(q);l=new d(q);m=new e(q);n=new f(q);o=new g(q);p=new h(q);buffer=q;return true}function lb(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){M=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}M=(b|0)<0?-1:0;return b>>c-32|0}function mb(a){a=a|0;var b=0;b=i[w+(a>>>24)>>0]|0;if((b|0)<8)return b|0;b=i[w+(a>>16&255)>>0]|0;if((b|0)<8)return b+8|0;b=i[w+(a>>8&255)>>0]|0;if((b|0)<8)return b+16|0;return(i[w+(a&255)>>0]|0)+24|0}function nb(a){a=a|0;var b=0;b=i[v+(a&255)>>0]|0;if((b|0)<8)return b|0;b=i[v+(a>>8&255)>>0]|0;if((b|0)<8)return b+8|0;b=i[v+(a>>16&255)>>0]|0;if((b|0)<8)return b+16|0;return(i[v+(a>>>24)>>0]|0)+24|0}function ob(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;c=a&65535;d=b&65535;e=ia(d,c)|0;f=a>>>16;a=(e>>>16)+(ia(d,f)|0)|0;d=b>>>16;b=ia(d,c)|0;return(M=(a>>>16)+(ia(d,f)|0)+(((a&65535)+b|0)>>>16)|0,a+b<<16|e&65535|0)|0}function pb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;e=b>>31|((b|0)<0?-1:0)<<1;f=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;g=d>>31|((d|0)<0?-1:0)<<1;h=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;i=cb(e^a,f^b,e,f)|0;b=M;a=g^e;e=h^f;f=cb((ub(i,b,cb(g^c,h^d,g,h)|0,M,0)|0)^a,M^e,a,e)|0;return f|0}function qb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0;e=r;r=r+8|0;f=e|0;g=b>>31|((b|0)<0?-1:0)<<1;h=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;i=d>>31|((d|0)<0?-1:0)<<1;j=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;l=cb(g^a,h^b,g,h)|0;b=M;ub(l,b,cb(i^c,j^d,i,j)|0,M,f)|0;j=cb(k[f>>2]^g,k[f+4>>2]^h,g,h)|0;h=M;r=e;return(M=h,j)|0}function rb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=a;a=c;c=ob(e,a)|0;f=M;return(M=(ia(b,a)|0)+(ia(d,e)|0)+f|f&0,c|0|0)|0}function sb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=ub(a,b,c,d,0)|0;return e|0}function tb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=r;r=r+8|0;f=e|0;ub(a,b,c,d,f)|0;r=e;return(M=k[f+4>>2]|0,k[f>>2]|0)|0}function ub(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;f=a;g=b;h=g;i=c;j=d;l=j;if((h|0)==0){m=(e|0)!=0;if((l|0)==0){if(m){k[e>>2]=(f>>>0)%(i>>>0);k[e+4>>2]=0}n=0;o=(f>>>0)/(i>>>0)>>>0;return(M=n,o)|0}else{if(!m){n=0;o=0;return(M=n,o)|0}k[e>>2]=a|0;k[e+4>>2]=b&0;n=0;o=0;return(M=n,o)|0}}m=(l|0)==0;do if((i|0)!=0){if(!m){p=(mb(l|0)|0)-(mb(h|0)|0)|0;if(p>>>0<=31){q=p+1|0;r=31-p|0;s=p-31>>31;t=q;u=f>>>(q>>>0)&s|h<<r;v=h>>>(q>>>0)&s;w=0;x=f<<r;break}if((e|0)==0){n=0;o=0;return(M=n,o)|0}k[e>>2]=a|0;k[e+4>>2]=g|b&0;n=0;o=0;return(M=n,o)|0}r=i-1|0;if((r&i|0)!=0){s=(mb(i|0)|0)+33-(mb(h|0)|0)|0;q=64-s|0;p=32-s|0;y=p>>31;z=s-32|0;A=z>>31;t=s;u=p-1>>31&h>>>(z>>>0)|(h<<p|f>>>(s>>>0))&A;v=A&h>>>(s>>>0);w=f<<q&y;x=(h<<q|f>>>(z>>>0))&y|f<<p&s-33>>31;break}if((e|0)!=0){k[e>>2]=r&f;k[e+4>>2]=0}if((i|0)==1){n=g|b&0;o=a|0|0;return(M=n,o)|0}else{r=nb(i|0)|0;n=h>>>(r>>>0)|0;o=h<<32-r|f>>>(r>>>0)|0;return(M=n,o)|0}}else{if(m){if((e|0)!=0){k[e>>2]=(h>>>0)%(i>>>0);k[e+4>>2]=0}n=0;o=(h>>>0)/(i>>>0)>>>0;return(M=n,o)|0}if((f|0)==0){if((e|0)!=0){k[e>>2]=0;k[e+4>>2]=(h>>>0)%(l>>>0)}n=0;o=(h>>>0)/(l>>>0)>>>0;return(M=n,o)|0}r=l-1|0;if((r&l|0)==0){if((e|0)!=0){k[e>>2]=a|0;k[e+4>>2]=r&h|b&0}n=0;o=h>>>((nb(l|0)|0)>>>0);return(M=n,o)|0}r=(mb(l|0)|0)-(mb(h|0)|0)|0;if(r>>>0<=30){s=r+1|0;p=31-r|0;t=s;u=h<<p|f>>>(s>>>0);v=h>>>(s>>>0);w=0;x=f<<p;break}if((e|0)==0){n=0;o=0;return(M=n,o)|0}k[e>>2]=a|0;k[e+4>>2]=g|b&0;n=0;o=0;return(M=n,o)|0}while(0);if((t|0)==0){B=x;C=w;D=v;E=u;F=0;G=0}else{b=c|0|0;c=j|d&0;d=db(b,c,-1,-1)|0;j=M;g=x;x=w;w=v;v=u;u=t;t=0;do{a=g;g=x>>>31|g<<1;x=t|x<<1;f=v<<1|a>>>31|0;a=v>>>31|w<<1|0;cb(d,j,f,a)|0;h=M;l=h>>31|((h|0)<0?-1:0)<<1;t=l&1;v=cb(f,a,l&b,(((h|0)<0?-1:0)>>31|((h|0)<0?-1:0)<<1)&c)|0;w=M;u=u-1|0}while((u|0)!=0);B=g;C=x;D=w;E=v;F=0;G=t}t=C;C=0;if((e|0)!=0){k[e>>2]=E;k[e+4>>2]=D}n=(t|0)>>>31|(B|C)<<1|(C<<1|t>>>31)&0|F;o=(t<<1|0>>>31)&-2|G;return(M=n,o)|0}




// EMSCRIPTEN_END_FUNCS
return{_get_in_buffer:Ka,_set_new_input:La,_get_out_buffer:Oa,_get_out_pos:Na,_free:$a,_memset:eb,_i64Add:db,_memmove:jb,_release:Qa,_input_empty:Ja,_init:Ha,_i64Subtract:cb,_init_decompression:Ia,_out_buffer_cleared:Pa,_malloc:_a,_memcpy:ib,_strlen:hb,_decompress:Ma,_bitshift64Lshr:fb,_emscripten_replace_memory:kb,_bitshift64Shl:gb,runPostSets:bb,stackAlloc:va,stackSave:wa,stackRestore:xa,setThrew:ya,setTempRet0:Ba,getTempRet0:Ca}
// EMSCRIPTEN_END_ASM

})({"Math":Math,"Int8Array":Int8Array,"Int16Array":Int16Array,"Int32Array":Int32Array,"Uint8Array":Uint8Array,"Uint16Array":Uint16Array,"Uint32Array":Uint32Array,"Float32Array":Float32Array,"Float64Array":Float64Array,"byteLength":byteLength},{"abort":abort,"assert":assert,"min":Math_min,"_fflush":_fflush,"_abort":_abort,"___setErrNo":___setErrNo,"_sbrk":_sbrk,"_time":_time,"_emscripten_memcpy_big":_emscripten_memcpy_big,"_sysconf":_sysconf,"___errno_location":___errno_location,"STACKTOP":STACKTOP,"STACK_MAX":STACK_MAX,"tempDoublePtr":tempDoublePtr,"ABORT":ABORT,"cttz_i8":cttz_i8,"ctlz_i8":ctlz_i8,"NaN":NaN,"Infinity":Infinity},buffer);var _get_in_buffer=Module["_get_in_buffer"]=asm["_get_in_buffer"];var _set_new_input=Module["_set_new_input"]=asm["_set_new_input"];var _get_out_buffer=Module["_get_out_buffer"]=asm["_get_out_buffer"];var _get_out_pos=Module["_get_out_pos"]=asm["_get_out_pos"];var _free=Module["_free"]=asm["_free"];var _memset=Module["_memset"]=asm["_memset"];var _i64Add=Module["_i64Add"]=asm["_i64Add"];var _memmove=Module["_memmove"]=asm["_memmove"];var _release=Module["_release"]=asm["_release"];var _input_empty=Module["_input_empty"]=asm["_input_empty"];var _init=Module["_init"]=asm["_init"];var _i64Subtract=Module["_i64Subtract"]=asm["_i64Subtract"];var _init_decompression=Module["_init_decompression"]=asm["_init_decompression"];var _out_buffer_cleared=Module["_out_buffer_cleared"]=asm["_out_buffer_cleared"];var _malloc=Module["_malloc"]=asm["_malloc"];var _memcpy=Module["_memcpy"]=asm["_memcpy"];var _strlen=Module["_strlen"]=asm["_strlen"];var _decompress=Module["_decompress"]=asm["_decompress"];var _bitshift64Lshr=Module["_bitshift64Lshr"]=asm["_bitshift64Lshr"];var _emscripten_replace_memory=Module["_emscripten_replace_memory"]=asm["_emscripten_replace_memory"];var _bitshift64Shl=Module["_bitshift64Shl"]=asm["_bitshift64Shl"];var runPostSets=Module["runPostSets"]=asm["runPostSets"];Runtime.stackAlloc=asm["stackAlloc"];Runtime.stackSave=asm["stackSave"];Runtime.stackRestore=asm["stackRestore"];Runtime.setTempRet0=asm["setTempRet0"];Runtime.getTempRet0=asm["getTempRet0"];var i64Math=(function(){var goog={math:{}};goog.math.Long=(function(low,high){this.low_=low|0;this.high_=high|0});goog.math.Long.IntCache_={};goog.math.Long.fromInt=(function(value){if(-128<=value&&value<128){var cachedObj=goog.math.Long.IntCache_[value];if(cachedObj){return cachedObj}}var obj=new goog.math.Long(value|0,value<0?-1:0);if(-128<=value&&value<128){goog.math.Long.IntCache_[value]=obj}return obj});goog.math.Long.fromNumber=(function(value){if(isNaN(value)||!isFinite(value)){return goog.math.Long.ZERO}else if(value<=-goog.math.Long.TWO_PWR_63_DBL_){return goog.math.Long.MIN_VALUE}else if(value+1>=goog.math.Long.TWO_PWR_63_DBL_){return goog.math.Long.MAX_VALUE}else if(value<0){return goog.math.Long.fromNumber(-value).negate()}else{return new goog.math.Long(value%goog.math.Long.TWO_PWR_32_DBL_|0,value/goog.math.Long.TWO_PWR_32_DBL_|0)}});goog.math.Long.fromBits=(function(lowBits,highBits){return new goog.math.Long(lowBits,highBits)});goog.math.Long.fromString=(function(str,opt_radix){if(str.length==0){throw Error("number format error: empty string")}var radix=opt_radix||10;if(radix<2||36<radix){throw Error("radix out of range: "+radix)}if(str.charAt(0)=="-"){return goog.math.Long.fromString(str.substring(1),radix).negate()}else if(str.indexOf("-")>=0){throw Error('number format error: interior "-" character: '+str)}var radixToPower=goog.math.Long.fromNumber(Math.pow(radix,8));var result=goog.math.Long.ZERO;for(var i=0;i<str.length;i+=8){var size=Math.min(8,str.length-i);var value=parseInt(str.substring(i,i+size),radix);if(size<8){var power=goog.math.Long.fromNumber(Math.pow(radix,size));result=result.multiply(power).add(goog.math.Long.fromNumber(value))}else{result=result.multiply(radixToPower);result=result.add(goog.math.Long.fromNumber(value))}}return result});goog.math.Long.TWO_PWR_16_DBL_=1<<16;goog.math.Long.TWO_PWR_24_DBL_=1<<24;goog.math.Long.TWO_PWR_32_DBL_=goog.math.Long.TWO_PWR_16_DBL_*goog.math.Long.TWO_PWR_16_DBL_;goog.math.Long.TWO_PWR_31_DBL_=goog.math.Long.TWO_PWR_32_DBL_/2;goog.math.Long.TWO_PWR_48_DBL_=goog.math.Long.TWO_PWR_32_DBL_*goog.math.Long.TWO_PWR_16_DBL_;goog.math.Long.TWO_PWR_64_DBL_=goog.math.Long.TWO_PWR_32_DBL_*goog.math.Long.TWO_PWR_32_DBL_;goog.math.Long.TWO_PWR_63_DBL_=goog.math.Long.TWO_PWR_64_DBL_/2;goog.math.Long.ZERO=goog.math.Long.fromInt(0);goog.math.Long.ONE=goog.math.Long.fromInt(1);goog.math.Long.NEG_ONE=goog.math.Long.fromInt(-1);goog.math.Long.MAX_VALUE=goog.math.Long.fromBits(4294967295|0,2147483647|0);goog.math.Long.MIN_VALUE=goog.math.Long.fromBits(0,2147483648|0);goog.math.Long.TWO_PWR_24_=goog.math.Long.fromInt(1<<24);goog.math.Long.prototype.toInt=(function(){return this.low_});goog.math.Long.prototype.toNumber=(function(){return this.high_*goog.math.Long.TWO_PWR_32_DBL_+this.getLowBitsUnsigned()});goog.math.Long.prototype.toString=(function(opt_radix){var radix=opt_radix||10;if(radix<2||36<radix){throw Error("radix out of range: "+radix)}if(this.isZero()){return"0"}if(this.isNegative()){if(this.equals(goog.math.Long.MIN_VALUE)){var radixLong=goog.math.Long.fromNumber(radix);var div=this.div(radixLong);var rem=div.multiply(radixLong).subtract(this);return div.toString(radix)+rem.toInt().toString(radix)}else{return"-"+this.negate().toString(radix)}}var radixToPower=goog.math.Long.fromNumber(Math.pow(radix,6));var rem=this;var result="";while(true){var remDiv=rem.div(radixToPower);var intval=rem.subtract(remDiv.multiply(radixToPower)).toInt();var digits=intval.toString(radix);rem=remDiv;if(rem.isZero()){return digits+result}else{while(digits.length<6){digits="0"+digits}result=""+digits+result}}});goog.math.Long.prototype.getHighBits=(function(){return this.high_});goog.math.Long.prototype.getLowBits=(function(){return this.low_});goog.math.Long.prototype.getLowBitsUnsigned=(function(){return this.low_>=0?this.low_:goog.math.Long.TWO_PWR_32_DBL_+this.low_});goog.math.Long.prototype.getNumBitsAbs=(function(){if(this.isNegative()){if(this.equals(goog.math.Long.MIN_VALUE)){return 64}else{return this.negate().getNumBitsAbs()}}else{var val=this.high_!=0?this.high_:this.low_;for(var bit=31;bit>0;bit--){if((val&1<<bit)!=0){break}}return this.high_!=0?bit+33:bit+1}});goog.math.Long.prototype.isZero=(function(){return this.high_==0&&this.low_==0});goog.math.Long.prototype.isNegative=(function(){return this.high_<0});goog.math.Long.prototype.isOdd=(function(){return(this.low_&1)==1});goog.math.Long.prototype.equals=(function(other){return this.high_==other.high_&&this.low_==other.low_});goog.math.Long.prototype.notEquals=(function(other){return this.high_!=other.high_||this.low_!=other.low_});goog.math.Long.prototype.lessThan=(function(other){return this.compare(other)<0});goog.math.Long.prototype.lessThanOrEqual=(function(other){return this.compare(other)<=0});goog.math.Long.prototype.greaterThan=(function(other){return this.compare(other)>0});goog.math.Long.prototype.greaterThanOrEqual=(function(other){return this.compare(other)>=0});goog.math.Long.prototype.compare=(function(other){if(this.equals(other)){return 0}var thisNeg=this.isNegative();var otherNeg=other.isNegative();if(thisNeg&&!otherNeg){return-1}if(!thisNeg&&otherNeg){return 1}if(this.subtract(other).isNegative()){return-1}else{return 1}});goog.math.Long.prototype.negate=(function(){if(this.equals(goog.math.Long.MIN_VALUE)){return goog.math.Long.MIN_VALUE}else{return this.not().add(goog.math.Long.ONE)}});goog.math.Long.prototype.add=(function(other){var a48=this.high_>>>16;var a32=this.high_&65535;var a16=this.low_>>>16;var a00=this.low_&65535;var b48=other.high_>>>16;var b32=other.high_&65535;var b16=other.low_>>>16;var b00=other.low_&65535;var c48=0,c32=0,c16=0,c00=0;c00+=a00+b00;c16+=c00>>>16;c00&=65535;c16+=a16+b16;c32+=c16>>>16;c16&=65535;c32+=a32+b32;c48+=c32>>>16;c32&=65535;c48+=a48+b48;c48&=65535;return goog.math.Long.fromBits(c16<<16|c00,c48<<16|c32)});goog.math.Long.prototype.subtract=(function(other){return this.add(other.negate())});goog.math.Long.prototype.multiply=(function(other){if(this.isZero()){return goog.math.Long.ZERO}else if(other.isZero()){return goog.math.Long.ZERO}if(this.equals(goog.math.Long.MIN_VALUE)){return other.isOdd()?goog.math.Long.MIN_VALUE:goog.math.Long.ZERO}else if(other.equals(goog.math.Long.MIN_VALUE)){return this.isOdd()?goog.math.Long.MIN_VALUE:goog.math.Long.ZERO}if(this.isNegative()){if(other.isNegative()){return this.negate().multiply(other.negate())}else{return this.negate().multiply(other).negate()}}else if(other.isNegative()){return this.multiply(other.negate()).negate()}if(this.lessThan(goog.math.Long.TWO_PWR_24_)&&other.lessThan(goog.math.Long.TWO_PWR_24_)){return goog.math.Long.fromNumber(this.toNumber()*other.toNumber())}var a48=this.high_>>>16;var a32=this.high_&65535;var a16=this.low_>>>16;var a00=this.low_&65535;var b48=other.high_>>>16;var b32=other.high_&65535;var b16=other.low_>>>16;var b00=other.low_&65535;var c48=0,c32=0,c16=0,c00=0;c00+=a00*b00;c16+=c00>>>16;c00&=65535;c16+=a16*b00;c32+=c16>>>16;c16&=65535;c16+=a00*b16;c32+=c16>>>16;c16&=65535;c32+=a32*b00;c48+=c32>>>16;c32&=65535;c32+=a16*b16;c48+=c32>>>16;c32&=65535;c32+=a00*b32;c48+=c32>>>16;c32&=65535;c48+=a48*b00+a32*b16+a16*b32+a00*b48;c48&=65535;return goog.math.Long.fromBits(c16<<16|c00,c48<<16|c32)});goog.math.Long.prototype.div=(function(other){if(other.isZero()){throw Error("division by zero")}else if(this.isZero()){return goog.math.Long.ZERO}if(this.equals(goog.math.Long.MIN_VALUE)){if(other.equals(goog.math.Long.ONE)||other.equals(goog.math.Long.NEG_ONE)){return goog.math.Long.MIN_VALUE}else if(other.equals(goog.math.Long.MIN_VALUE)){return goog.math.Long.ONE}else{var halfThis=this.shiftRight(1);var approx=halfThis.div(other).shiftLeft(1);if(approx.equals(goog.math.Long.ZERO)){return other.isNegative()?goog.math.Long.ONE:goog.math.Long.NEG_ONE}else{var rem=this.subtract(other.multiply(approx));var result=approx.add(rem.div(other));return result}}}else if(other.equals(goog.math.Long.MIN_VALUE)){return goog.math.Long.ZERO}if(this.isNegative()){if(other.isNegative()){return this.negate().div(other.negate())}else{return this.negate().div(other).negate()}}else if(other.isNegative()){return this.div(other.negate()).negate()}var res=goog.math.Long.ZERO;var rem=this;while(rem.greaterThanOrEqual(other)){var approx=Math.max(1,Math.floor(rem.toNumber()/other.toNumber()));var log2=Math.ceil(Math.log(approx)/Math.LN2);var delta=log2<=48?1:Math.pow(2,log2-48);var approxRes=goog.math.Long.fromNumber(approx);var approxRem=approxRes.multiply(other);while(approxRem.isNegative()||approxRem.greaterThan(rem)){approx-=delta;approxRes=goog.math.Long.fromNumber(approx);approxRem=approxRes.multiply(other)}if(approxRes.isZero()){approxRes=goog.math.Long.ONE}res=res.add(approxRes);rem=rem.subtract(approxRem)}return res});goog.math.Long.prototype.modulo=(function(other){return this.subtract(this.div(other).multiply(other))});goog.math.Long.prototype.not=(function(){return goog.math.Long.fromBits(~this.low_,~this.high_)});goog.math.Long.prototype.and=(function(other){return goog.math.Long.fromBits(this.low_&other.low_,this.high_&other.high_)});goog.math.Long.prototype.or=(function(other){return goog.math.Long.fromBits(this.low_|other.low_,this.high_|other.high_)});goog.math.Long.prototype.xor=(function(other){return goog.math.Long.fromBits(this.low_^other.low_,this.high_^other.high_)});goog.math.Long.prototype.shiftLeft=(function(numBits){numBits&=63;if(numBits==0){return this}else{var low=this.low_;if(numBits<32){var high=this.high_;return goog.math.Long.fromBits(low<<numBits,high<<numBits|low>>>32-numBits)}else{return goog.math.Long.fromBits(0,low<<numBits-32)}}});goog.math.Long.prototype.shiftRight=(function(numBits){numBits&=63;if(numBits==0){return this}else{var high=this.high_;if(numBits<32){var low=this.low_;return goog.math.Long.fromBits(low>>>numBits|high<<32-numBits,high>>numBits)}else{return goog.math.Long.fromBits(high>>numBits-32,high>=0?0:-1)}}});goog.math.Long.prototype.shiftRightUnsigned=(function(numBits){numBits&=63;if(numBits==0){return this}else{var high=this.high_;if(numBits<32){var low=this.low_;return goog.math.Long.fromBits(low>>>numBits|high<<32-numBits,high>>>numBits)}else if(numBits==32){return goog.math.Long.fromBits(high,0)}else{return goog.math.Long.fromBits(high>>>numBits-32,0)}}});var navigator={appName:"Modern Browser"};var dbits;var canary=0xdeadbeefcafe;var j_lm=(canary&16777215)==15715070;function BigInteger(a,b,c){if(a!=null)if("number"==typeof a)this.fromNumber(a,b,c);else if(b==null&&"string"!=typeof a)this.fromString(a,256);else this.fromString(a,b)}function nbi(){return new BigInteger(null)}function am1(i,x,w,j,c,n){while(--n>=0){var v=x*this[i++]+w[j]+c;c=Math.floor(v/67108864);w[j++]=v&67108863}return c}function am2(i,x,w,j,c,n){var xl=x&32767,xh=x>>15;while(--n>=0){var l=this[i]&32767;var h=this[i++]>>15;var m=xh*l+h*xl;l=xl*l+((m&32767)<<15)+w[j]+(c&1073741823);c=(l>>>30)+(m>>>15)+xh*h+(c>>>30);w[j++]=l&1073741823}return c}function am3(i,x,w,j,c,n){var xl=x&16383,xh=x>>14;while(--n>=0){var l=this[i]&16383;var h=this[i++]>>14;var m=xh*l+h*xl;l=xl*l+((m&16383)<<14)+w[j]+c;c=(l>>28)+(m>>14)+xh*h;w[j++]=l&268435455}return c}if(j_lm&&navigator.appName=="Microsoft Internet Explorer"){BigInteger.prototype.am=am2;dbits=30}else if(j_lm&&navigator.appName!="Netscape"){BigInteger.prototype.am=am1;dbits=26}else{BigInteger.prototype.am=am3;dbits=28}BigInteger.prototype.DB=dbits;BigInteger.prototype.DM=(1<<dbits)-1;BigInteger.prototype.DV=1<<dbits;var BI_FP=52;BigInteger.prototype.FV=Math.pow(2,BI_FP);BigInteger.prototype.F1=BI_FP-dbits;BigInteger.prototype.F2=2*dbits-BI_FP;var BI_RM="0123456789abcdefghijklmnopqrstuvwxyz";var BI_RC=new Array;var rr,vv;rr="0".charCodeAt(0);for(vv=0;vv<=9;++vv)BI_RC[rr++]=vv;rr="a".charCodeAt(0);for(vv=10;vv<36;++vv)BI_RC[rr++]=vv;rr="A".charCodeAt(0);for(vv=10;vv<36;++vv)BI_RC[rr++]=vv;function int2char(n){return BI_RM.charAt(n)}function intAt(s,i){var c=BI_RC[s.charCodeAt(i)];return c==null?-1:c}function bnpCopyTo(r){for(var i=this.t-1;i>=0;--i)r[i]=this[i];r.t=this.t;r.s=this.s}function bnpFromInt(x){this.t=1;this.s=x<0?-1:0;if(x>0)this[0]=x;else if(x<-1)this[0]=x+DV;else this.t=0}function nbv(i){var r=nbi();r.fromInt(i);return r}function bnpFromString(s,b){var k;if(b==16)k=4;else if(b==8)k=3;else if(b==256)k=8;else if(b==2)k=1;else if(b==32)k=5;else if(b==4)k=2;else{this.fromRadix(s,b);return}this.t=0;this.s=0;var i=s.length,mi=false,sh=0;while(--i>=0){var x=k==8?s[i]&255:intAt(s,i);if(x<0){if(s.charAt(i)=="-")mi=true;continue}mi=false;if(sh==0)this[this.t++]=x;else if(sh+k>this.DB){this[this.t-1]|=(x&(1<<this.DB-sh)-1)<<sh;this[this.t++]=x>>this.DB-sh}else this[this.t-1]|=x<<sh;sh+=k;if(sh>=this.DB)sh-=this.DB}if(k==8&&(s[0]&128)!=0){this.s=-1;if(sh>0)this[this.t-1]|=(1<<this.DB-sh)-1<<sh}this.clamp();if(mi)BigInteger.ZERO.subTo(this,this)}function bnpClamp(){var c=this.s&this.DM;while(this.t>0&&this[this.t-1]==c)--this.t}function bnToString(b){if(this.s<0)return"-"+this.negate().toString(b);var k;if(b==16)k=4;else if(b==8)k=3;else if(b==2)k=1;else if(b==32)k=5;else if(b==4)k=2;else return this.toRadix(b);var km=(1<<k)-1,d,m=false,r="",i=this.t;var p=this.DB-i*this.DB%k;if(i-->0){if(p<this.DB&&(d=this[i]>>p)>0){m=true;r=int2char(d)}while(i>=0){if(p<k){d=(this[i]&(1<<p)-1)<<k-p;d|=this[--i]>>(p+=this.DB-k)}else{d=this[i]>>(p-=k)&km;if(p<=0){p+=this.DB;--i}}if(d>0)m=true;if(m)r+=int2char(d)}}return m?r:"0"}function bnNegate(){var r=nbi();BigInteger.ZERO.subTo(this,r);return r}function bnAbs(){return this.s<0?this.negate():this}function bnCompareTo(a){var r=this.s-a.s;if(r!=0)return r;var i=this.t;r=i-a.t;if(r!=0)return this.s<0?-r:r;while(--i>=0)if((r=this[i]-a[i])!=0)return r;return 0}function nbits(x){var r=1,t;if((t=x>>>16)!=0){x=t;r+=16}if((t=x>>8)!=0){x=t;r+=8}if((t=x>>4)!=0){x=t;r+=4}if((t=x>>2)!=0){x=t;r+=2}if((t=x>>1)!=0){x=t;r+=1}return r}function bnBitLength(){if(this.t<=0)return 0;return this.DB*(this.t-1)+nbits(this[this.t-1]^this.s&this.DM)}function bnpDLShiftTo(n,r){var i;for(i=this.t-1;i>=0;--i)r[i+n]=this[i];for(i=n-1;i>=0;--i)r[i]=0;r.t=this.t+n;r.s=this.s}function bnpDRShiftTo(n,r){for(var i=n;i<this.t;++i)r[i-n]=this[i];r.t=Math.max(this.t-n,0);r.s=this.s}function bnpLShiftTo(n,r){var bs=n%this.DB;var cbs=this.DB-bs;var bm=(1<<cbs)-1;var ds=Math.floor(n/this.DB),c=this.s<<bs&this.DM,i;for(i=this.t-1;i>=0;--i){r[i+ds+1]=this[i]>>cbs|c;c=(this[i]&bm)<<bs}for(i=ds-1;i>=0;--i)r[i]=0;r[ds]=c;r.t=this.t+ds+1;r.s=this.s;r.clamp()}function bnpRShiftTo(n,r){r.s=this.s;var ds=Math.floor(n/this.DB);if(ds>=this.t){r.t=0;return}var bs=n%this.DB;var cbs=this.DB-bs;var bm=(1<<bs)-1;r[0]=this[ds]>>bs;for(var i=ds+1;i<this.t;++i){r[i-ds-1]|=(this[i]&bm)<<cbs;r[i-ds]=this[i]>>bs}if(bs>0)r[this.t-ds-1]|=(this.s&bm)<<cbs;r.t=this.t-ds;r.clamp()}function bnpSubTo(a,r){var i=0,c=0,m=Math.min(a.t,this.t);while(i<m){c+=this[i]-a[i];r[i++]=c&this.DM;c>>=this.DB}if(a.t<this.t){c-=a.s;while(i<this.t){c+=this[i];r[i++]=c&this.DM;c>>=this.DB}c+=this.s}else{c+=this.s;while(i<a.t){c-=a[i];r[i++]=c&this.DM;c>>=this.DB}c-=a.s}r.s=c<0?-1:0;if(c<-1)r[i++]=this.DV+c;else if(c>0)r[i++]=c;r.t=i;r.clamp()}function bnpMultiplyTo(a,r){var x=this.abs(),y=a.abs();var i=x.t;r.t=i+y.t;while(--i>=0)r[i]=0;for(i=0;i<y.t;++i)r[i+x.t]=x.am(0,y[i],r,i,0,x.t);r.s=0;r.clamp();if(this.s!=a.s)BigInteger.ZERO.subTo(r,r)}function bnpSquareTo(r){var x=this.abs();var i=r.t=2*x.t;while(--i>=0)r[i]=0;for(i=0;i<x.t-1;++i){var c=x.am(i,x[i],r,2*i,0,1);if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1))>=x.DV){r[i+x.t]-=x.DV;r[i+x.t+1]=1}}if(r.t>0)r[r.t-1]+=x.am(i,x[i],r,2*i,0,1);r.s=0;r.clamp()}function bnpDivRemTo(m,q,r){var pm=m.abs();if(pm.t<=0)return;var pt=this.abs();if(pt.t<pm.t){if(q!=null)q.fromInt(0);if(r!=null)this.copyTo(r);return}if(r==null)r=nbi();var y=nbi(),ts=this.s,ms=m.s;var nsh=this.DB-nbits(pm[pm.t-1]);if(nsh>0){pm.lShiftTo(nsh,y);pt.lShiftTo(nsh,r)}else{pm.copyTo(y);pt.copyTo(r)}var ys=y.t;var y0=y[ys-1];if(y0==0)return;var yt=y0*(1<<this.F1)+(ys>1?y[ys-2]>>this.F2:0);var d1=this.FV/yt,d2=(1<<this.F1)/yt,e=1<<this.F2;var i=r.t,j=i-ys,t=q==null?nbi():q;y.dlShiftTo(j,t);if(r.compareTo(t)>=0){r[r.t++]=1;r.subTo(t,r)}BigInteger.ONE.dlShiftTo(ys,t);t.subTo(y,y);while(y.t<ys)y[y.t++]=0;while(--j>=0){var qd=r[--i]==y0?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);if((r[i]+=y.am(0,qd,r,j,0,ys))<qd){y.dlShiftTo(j,t);r.subTo(t,r);while(r[i]<--qd)r.subTo(t,r)}}if(q!=null){r.drShiftTo(ys,q);if(ts!=ms)BigInteger.ZERO.subTo(q,q)}r.t=ys;r.clamp();if(nsh>0)r.rShiftTo(nsh,r);if(ts<0)BigInteger.ZERO.subTo(r,r)}function bnMod(a){var r=nbi();this.abs().divRemTo(a,null,r);if(this.s<0&&r.compareTo(BigInteger.ZERO)>0)a.subTo(r,r);return r}function Classic(m){this.m=m}function cConvert(x){if(x.s<0||x.compareTo(this.m)>=0)return x.mod(this.m);else return x}function cRevert(x){return x}function cReduce(x){x.divRemTo(this.m,null,x)}function cMulTo(x,y,r){x.multiplyTo(y,r);this.reduce(r)}function cSqrTo(x,r){x.squareTo(r);this.reduce(r)}Classic.prototype.convert=cConvert;Classic.prototype.revert=cRevert;Classic.prototype.reduce=cReduce;Classic.prototype.mulTo=cMulTo;Classic.prototype.sqrTo=cSqrTo;function bnpInvDigit(){if(this.t<1)return 0;var x=this[0];if((x&1)==0)return 0;var y=x&3;y=y*(2-(x&15)*y)&15;y=y*(2-(x&255)*y)&255;y=y*(2-((x&65535)*y&65535))&65535;y=y*(2-x*y%this.DV)%this.DV;return y>0?this.DV-y:-y}function Montgomery(m){this.m=m;this.mp=m.invDigit();this.mpl=this.mp&32767;this.mph=this.mp>>15;this.um=(1<<m.DB-15)-1;this.mt2=2*m.t}function montConvert(x){var r=nbi();x.abs().dlShiftTo(this.m.t,r);r.divRemTo(this.m,null,r);if(x.s<0&&r.compareTo(BigInteger.ZERO)>0)this.m.subTo(r,r);return r}function montRevert(x){var r=nbi();x.copyTo(r);this.reduce(r);return r}function montReduce(x){while(x.t<=this.mt2)x[x.t++]=0;for(var i=0;i<this.m.t;++i){var j=x[i]&32767;var u0=j*this.mpl+((j*this.mph+(x[i]>>15)*this.mpl&this.um)<<15)&x.DM;j=i+this.m.t;x[j]+=this.m.am(0,u0,x,i,0,this.m.t);while(x[j]>=x.DV){x[j]-=x.DV;x[++j]++}}x.clamp();x.drShiftTo(this.m.t,x);if(x.compareTo(this.m)>=0)x.subTo(this.m,x)}function montSqrTo(x,r){x.squareTo(r);this.reduce(r)}function montMulTo(x,y,r){x.multiplyTo(y,r);this.reduce(r)}Montgomery.prototype.convert=montConvert;Montgomery.prototype.revert=montRevert;Montgomery.prototype.reduce=montReduce;Montgomery.prototype.mulTo=montMulTo;Montgomery.prototype.sqrTo=montSqrTo;function bnpIsEven(){return(this.t>0?this[0]&1:this.s)==0}function bnpExp(e,z){if(e>4294967295||e<1)return BigInteger.ONE;var r=nbi(),r2=nbi(),g=z.convert(this),i=nbits(e)-1;g.copyTo(r);while(--i>=0){z.sqrTo(r,r2);if((e&1<<i)>0)z.mulTo(r2,g,r);else{var t=r;r=r2;r2=t}}return z.revert(r)}function bnModPowInt(e,m){var z;if(e<256||m.isEven())z=new Classic(m);else z=new Montgomery(m);return this.exp(e,z)}BigInteger.prototype.copyTo=bnpCopyTo;BigInteger.prototype.fromInt=bnpFromInt;BigInteger.prototype.fromString=bnpFromString;BigInteger.prototype.clamp=bnpClamp;BigInteger.prototype.dlShiftTo=bnpDLShiftTo;BigInteger.prototype.drShiftTo=bnpDRShiftTo;BigInteger.prototype.lShiftTo=bnpLShiftTo;BigInteger.prototype.rShiftTo=bnpRShiftTo;BigInteger.prototype.subTo=bnpSubTo;BigInteger.prototype.multiplyTo=bnpMultiplyTo;BigInteger.prototype.squareTo=bnpSquareTo;BigInteger.prototype.divRemTo=bnpDivRemTo;BigInteger.prototype.invDigit=bnpInvDigit;BigInteger.prototype.isEven=bnpIsEven;BigInteger.prototype.exp=bnpExp;BigInteger.prototype.toString=bnToString;BigInteger.prototype.negate=bnNegate;BigInteger.prototype.abs=bnAbs;BigInteger.prototype.compareTo=bnCompareTo;BigInteger.prototype.bitLength=bnBitLength;BigInteger.prototype.mod=bnMod;BigInteger.prototype.modPowInt=bnModPowInt;BigInteger.ZERO=nbv(0);BigInteger.ONE=nbv(1);function bnpFromRadix(s,b){this.fromInt(0);if(b==null)b=10;var cs=this.chunkSize(b);var d=Math.pow(b,cs),mi=false,j=0,w=0;for(var i=0;i<s.length;++i){var x=intAt(s,i);if(x<0){if(s.charAt(i)=="-"&&this.signum()==0)mi=true;continue}w=b*w+x;if(++j>=cs){this.dMultiply(d);this.dAddOffset(w,0);j=0;w=0}}if(j>0){this.dMultiply(Math.pow(b,j));this.dAddOffset(w,0)}if(mi)BigInteger.ZERO.subTo(this,this)}function bnpChunkSize(r){return Math.floor(Math.LN2*this.DB/Math.log(r))}function bnSigNum(){if(this.s<0)return-1;else if(this.t<=0||this.t==1&&this[0]<=0)return 0;else return 1}function bnpDMultiply(n){this[this.t]=this.am(0,n-1,this,0,0,this.t);++this.t;this.clamp()}function bnpDAddOffset(n,w){if(n==0)return;while(this.t<=w)this[this.t++]=0;this[w]+=n;while(this[w]>=this.DV){this[w]-=this.DV;if(++w>=this.t)this[this.t++]=0;++this[w]}}function bnpToRadix(b){if(b==null)b=10;if(this.signum()==0||b<2||b>36)return"0";var cs=this.chunkSize(b);var a=Math.pow(b,cs);var d=nbv(a),y=nbi(),z=nbi(),r="";this.divRemTo(d,y,z);while(y.signum()>0){r=(a+z.intValue()).toString(b).substr(1)+r;y.divRemTo(d,y,z)}return z.intValue().toString(b)+r}function bnIntValue(){if(this.s<0){if(this.t==1)return this[0]-this.DV;else if(this.t==0)return-1}else if(this.t==1)return this[0];else if(this.t==0)return 0;return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]}function bnpAddTo(a,r){var i=0,c=0,m=Math.min(a.t,this.t);while(i<m){c+=this[i]+a[i];r[i++]=c&this.DM;c>>=this.DB}if(a.t<this.t){c+=a.s;while(i<this.t){c+=this[i];r[i++]=c&this.DM;c>>=this.DB}c+=this.s}else{c+=this.s;while(i<a.t){c+=a[i];r[i++]=c&this.DM;c>>=this.DB}c+=a.s}r.s=c<0?-1:0;if(c>0)r[i++]=c;else if(c<-1)r[i++]=this.DV+c;r.t=i;r.clamp()}BigInteger.prototype.fromRadix=bnpFromRadix;BigInteger.prototype.chunkSize=bnpChunkSize;BigInteger.prototype.signum=bnSigNum;BigInteger.prototype.dMultiply=bnpDMultiply;BigInteger.prototype.dAddOffset=bnpDAddOffset;BigInteger.prototype.toRadix=bnpToRadix;BigInteger.prototype.intValue=bnIntValue;BigInteger.prototype.addTo=bnpAddTo;var Wrapper={abs:(function(l,h){var x=new goog.math.Long(l,h);var ret;if(x.isNegative()){ret=x.negate()}else{ret=x}HEAP32[tempDoublePtr>>2]=ret.low_;HEAP32[tempDoublePtr+4>>2]=ret.high_}),ensureTemps:(function(){if(Wrapper.ensuredTemps)return;Wrapper.ensuredTemps=true;Wrapper.two32=new BigInteger;Wrapper.two32.fromString("4294967296",10);Wrapper.two64=new BigInteger;Wrapper.two64.fromString("18446744073709551616",10);Wrapper.temp1=new BigInteger;Wrapper.temp2=new BigInteger}),lh2bignum:(function(l,h){var a=new BigInteger;a.fromString(h.toString(),10);var b=new BigInteger;a.multiplyTo(Wrapper.two32,b);var c=new BigInteger;c.fromString(l.toString(),10);var d=new BigInteger;c.addTo(b,d);return d}),stringify:(function(l,h,unsigned){var ret=(new goog.math.Long(l,h)).toString();if(unsigned&&ret[0]=="-"){Wrapper.ensureTemps();var bignum=new BigInteger;bignum.fromString(ret,10);ret=new BigInteger;Wrapper.two64.addTo(bignum,ret);ret=ret.toString(10)}return ret}),fromString:(function(str,base,min,max,unsigned){Wrapper.ensureTemps();var bignum=new BigInteger;bignum.fromString(str,base);var bigmin=new BigInteger;bigmin.fromString(min,10);var bigmax=new BigInteger;bigmax.fromString(max,10);if(unsigned&&bignum.compareTo(BigInteger.ZERO)<0){var temp=new BigInteger;bignum.addTo(Wrapper.two64,temp);bignum=temp}var error=false;if(bignum.compareTo(bigmin)<0){bignum=bigmin;error=true}else if(bignum.compareTo(bigmax)>0){bignum=bigmax;error=true}var ret=goog.math.Long.fromString(bignum.toString());HEAP32[tempDoublePtr>>2]=ret.low_;HEAP32[tempDoublePtr+4>>2]=ret.high_;if(error)throw"range error"})};return Wrapper})();if(memoryInitializer){if(typeof Module["locateFile"]==="function"){memoryInitializer=Module["locateFile"](memoryInitializer)}else if(Module["memoryInitializerPrefixURL"]){memoryInitializer=Module["memoryInitializerPrefixURL"]+memoryInitializer}if(ENVIRONMENT_IS_NODE||ENVIRONMENT_IS_SHELL){var data=Module["readBinary"](memoryInitializer);HEAPU8.set(data,STATIC_BASE)}else{addRunDependency("memory initializer");Browser.asyncLoad(memoryInitializer,(function(data){HEAPU8.set(data,STATIC_BASE);removeRunDependency("memory initializer")}),(function(data){throw"could not load memory initializer "+memoryInitializer}))}}function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;var preloadStartTime=null;var calledMain=false;dependenciesFulfilled=function runCaller(){if(!Module["calledRun"]&&shouldRunNow)run();if(!Module["calledRun"])dependenciesFulfilled=runCaller};Module["callMain"]=Module.callMain=function callMain(args){assert(runDependencies==0,"cannot call main when async dependencies remain! (listen on __ATMAIN__)");assert(__ATPRERUN__.length==0,"cannot call main when preRun functions remain to be called");args=args||[];ensureInitRuntime();var argc=args.length+1;function pad(){for(var i=0;i<4-1;i++){argv.push(0)}}var argv=[allocate(intArrayFromString(Module["thisProgram"]),"i8",ALLOC_NORMAL)];pad();for(var i=0;i<argc-1;i=i+1){argv.push(allocate(intArrayFromString(args[i]),"i8",ALLOC_NORMAL));pad()}argv.push(0);argv=allocate(argv,"i32",ALLOC_NORMAL);initialStackTop=STACKTOP;try{var ret=Module["_main"](argc,argv,0);exit(ret)}catch(e){if(e instanceof ExitStatus){return}else if(e=="SimulateInfiniteLoop"){Module["noExitRuntime"]=true;return}else{if(e&&typeof e==="object"&&e.stack)Module.printErr("exception thrown: "+[e,e.stack]);throw e}}finally{calledMain=true}};function run(args){args=args||Module["arguments"];if(preloadStartTime===null)preloadStartTime=Date.now();if(runDependencies>0){Module.printErr("run() called, but dependencies remain, so not running");return}preRun();if(runDependencies>0)return;if(Module["calledRun"])return;function doRun(){if(Module["calledRun"])return;Module["calledRun"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(ENVIRONMENT_IS_WEB&&preloadStartTime!==null){Module.printErr("pre-main prep time: "+(Date.now()-preloadStartTime)+" ms")}if(Module["_main"]&&shouldRunNow){Module["callMain"](args)}postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout((function(){setTimeout((function(){Module["setStatus"]("")}),1);doRun()}),1)}else{doRun()}}Module["run"]=Module.run=run;function exit(status){if(Module["noExitRuntime"]){return}ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(ENVIRONMENT_IS_NODE){process["stdout"]["once"]("drain",(function(){process["exit"](status)}));console.log(" ");setTimeout((function(){process["exit"](status)}),500)}else if(ENVIRONMENT_IS_SHELL&&typeof quit==="function"){quit(status)}throw new ExitStatus(status)}Module["exit"]=Module.exit=exit;function abort(text){if(text){Module.print(text);Module.printErr(text)}ABORT=true;EXITSTATUS=1;var extra="\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";throw"abort() at "+stackTrace()+extra}Module["abort"]=Module.abort=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}var shouldRunNow=true;if(Module["noInitialRun"]){shouldRunNow=false}run()




